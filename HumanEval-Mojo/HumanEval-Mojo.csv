task_id,prompt,canonical_solution,test,entry_point
HumanEval-Mojo/0,"fn truncate_number(number: Float64) -> Float64:
    """""" Given a positive floating point number, it can be decomposed into
    an integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    Example:
    >>> let result = truncate_number(3.5)
    >>> print(result)
    0.5
    """"""","fn is_decimal(number: Float64) -> Bool:
    return number % 1.0 != 0.0","from testing import assert_equal, assert_almost_equal

fn test_truncate_number():
    assert_equal(truncate_number(3.5), 0.5)
    assert_almost_equal(truncate_number(1.33), 0.33, 1e-6)
    assert_almost_equal(truncate_number(123.456), 0.456, 1e-6)

fn main():
    test_truncate_number()
    print(""All tests passed!"")",truncate_number
HumanEval-Mojo/1,"from tensor import Tensor


fn mean_absolute_deviation(numbers: Tensor[DType.float64]) -> Float64:
    """""" For a given Tensor of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    Example:
    >>> let numbers = Tensor[DType.float64]([1.0, 2.0, 3.0, 4.0])
    >>> mean_absolute_deviation(numbers)
    1.0
    """"""","fn calculate_mean_absolute_deviation(numbers: DynamicVector[Float64]) raises -> Float64:
    if numbers.size() == 0:
        raise Error(""Cannot calculate MAD for an empty vector"")
    
    let mean = numbers.reduce_sum() / numbers.size().to_float64()
    var sum_of_deviations: Float64 = 0
    
    for i in range(numbers.size()):
        sum_of_deviations += abs(numbers[i] - mean)
    
    return sum_of_deviations / numbers.size().to_float64()","from testing import assert_equal, assert_true
from math import abs

fn test_mean_absolute_deviation():
    let epsilon = 1e-6

    # Test case 1
    let result1 = mean_absolute_deviation([1.0, 2.0, 3.0])
    assert_true(abs(result1 - 2.0/3.0) < epsilon, ""Test case 1 failed"")

    # Test case 2
    let result2 = mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    assert_true(abs(result2 - 1.0) < epsilon, ""Test case 2 failed"")

    # Test case 3
    let result3 = mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])
    assert_true(abs(result3 - 6.0/5.0) < epsilon, ""Test case 3 failed"")

    print(""All test cases passed!"")

fn main():
    test_mean_absolute_deviation()",mean_absolute_deviation
HumanEval-Mojo/2,"fn below_zero(operations: DynamicVector[Int]) -> Bool:
    """""" You're given a DynamicVector of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account falls below zero, and
    at that point function should return True. Otherwise it should return False.
    Example:
    >>> below_zero(DynamicVector[Int]([1, 2, 3]))
    False
    >>> below_zero(DynamicVector[Int]([1, 2, -4, 5]))
    True
    """"""","fn check_negative_balance(operations: List[Int]) -> Bool:
    var balance: Int = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False","from testing import assert_equal

fn test_below_zero():
    # Test case 1: Empty list
    assert_equal(below_zero([]), False)
    
    # Test case 2: No elements below zero
    assert_equal(below_zero([1, 2, -3, 1, 2, -3]), False)
    
    # Test case 3: Contains element below zero
    assert_equal(below_zero([1, 2, -4, 5, 6]), True)
    
    # Test case 4: Alternating positive and negative, sum never below zero
    assert_equal(below_zero([1, -1, 2, -2, 5, -5, 4, -4]), False)
    
    # Test case 5: Alternating positive and negative, sum goes below zero
    assert_equal(below_zero([1, -1, 2, -2, 5, -5, 4, -5]), True)
    
    # Test case 6: Sum goes below zero early in the list
    assert_equal(below_zero([1, -2, 2, -2, 5, -5, 4, -4]), True)

    print(""All tests passed!"")

fn main():
    test_below_zero()",below_zero
HumanEval-Mojo/3,"from collections import List

fn separate_paren_groups(paren_string: String) -> List[String]:
    """""" Input to this function is a String containing multiple groups of nested parentheses. Your goal is to
    separate those groups into separate Strings and return the List of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input String.
    Example:
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""","from collections.vector import DynamicVector

fn extract_parentheses(paren_string: String) raises -> DynamicVector[String]:
    var result = DynamicVector[String]()
    var current_string = String()
    var current_depth: Int = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string += c
        elif c == ')':
            current_depth -= 1
            current_string += c

            if current_depth == 0:
                result.push_back(current_string)
                current_string = String()
        
        if current_depth < 0:
            raise Error(""Unbalanced parentheses"")

    if current_depth != 0:
        raise Error(""Unbalanced parentheses"")

    return result

fn main() raises:
    let test_string = ""((()())())(()())""
    let result = extract_parentheses(test_string)
    
    for s in result:
        print(s)","from testing import assert_equal

fn test_separate_paren_groups():
    # Test case 1
    let result1 = separate_paren_groups(""(()()) ((())) () ((())()())"")
    let expected1 = [""(()())"", ""((()))"", ""()"", ""((())()())""]
    assert_equal(result1, expected1)

    # Test case 2
    let result2 = separate_paren_groups(""() (()) ((())) (((())))"")
    let expected2 = [""()"", ""(())"", ""((()))"", ""(((())))""]
    assert_equal(result2, expected2)

    # Test case 3
    let result3 = separate_paren_groups(""(()(())((())))"")
    let expected3 = [""(()(())((())))"" ]
    assert_equal(result3, expected3)

    # Test case 4
    let result4 = separate_paren_groups(""( ) (( )) (( )( ))"")
    let expected4 = [""()"", ""(())"", ""(()())""]
    assert_equal(result4, expected4)

    print(""All tests passed!"")

fn main():
    test_separate_paren_groups()",separate_paren_groups
HumanEval-Mojo/4,"from tensor import Tensor

fn has_close_elements(numbers: Tensor[DType.float64], threshold: Float64) -> Bool:
    """""" Check if in given tensor of numbers, are any two numbers closer to each other than
    given threshold.
    Example:
    >>> let numbers1 = Tensor[DType.float64]([1.0, 2.0, 3.0])
    >>> has_close_elements(numbers1, 0.5)
    False
    >>> let numbers2 = Tensor[DType.float64]([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])
    >>> has_close_elements(numbers2, 0.3)
    True
    """"""","fn find_close_elements(numbers: DynamicVector[Int], threshold: Int) raises -> Bool:
    let length = numbers.len()
    
    for i in range(length):
        let elem = numbers[i]
        for j in range(length):
            if i != j:
                let elem2 = numbers[j]
                let distance = abs(elem - elem2)
                if distance < threshold:
                    return True
    
    return False

fn abs(x: Int) -> Int:
    if x < 0:
        return -x
    return x","from testing import assert_true, assert_false
from math import abs

fn has_close_elements(numbers: DynamicVector[Float64], threshold: Float64) -> Bool:
    # Assuming the implementation of has_close_elements is defined here
    # or imported from another module
    ...

fn test_has_close_elements():
    print(""Running tests for has_close_elements"")

    # Test case 1
    var numbers1 = DynamicVector[Float64]([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])
    assert_true(has_close_elements(numbers1, 0.3), ""Test case 1 failed"")

    # Test case 2
    var numbers2 = DynamicVector[Float64]([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])
    assert_false(has_close_elements(numbers2, 0.05), ""Test case 2 failed"")

    # Test case 3
    var numbers3 = DynamicVector[Float64]([1.0, 2.0, 5.9, 4.0, 5.0])
    assert_true(has_close_elements(numbers3, 0.95), ""Test case 3 failed"")

    # Test case 4
    var numbers4 = DynamicVector[Float64]([1.0, 2.0, 5.9, 4.0, 5.0])
    assert_false(has_close_elements(numbers4, 0.8), ""Test case 4 failed"")

    # Test case 5
    var numbers5 = DynamicVector[Float64]([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    assert_true(has_close_elements(numbers5, 0.1), ""Test case 5 failed"")

    # Test case 6
    var numbers6 = DynamicVector[Float64]([1.1, 2.2, 3.1, 4.1, 5.1])
    assert_true(has_close_elements(numbers6, 1.0), ""Test case 6 failed"")

    # Test case 7
    var numbers7 = DynamicVector[Float64]([1.1, 2.2, 3.1, 4.1, 5.1])
    assert_false(has_close_elements(numbers7, 0.5), ""Test case 7 failed"")

    print(""All tests passed successfully"")

fn main():
    test_has_close_elements()",has_close_elements
HumanEval-Mojo/5,"from collections import List

fn sum_product(numbers: List[Int]) -> (Int, Int):
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""","fn calculate_sum_and_product(numbers: DynamicVector[Int]) -> (Int, Int):
    var sum_value: Int = 0
    var prod_value: Int = 1

    for i in range(len(numbers)):
        sum_value += numbers[i]
        prod_value *= numbers[i]

    return (sum_value, prod_value)","from testing import assert_equal

fn test_sum_product():
    # Test empty list
    let result1 = sum_product([])
    assert_equal(result1.0, 0)
    assert_equal(result1.1, 1)

    # Test list with all 1s
    let result2 = sum_product([1, 1, 1])
    assert_equal(result2.0, 3)
    assert_equal(result2.1, 1)

    # Test list with a zero
    let result3 = sum_product([100, 0])
    assert_equal(result3.0, 100)
    assert_equal(result3.1, 0)

    # Test list with multiple values
    let result4 = sum_product([3, 5, 7])
    assert_equal(result4.0, 3 + 5 + 7)
    assert_equal(result4.1, 3 * 5 * 7)

    # Test list with single value
    let result5 = sum_product([10])
    assert_equal(result5.0, 10)
    assert_equal(result5.1, 10)

    print(""All tests passed!"")

fn main():
    test_sum_product()",sum_product
HumanEval-Mojo/6,"from collections.vector import DynamicVector

fn parse_nested_parens(paren_string: String) -> DynamicVector[Int]:
    """""" Input to this function is a String represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    Example:
    let result = parse_nested_parens(""(()()) ((())) () ((())()())"")
    # result should be equivalent to [2, 3, 1, 3]
    """"""","from python import Python

fn parse_paren_group(s: String) raises -> Int:
    var depth: Int = 0
    var max_depth: Int = 0
    
    for i in range(len(s)):
        let c = s[i]
        if c == '(':
            depth += 1
            max_depth = max(depth, max_depth)
        elif c == ')':
            depth -= 1
        
    return max_depth

fn process_paren_string(paren_string: String) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    let split_strings = paren_string.split()
    var result = py.list()
    
    for s in split_strings:
        if len(s) > 0:
            let depth = parse_paren_group(s)
            _ = result.append(depth)
    
    return result

fn main() raises:
    let input_string = ""(()) (()) () ((()))""
    let result = process_paren_string(input_string)
    print(result)","from testing import assert_equal

fn test_parse_nested_parens():
    # Test case 1
    let result1 = parse_nested_parens(""(()()) ((())) () ((())()())"")
    assert_equal(result1, [2, 3, 1, 3])

    # Test case 2
    let result2 = parse_nested_parens(""() (()) ((())) (((())))"")
    assert_equal(result2, [1, 2, 3, 4])

    # Test case 3
    let result3 = parse_nested_parens(""(()(())((())))"")
    assert_equal(result3, [4])

    print(""All tests passed!"")

fn main():
    test_parse_nested_parens()",parse_nested_parens
HumanEval-Mojo/7,"from collections.vector import DynamicVector


fn filter_by_substring(strings: DynamicVector[String], substring: String) -> DynamicVector[String]:
    """""" Filter an input DynamicVector of strings only for ones that contain given substring
    >>> filter_by_substring(DynamicVector[String](), ""a"")
    DynamicVector[String]()
    >>> filter_by_substring(DynamicVector[String](""abc"", ""bacd"", ""cde"", ""array""), ""a"")
    DynamicVector[String](""abc"", ""bacd"", ""array"")
    """"""","fn filter_strings(strings: List[String], substring: String) -> List[String]:
    var result = List[String]()
    for s in strings:
        if substring in s:
            result.append(s)
    return result","from testing import assert_equal
from collections.vector import DynamicVector

fn filter_by_substring(input: DynamicVector[String], substring: String) -> DynamicVector[String]:
    # Assuming this function is implemented elsewhere
    ...

fn test_filter_by_substring():
    # Test case 1: Empty list
    var empty_input = DynamicVector[String]()
    var result1 = filter_by_substring(empty_input, ""john"")
    assert_equal(len(result1), 0, ""Empty list should return empty result"")

    # Test case 2: Filter 'xxx'
    var input2 = DynamicVector[String]()
    input2.push_back(""xxx"")
    input2.push_back(""asd"")
    input2.push_back(""xxy"")
    input2.push_back(""john doe"")
    input2.push_back(""xxxAAA"")
    input2.push_back(""xxx"")
    var result2 = filter_by_substring(input2, ""xxx"")
    assert_equal(len(result2), 3, ""Should return 3 items containing 'xxx'"")
    assert_equal(result2[0], ""xxx"", ""First item should be 'xxx'"")
    assert_equal(result2[1], ""xxxAAA"", ""Second item should be 'xxxAAA'"")
    assert_equal(result2[2], ""xxx"", ""Third item should be 'xxx'"")

    # Test case 3: Filter 'xx'
    var input3 = DynamicVector[String]()
    input3.push_back(""xxx"")
    input3.push_back(""asd"")
    input3.push_back(""aaaxxy"")
    input3.push_back(""john doe"")
    input3.push_back(""xxxAAA"")
    input3.push_back(""xxx"")
    var result3 = filter_by_substring(input3, ""xx"")
    assert_equal(len(result3), 4, ""Should return 4 items containing 'xx'"")
    assert_equal(result3[0], ""xxx"", ""First item should be 'xxx'"")
    assert_equal(result3[1], ""aaaxxy"", ""Second item should be 'aaaxxy'"")
    assert_equal(result3[2], ""xxxAAA"", ""Third item should be 'xxxAAA'"")
    assert_equal(result3[3], ""xxx"", ""Fourth item should be 'xxx'"")

    # Test case 4: Filter 'run'
    var input4 = DynamicVector[String]()
    input4.push_back(""grunt"")
    input4.push_back(""trumpet"")
    input4.push_back(""prune"")
    input4.push_back(""gruesome"")
    var result4 = filter_by_substring(input4, ""run"")
    assert_equal(len(result4), 2, ""Should return 2 items containing 'run'"")
    assert_equal(result4[0], ""grunt"", ""First item should be 'grunt'"")
    assert_equal(result4[1], ""prune"", ""Second item should be 'prune'"")

    print(""All tests passed!"")

fn main():
    test_filter_by_substring()",filter_by_substring
HumanEval-Mojo/8,"from collections import DynamicVector

fn rolling_max(numbers: DynamicVector[Int]) -> DynamicVector[Int]:
    """""" From a given DynamicVector of integers, generate a DynamicVector of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max(DynamicVector[Int]([1, 2, 3, 2, 3, 4, 2]))
    DynamicVector[Int]([1, 2, 3, 3, 3, 4, 4])
    """"""","from python import Python

fn running_maximum(numbers: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    var running_max: PythonObject = py.None
    var result = py.list()

    for i in range(len(numbers)):
        let n = numbers[i]
        if running_max == py.None:
            running_max = n
        else:
            running_max = py.max(running_max, n)

        result.append(running_max)

    return result

fn main() raises:
    let py = Python.import_module(""builtins"")
    let numbers = py.list([1, 2, 3, 2, 1])
    let result = running_maximum(numbers)
    print(result)","from testing import assert_equal
from collections.vector import DynamicVector

fn test_rolling_max():
    # Test case 1: Empty list
    var empty_input = DynamicVector[Int]()
    var empty_result = rolling_max(empty_input)
    assert_equal(empty_result.size, 0)

    # Test case 2: Increasing sequence
    var increasing_input = DynamicVector[Int]([1, 2, 3, 4])
    var increasing_result = rolling_max(increasing_input)
    assert_equal(increasing_result, DynamicVector[Int]([1, 2, 3, 4]))

    # Test case 3: Decreasing sequence
    var decreasing_input = DynamicVector[Int]([4, 3, 2, 1])
    var decreasing_result = rolling_max(decreasing_input)
    assert_equal(decreasing_result, DynamicVector[Int]([4, 4, 4, 4]))

    # Test case 4: Mixed sequence
    var mixed_input = DynamicVector[Int]([3, 2, 3, 100, 3])
    var mixed_result = rolling_max(mixed_input)
    assert_equal(mixed_result, DynamicVector[Int]([3, 3, 3, 100, 100]))

    print(""All tests passed!"")

fn main():
    test_rolling_max()",rolling_max
HumanEval-Mojo/9,"from tensor import Tensor

fn intersperse(numbers: Tensor[int], delimiter: Int) -> Tensor[int]:
    """"""
    Insert a number 'delimiter' between every two consecutive elements of input Tensor `numbers'
    
    Examples:
    >>> let empty = Tensor[int]()
    >>> intersperse(empty, 4)
    Tensor[int]()
    
    >>> let nums = Tensor[int]([1, 2, 3])
    >>> intersperse(nums, 4)
    Tensor[int]([1, 4, 2, 4, 3])
    """"""","from python import Python

fn insert_delimeter(numbers: PythonObject, delimeter: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    
    if numbers.is_empty():
        return py.list()
    
    var result = py.list()
    let slice_end = numbers.__len__() - 1
    
    for i in range(slice_end):
        let n = numbers.__getitem__(i)
        result.append(n)
        result.append(delimeter)
    
    result.append(numbers.__getitem__(-1))
    
    return result

fn main() raises:
    let py = Python.import_module(""builtins"")
    let numbers = py.list([1, 2, 3, 4, 5])
    let delimeter = 0
    
    let result = insert_delimeter(numbers, delimeter)
    print(result)","from testing import assert_equal

fn test_intersperse():
    # Test case 1: Empty list
    let empty_input = DynamicVector[Int]()
    let empty_expected = DynamicVector[Int]()
    assert_equal(intersperse(empty_input, 7), empty_expected)

    # Test case 2: List with multiple elements
    var input2 = DynamicVector[Int]()
    input2.push_back(5)
    input2.push_back(6)
    input2.push_back(3)
    input2.push_back(2)
    var expected2 = DynamicVector[Int]()
    expected2.push_back(5)
    expected2.push_back(8)
    expected2.push_back(6)
    expected2.push_back(8)
    expected2.push_back(3)
    expected2.push_back(8)
    expected2.push_back(2)
    assert_equal(intersperse(input2, 8), expected2)

    # Test case 3: List with repeated elements
    var input3 = DynamicVector[Int]()
    input3.push_back(2)
    input3.push_back(2)
    input3.push_back(2)
    var expected3 = DynamicVector[Int]()
    expected3.push_back(2)
    expected3.push_back(2)
    expected3.push_back(2)
    expected3.push_back(2)
    expected3.push_back(2)
    assert_equal(intersperse(input3, 2), expected3)

fn main():
    test_intersperse()
    print(""All tests passed!"")",intersperse
HumanEval-Mojo/10,"fn string_xor(a: String, b: String) -> String:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    Example:
    let result = string_xor(""010"", ""110"")
    print(result)  # Output: ""100""
    """"""","fn xor(i: String, j: String) -> String:
    if i == j:
        return ""0""
    else:
        return ""1""

fn string_xor(a: String, b: String) raises -> String:
    var result = String()
    let length = min(len(a), len(b))
    
    for i in range(length):
        result += xor(a[i], b[i])
    
    return result

fn main() raises:
    let a = ""1010""
    let b = ""1111""
    let result = string_xor(a, b)
    print(result)","from testing import assert_equal

fn test_string_xor():
    # Test case 1
    let result1 = string_xor(""111000"", ""101010"")
    assert_equal(result1, ""010010"", ""Test case 1 failed"")

    # Test case 2
    let result2 = string_xor(""1"", ""1"")
    assert_equal(result2, ""0"", ""Test case 2 failed"")

    # Test case 3
    let result3 = string_xor(""0101"", ""0000"")
    assert_equal(result3, ""0101"", ""Test case 3 failed"")

    print(""All test cases passed!"")

fn main():
    test_string_xor()",string_xor
HumanEval-Mojo/11,"fn greatest_common_divisor(a: Int, b: Int) -> Int:
    """"""
    Return the greatest common divisor of two integers a and b

    Example usage:
    let result1 = greatest_common_divisor(3, 5)
    print(result1)  # Output: 1

    let result2 = greatest_common_divisor(25, 15)
    print(result2)  # Output: 5
    """"""","fn gcd(a: Int, b: Int) -> Int:
    var a_val: Int = a
    var b_val: Int = b
    
    while b_val != 0:
        let temp: Int = b_val
        b_val = a_val % b_val
        a_val = temp
    
    return a_val

fn main():
    let result = gcd(48, 18)
    print(result)","from testing import assert_equal

fn test_greatest_common_divisor():
    assert_equal(greatest_common_divisor(3, 7), 1, ""Test case 1 failed"")
    assert_equal(greatest_common_divisor(10, 15), 5, ""Test case 2 failed"")
    assert_equal(greatest_common_divisor(49, 14), 7, ""Test case 3 failed"")
    assert_equal(greatest_common_divisor(144, 60), 12, ""Test case 4 failed"")

fn main():
    test_greatest_common_divisor()
    print(""All tests passed!"")",greatest_common_divisor
HumanEval-Mojo/12,"from collections import DynamicVector

fn all_prefixes(string: String) -> DynamicVector[String]:
    """""" Return DynamicVector of all prefixes from shortest to longest of the input string
    >>> all_prefixes(""abc"")
    [""a"", ""ab"", ""abc""]
    """"""","fn generate_substrings(string: String) raises -> DynamicVector[String]:
    var result = DynamicVector[String]()
    
    for i in range(len(string)):
        try:
            result.append(string[:i+1])
        except:
            print(""Error appending substring"")
    
    return result","from testing import assert_equal

fn test_all_prefixes():
    # Test case 1: Empty string
    assert_equal(all_prefixes(""""), [])
    
    # Test case 2: String ""asdfgh""
    assert_equal(
        all_prefixes(""asdfgh""),
        [""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""]
    )
    
    # Test case 3: String ""WWW""
    assert_equal(all_prefixes(""WWW""), [""W"", ""WW"", ""WWW""])
    
    print(""All tests passed!"")

fn main():
    test_all_prefixes()",all_prefixes
HumanEval-Mojo/13,"from collections import List

fn longest(strings: List[String]) -> String?:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest([""a"", ""b"", ""c""])
    ""a""
    >>> longest([""a"", ""bb"", ""ccc""])
    ""ccc""
    """"""","fn find_longest_string(strings: List[String]) raises -> String?:
    if strings.is_empty():
        return None
    
    var maxlen: Int = 0
    for s in strings:
        if s.count() > maxlen:
            maxlen = s.count()
    
    for s in strings:
        if s.count() == maxlen:
            return s
    
    return None","from testing import assert_equal, assert_true
from sys.info import simdwidthof

fn test_longest():
    # Test case 1: Empty list
    let empty_list: DynamicVector[StringLiteral] = DynamicVector[StringLiteral]()
    assert_true(longest(empty_list) == None, ""Empty list should return None"")

    # Test case 2: List with single-character strings
    let single_char_list = DynamicVector[StringLiteral]()
    single_char_list.push_back(""x"")
    single_char_list.push_back(""y"")
    single_char_list.push_back(""z"")
    assert_equal(longest(single_char_list), ""x"", ""Should return first string when all are same length"")

    # Test case 3: List with varying length strings
    let varying_length_list = DynamicVector[StringLiteral]()
    varying_length_list.push_back(""x"")
    varying_length_list.push_back(""yyy"")
    varying_length_list.push_back(""zzzz"")
    varying_length_list.push_back(""www"")
    varying_length_list.push_back(""kkkk"")
    varying_length_list.push_back(""abc"")
    assert_equal(longest(varying_length_list), ""zzzz"", ""Should return the longest string"")

fn main():
    test_longest()
    print(""All tests passed!"")",longest
HumanEval-Mojo/14,"fn is_palindrome(string: String) -> Bool:
    """""" Test if given string is a palindrome """"""
    # Note: Mojo doesn't have a built-in reverse slice notation,
    # so the implementation would need to be different

fn make_palindrome(string: String) -> String:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    
    Examples:
    make_palindrome("""")    # Returns """"
    make_palindrome(""cat"") # Returns ""catac""
    make_palindrome(""cata"") # Returns ""catac""
    """"""","from python import Python

fn is_palindrome(s: String) -> Bool:
    let py = Python.import_module(""builtins"")
    return py.all(s[i] == s[len(s) - 1 - i] for i in range(len(s) // 2))

fn shortest_palindrome(string: String) raises -> String:
    if len(string) == 0:
        return """"

    var beginning_of_suffix: Int = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    let suffix = string[:beginning_of_suffix]
    let reversed_suffix = String(suffix.reversed())
    
    return string + reversed_suffix

fn main() raises:
    let test_string = ""abcd""
    let result = shortest_palindrome(test_string)
    print(result)","from testing import assert_equal

fn test_make_palindrome():
    print(""Running tests for make_palindrome..."")
    
    assert_equal(make_palindrome(""""), """", ""Empty string should return empty string"")
    assert_equal(make_palindrome(""x""), ""x"", ""Single character should return itself"")
    assert_equal(make_palindrome(""xyz""), ""xyzyx"", ""Should create palindrome for 'xyz'"")
    assert_equal(make_palindrome(""xyx""), ""xyx"", ""Already palindrome should return itself"")
    assert_equal(make_palindrome(""jerry""), ""jerryrrej"", ""Should create palindrome for 'jerry'"")
    
    print(""All tests passed!"")

fn main():
    test_make_palindrome()",make_palindrome
HumanEval-Mojo/15,"fn string_sequence(n: Int) -> String:
    """"""
    Return a string containing space-delimited numbers starting from 0 up to n inclusive.
    
    Examples:
    string_sequence(0) -> ""0""
    string_sequence(5) -> ""0 1 2 3 4 5""
    """"""","fn generate_sequence(n: Int) raises -> String:
    var result = String()
    for i in range(n + 1):
        if i > 0:
            result += "" ""
        result += String(i)
    return result","from testing import assert_equal

fn test_string_sequence():
    fn string_sequence(n: Int) -> String:
        # Assuming the implementation of string_sequence is defined here
        # or imported from another module
        pass

    # Test case 1
    let result1 = string_sequence(0)
    assert_equal(result1, ""0"", ""Test case 1 failed"")

    # Test case 2
    let result2 = string_sequence(3)
    assert_equal(result2, ""0 1 2 3"", ""Test case 2 failed"")

    # Test case 3
    let result3 = string_sequence(10)
    assert_equal(result3, ""0 1 2 3 4 5 6 7 8 9 10"", ""Test case 3 failed"")

    print(""All test cases passed!"")

fn main():
    test_string_sequence()",string_sequence
HumanEval-Mojo/16,"fn how_many_times(string: String, substring: String) -> Int:
    """""" Find how many times a given substring can be found in the original string. Count overlapping cases.
    
    Example usage:
    let result1 = how_many_times("""", ""a"")
    print(result1)  # Output: 0
    
    let result2 = how_many_times(""aaa"", ""a"")
    print(result2)  # Output: 3
    
    let result3 = how_many_times(""aaaa"", ""aa"")
    print(result3)  # Output: 3
    """"""","fn count_substring(string: String, substring: String) -> Int:
    var times: Int = 0
    let string_len: Int = len(string)
    let substring_len: Int = len(substring)

    for i in range(string_len - substring_len + 1):
        if string[i:i+substring_len] == substring:
            times += 1

    return times","from testing import assert_equal

fn test_how_many_times():
    # Test case 1: Empty string
    assert_equal(how_many_times("""", ""x""), 0, ""Empty string should return 0"")

    # Test case 2: Multiple occurrences
    assert_equal(how_many_times(""xyxyxyx"", ""x""), 4, ""Should find 'x' 4 times"")

    # Test case 3: Overlapping occurrences
    assert_equal(how_many_times(""cacacacac"", ""cac""), 4, ""Should find 'cac' 4 times"")

    # Test case 4: Single occurrence
    assert_equal(how_many_times(""john doe"", ""john""), 1, ""Should find 'john' once"")

    print(""All tests passed!"")

fn main():
    test_how_many_times()",how_many_times
HumanEval-Mojo/17,"fn count_distinct_characters(string: String) -> Int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    
    Example usage:
    let result1 = count_distinct_characters(""xyzXYZ"")
    print(result1)  # Should output: 3
    
    let result2 = count_distinct_characters(""Jerry"")
    print(result2)  # Should output: 4
    """"""","fn count_unique_chars(string: String) -> Int:
    var lowercase_set = StringSet()
    for c in string:
        lowercase_set.add(c.to_lowercase())
    return lowercase_set.size()","from testing import assert_equal

fn test_count_distinct_characters():
    # Test case 1: Empty string
    assert_equal(count_distinct_characters(""""), 0)
    
    # Test case 2: String with all distinct characters
    assert_equal(count_distinct_characters(""abcde""), 5)
    
    # Test case 3: String with repeated characters in different cases
    assert_equal(count_distinct_characters(""abcde"" + ""cade"" + ""CADE""), 5)
    
    # Test case 4: String with all same character in different cases
    assert_equal(count_distinct_characters(""aaaaAAAAaaaa""), 1)
    
    # Test case 5: String with mixed case and some distinct characters
    assert_equal(count_distinct_characters(""Jerry jERRY JeRRRY""), 5)

    print(""All tests passed!"")

fn main():
    test_count_distinct_characters()",count_distinct_characters
HumanEval-Mojo/18,"fn sort_numbers(numbers: String) -> String:
    """""" Input is a space-delimited string of numerals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    
    Example:
    let result = sort_numbers(""three one five"")
    print(result)  # Output: ""one three five""
    """"""","from collections import Dict
from string import String, split_whitespace
from algorithm import sort

fn convert_to_mojo(numbers: String) raises -> String:
    let value_map = Dict[String, Int]()
    value_map[""zero""] = 0
    value_map[""one""] = 1
    value_map[""two""] = 2
    value_map[""three""] = 3
    value_map[""four""] = 4
    value_map[""five""] = 5
    value_map[""six""] = 6
    value_map[""seven""] = 7
    value_map[""eight""] = 8
    value_map[""nine""] = 9

    var words = split_whitespace(numbers)
    words = [word for word in words if word]

    fn compare(a: String, b: String) raises -> Bool:
        return value_map[a] < value_map[b]

    sort(words, compare)

    return "" "".join(words)","from testing import assert_equal

fn test_sort_numbers():
    # Test empty string
    assert_equal(sort_numbers(""""), """")
    
    # Test single word
    assert_equal(sort_numbers(""three""), ""three"")
    
    # Test multiple words, already sorted
    assert_equal(sort_numbers(""three five nine""), ""three five nine"")
    
    # Test multiple words, unsorted
    assert_equal(sort_numbers(""five zero four seven nine eight""), ""zero four five seven eight nine"")
    
    # Test reverse sorted words
    assert_equal(sort_numbers(""six five four three two one zero""), ""zero one two three four five six"")

    print(""All tests passed!"")

fn main():
    test_sort_numbers()",sort_numbers
HumanEval-Mojo/19,"from collections.vector import Vector

fn parse_music(music_string: String) -> Vector[Int]:
    """""" Input to this function is a String representing musical notes in a special ASCII format.
    Your task is to parse this string and return a Vector of integers corresponding to how many beats
    each note lasts.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    Example:
    let result = parse_music(""o o| .| o| o| .| .| .| .| o o"")
    # result should be equivalent to [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""","from collections import Dict
from memory import memset_zero

fn convert_notes(music_string: String) -> DynamicVector[Int]:
    let note_map = Dict[String, Int]()
    note_map[""o""] = 4
    note_map[""o|""] = 2
    note_map["".|""] = 1

    let split_notes = music_string.split(' ')
    var result = DynamicVector[Int]()

    for note in split_notes:
        if note.length() > 0:
            if note_map.contains(note):
                result.append(note_map[note])
            else:
                print(""Warning: Unknown note encountered:"", note)

    return result","from testing import assert_equal
from collections.vector import DynamicVector

fn parse_music(input: String) -> DynamicVector[Int]:
    # Assume this function is implemented elsewhere
    # It should parse the input string and return a DynamicVector of Ints
    ...

fn test_parse_music():
    print(""Running tests for parse_music function"")

    # Test empty string
    var result = parse_music("""")
    assert_equal(len(result), 0, ""Empty string should return empty vector"")

    # Test ""o o o o""
    result = parse_music(""o o o o"")
    assert_equal(result, DynamicVector[Int]([4, 4, 4, 4]), ""Test case 'o o o o' failed"")

    # Test "".| .| .| .|""
    result = parse_music("".| .| .| .|"")
    assert_equal(result, DynamicVector[Int]([1, 1, 1, 1]), ""Test case '.| .| .| .|' failed"")

    # Test ""o| o| .| .| o o o o""
    result = parse_music(""o| o| .| .| o o o o"")
    assert_equal(result, DynamicVector[Int]([2, 2, 1, 1, 4, 4, 4, 4]), ""Test case 'o| o| .| .| o o o o' failed"")

    # Test ""o| .| o| .| o o| o o|""
    result = parse_music(""o| .| o| .| o o| o o|"")
    assert_equal(result, DynamicVector[Int]([2, 1, 2, 1, 4, 2, 4, 2]), ""Test case 'o| .| o| .| o o| o o|' failed"")

    print(""All tests passed successfully!"")

fn main():
    test_parse_music()",parse_music
HumanEval-Mojo/20,"fn strlen(string: String) -> Int:
    """""" Return length of given string
    >>> strlen("""")
    0
    >>> strlen(""abc"")
    3
    """"""","fn string_length(string: String) -> Int:
    return string.count()","from testing import assert_equal

fn test_strlen():
    assert_equal(strlen(""""), 0, ""Empty string should have length 0"")
    assert_equal(strlen(""x""), 1, ""Single character string should have length 1"")
    assert_equal(strlen(""asdasnakj""), 9, ""String 'asdasnakj' should have length 9"")

fn main():
    test_strlen()
    print(""All tests passed!"")",strlen
HumanEval-Mojo/21,"fn largest_divisor(n: Int) -> Int:
    """"""
    For a given number n, find the largest number that divides n evenly, smaller than n
    
    Example:
    let result = largest_divisor(15)
    print(result)  # Output: 5
    """"""","fn find_largest_divisor(n: Int) raises -> Int:
    for i in range(n - 1, 0, -1):
        if n % i == 0:
            return i
    raise Error(""No divisor found"")","from testing import assert_equal

fn test_largest_divisor():
    assert_equal(largest_divisor(3), 1, ""Test case 1 failed"")
    assert_equal(largest_divisor(7), 1, ""Test case 2 failed"")
    assert_equal(largest_divisor(10), 5, ""Test case 3 failed"")
    assert_equal(largest_divisor(100), 50, ""Test case 4 failed"")
    assert_equal(largest_divisor(49), 7, ""Test case 5 failed"")

fn main():
    test_largest_divisor()
    print(""All tests passed!"")",largest_divisor
HumanEval-Mojo/22,"from collections import DynamicVector

fn filter_integers(values: DynamicVector[PythonObject]) -> DynamicVector[Int]:
    """""" Filter given DynamicVector of any Mojo values only for integers
    >>> filter_integers(DynamicVector[PythonObject](['a', 3.14, 5]))
    DynamicVector[Int]([5])
    >>> filter_integers(DynamicVector[PythonObject]([1, 2, 3, 'abc', {}, []]))
    DynamicVector[Int]([1, 2, 3])
    """"""","fn filter_integers(values: List[Object]) -> List[Int]:
    var result = List[Int]()
    for value in values:
        if value.is_a[Int]():
            result.append(value.get[Int]())
    return result","from testing import assert_equal
from collections.vector import DynamicVector

fn test_filter_integers():
    # Test case 1: Empty list
    var empty_input = DynamicVector[PythonObject]()
    var empty_result = filter_integers(empty_input)
    assert_equal(len(empty_result), 0, ""Empty list should return empty result"")

    # Test case 2: Mixed types
    var mixed_input = DynamicVector[PythonObject]()
    mixed_input.push_back(PythonObject(4))
    mixed_input.push_back(PythonObject({}))
    mixed_input.push_back(PythonObject([]))
    mixed_input.push_back(PythonObject(23.2))
    mixed_input.push_back(PythonObject(9))
    mixed_input.push_back(PythonObject(""adasd""))
    var mixed_result = filter_integers(mixed_input)
    assert_equal(len(mixed_result), 2, ""Should return 2 integers"")
    assert_equal(mixed_result[0].to_int(), 4, ""First integer should be 4"")
    assert_equal(mixed_result[1].to_int(), 9, ""Second integer should be 9"")

    # Test case 3: Integers and strings
    var int_str_input = DynamicVector[PythonObject]()
    int_str_input.push_back(PythonObject(3))
    int_str_input.push_back(PythonObject(""c""))
    int_str_input.push_back(PythonObject(3))
    int_str_input.push_back(PythonObject(3))
    int_str_input.push_back(PythonObject(""a""))
    int_str_input.push_back(PythonObject(""b""))
    var int_str_result = filter_integers(int_str_input)
    assert_equal(len(int_str_result), 3, ""Should return 3 integers"")
    for i in range(len(int_str_result)):
        assert_equal(int_str_result[i].to_int(), 3, ""All integers should be 3"")

fn main():
    test_filter_integers()
    print(""All tests passed!"")",filter_integers
HumanEval-Mojo/23,"from collections import DynamicVector

fn find_closest_elements(numbers: DynamicVector[Float64]) -> (Float64, Float64):
    """""" From a supplied DynamicVector of numbers (of length at least two) select and return two that are the closest to
    each other and return them in order (smaller number, larger number).
    Example usage:
    let result1 = find_closest_elements(DynamicVector[Float64]([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))
    print(result1)  # Should output: (2.0, 2.2)
    
    let result2 = find_closest_elements(DynamicVector[Float64]([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))
    print(result2)  # Should output: (2.0, 2.0)
    """"""","from math import abs

fn find_closest_pair(numbers: List[Int]) raises -> Tuple[Int, Int]:
    var closest_pair: Tuple[Int, Int] = (0, 0)
    var distance: Int64 = -1

    for i in range(len(numbers)):
        for j in range(len(numbers)):
            if i != j:
                let elem = numbers[i]
                let elem2 = numbers[j]
                let new_distance = abs(elem - elem2)
                
                if distance == -1 or new_distance < distance:
                    distance = new_distance
                    closest_pair = (min(elem, elem2), max(elem, elem2))

    if distance == -1:
        raise Error(""No valid pair found"")

    return closest_pair","from testing import assert_equal
from math import abs

fn find_closest_elements(arr: DynamicVector[Float64]) -> Tuple[Float64, Float64]:
    # Assuming the implementation of find_closest_elements is defined here
    # or imported from another module

fn test_find_closest_elements():
    print(""Running tests for find_closest_elements"")

    var test1 = DynamicVector[Float64]([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])
    var result1 = find_closest_elements(test1)
    assert_equal(result1, (3.9, 4.0), ""Test case 1 failed"")

    var test2 = DynamicVector[Float64]([1.0, 2.0, 5.9, 4.0, 5.0])
    var result2 = find_closest_elements(test2)
    assert_equal(result2, (5.0, 5.9), ""Test case 2 failed"")

    var test3 = DynamicVector[Float64]([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    var result3 = find_closest_elements(test3)
    assert_equal(result3, (2.0, 2.2), ""Test case 3 failed"")

    var test4 = DynamicVector[Float64]([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    var result4 = find_closest_elements(test4)
    assert_equal(result4, (2.0, 2.0), ""Test case 4 failed"")

    var test5 = DynamicVector[Float64]([1.1, 2.2, 3.1, 4.1, 5.1])
    var result5 = find_closest_elements(test5)
    assert_equal(result5, (2.2, 3.1), ""Test case 5 failed"")

    print(""All tests passed successfully!"")

fn main():
    test_find_closest_elements()",find_closest_elements
HumanEval-Mojo/24,"from tensor import Tensor

fn rescale_to_unit(numbers: Tensor[DType.float64]) -> Tensor[DType.float64]:
    """""" Given a Tensor of numbers (of at least two elements), apply a linear transform to that Tensor,
    such that the smallest number will become 0 and the largest will become 1
    
    Example:
    let input = Tensor[DType.float64]([1.0, 2.0, 3.0, 4.0, 5.0])
    let result = rescale_to_unit(input)
    print(result)  # Should output: [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""","from python import Python

fn normalize_list(numbers: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    
    if not py.isinstance(numbers, py.list):
        raise Error(""Input must be a list"")
    
    if py.len(numbers) == 0:
        raise Error(""Input list cannot be empty"")
    
    let min_number = py.min(numbers)
    let max_number = py.max(numbers)
    
    if min_number == max_number:
        raise Error(""All numbers in the list are the same, cannot normalize"")
    
    let range = max_number - min_number
    
    fn normalize(x: PythonObject) raises -> PythonObject:
        return (x - min_number) / range
    
    return py.list(py.map(normalize, numbers))","from testing import assert_equal
from math import approx_equal

fn test_rescale_to_unit():
    # Test case 1
    var input1 = DynamicVector[Float64]()
    input1.push_back(2.0)
    input1.push_back(49.9)
    var expected1 = DynamicVector[Float64]()
    expected1.push_back(0.0)
    expected1.push_back(1.0)
    assert_equal(rescale_to_unit(input1), expected1)

    # Test case 2
    var input2 = DynamicVector[Float64]()
    input2.push_back(100.0)
    input2.push_back(49.9)
    var expected2 = DynamicVector[Float64]()
    expected2.push_back(1.0)
    expected2.push_back(0.0)
    assert_equal(rescale_to_unit(input2), expected2)

    # Test case 3
    var input3 = DynamicVector[Float64]()
    input3.push_back(1.0)
    input3.push_back(2.0)
    input3.push_back(3.0)
    input3.push_back(4.0)
    input3.push_back(5.0)
    var expected3 = DynamicVector[Float64]()
    expected3.push_back(0.0)
    expected3.push_back(0.25)
    expected3.push_back(0.5)
    expected3.push_back(0.75)
    expected3.push_back(1.0)
    assert_equal(rescale_to_unit(input3), expected3)

    # Test case 4
    var input4 = DynamicVector[Float64]()
    input4.push_back(2.0)
    input4.push_back(1.0)
    input4.push_back(5.0)
    input4.push_back(3.0)
    input4.push_back(4.0)
    var expected4 = DynamicVector[Float64]()
    expected4.push_back(0.25)
    expected4.push_back(0.0)
    expected4.push_back(1.0)
    expected4.push_back(0.5)
    expected4.push_back(0.75)
    assert_equal(rescale_to_unit(input4), expected4)

    # Test case 5
    var input5 = DynamicVector[Float64]()
    input5.push_back(12.0)
    input5.push_back(11.0)
    input5.push_back(15.0)
    input5.push_back(13.0)
    input5.push_back(14.0)
    var expected5 = DynamicVector[Float64]()
    expected5.push_back(0.25)
    expected5.push_back(0.0)
    expected5.push_back(1.0)
    expected5.push_back(0.5)
    expected5.push_back(0.75)
    assert_equal(rescale_to_unit(input5), expected5)

    print(""All tests passed!"")

fn main():
    test_rescale_to_unit()",rescale_to_unit
HumanEval-Mojo/25,"from collections.vector import DynamicVector


fn concatenate(strings: DynamicVector[StringRef]) -> String:
    """""" Concatenate DynamicVector of strings into a single string
    >>> concatenate(DynamicVector[StringRef]())
    ''
    >>> let vec = DynamicVector[StringRef]()
    >>> vec.push_back(""a"")
    >>> vec.push_back(""b"")
    >>> vec.push_back(""c"")
    >>> concatenate(vec)
    'abc'
    """"""","fn join_strings(strings: List[String]) raises -> String:
    var result = String("""")
    for s in strings:
        result += s
    return result","from testing import assert_equal

fn test_concatenate():
    # Test with an empty list
    assert_equal(concatenate([]), """")
    
    # Test with a list of three strings
    assert_equal(concatenate([""x"", ""y"", ""z""]), ""xyz"")
    
    # Test with a list of five strings
    assert_equal(concatenate([""x"", ""y"", ""z"", ""w"", ""k""]), ""xyzwk"")

fn main():
    test_concatenate()
    print(""All tests passed!"")",concatenate
HumanEval-Mojo/26,"fn flip_case(string: String) -> String:
    """"""
    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    
    Example:
    let result = flip_case(""Hello"")
    print(result)  # Output: hELLO
    """"""","fn swapcase(s: String) raises -> String:
    var result = String()
    for c in s:
        if c.isalpha():
            if c.isupper():
                result += c.lower()
            else:
                result += c.upper()
        else:
            result += c
    return result

fn main() raises:
    let test_string = ""Hello, World!""
    let swapped = swapcase(test_string)
    print(swapped)","from testing import assert_equal

fn flip_case(s: String) -> String:
    # Implementation of flip_case function goes here
    # For this example, we'll assume it's implemented correctly
    return s  # Placeholder return, replace with actual implementation

fn test_flip_case():
    print(""Running tests for flip_case function"")
    
    # Test case 1: Empty string
    assert_equal(flip_case(""""), """", ""Empty string should remain unchanged"")
    
    # Test case 2: Simple string with mixed case and punctuation
    assert_equal(flip_case(""Hello!""), ""hELLO!"", ""Should flip case of 'Hello!'"")
    
    # Test case 3: Longer string with spaces
    assert_equal(
        flip_case(""These violent delights have violent ends""),
        ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"",
        ""Should flip case of the entire sentence""
    )
    
    print(""All tests passed successfully!"")

fn main():
    test_flip_case()",flip_case
HumanEval-Mojo/27,"from collections.vector import DynamicVector


fn filter_by_prefix(strings: DynamicVector[String], prefix: String) -> DynamicVector[String]:
    """""" Filter an input DynamicVector of Strings only for ones that start with a given prefix.
    >>> filter_by_prefix(DynamicVector[String](), ""a"")
    DynamicVector[String]()
    >>> filter_by_prefix(DynamicVector[String](""abc"", ""bcd"", ""cde"", ""array""), ""a"")
    DynamicVector[String](""abc"", ""array"")
    """"""","fn filter_strings_by_prefix(strings: List[String], prefix: String) -> List[String]:
    var result = List[String]()
    for s in strings:
        if s.startswith(prefix):
            result.append(s)
    return result","from testing import assert_equal

fn test_filter_by_prefix():
    # Test case 1: Empty list
    let empty_list: List[String] = []
    assert_equal(filter_by_prefix(empty_list, ""john""), empty_list)

    # Test case 2: List with matching and non-matching elements
    let input_list = [""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""]
    let expected_output = [""xxx"", ""xxxAAA"", ""xxx""]
    assert_equal(filter_by_prefix(input_list, ""xxx""), expected_output)

    print(""All tests passed!"")

fn main():
    test_filter_by_prefix()",filter_by_prefix
HumanEval-Mojo/28,"from collections.vector import DynamicVector


fn factorize(n: Int) -> DynamicVector[Int]:
    """""" Return a DynamicVector of prime factors of the given integer in the order from smallest to largest.
    Each of the factors should be listed the number of times corresponding to how many times it appears in factorization.
    Input number should be equal to the product of all factors
    
    Example usage:
    let factors1 = factorize(8)
    # factors1 should contain [2, 2, 2]
    
    let factors2 = factorize(25)
    # factors2 should contain [5, 5]
    
    let factors3 = factorize(70)
    # factors3 should contain [2, 5, 7]
    """"""","from math import sqrt
from memory import memset_zero

fn prime_factors(n: Int) raises -> DynamicVector[Int]:
    var factors = DynamicVector[Int]()
    var num = n
    var i: Int = 2
    
    let limit = Int(sqrt(Float64(n))) + 1
    
    while i <= limit:
        if num % i == 0:
            factors.push_back(i)
            num //= i
        else:
            i += 1
    
    if num > 1:
        factors.push_back(num)
    
    return factors

fn main() raises:
    let n: Int = 100  # Example input
    let result = prime_factors(n)
    
    print(""Prime factors of"", n, ""are:"")
    for factor in result:
        print(factor)","from testing import assert_equal

fn test_factorize():
    # Test case 1
    let result1 = factorize(2)
    assert_equal(result1, [2])

    # Test case 2
    let result2 = factorize(4)
    assert_equal(result2, [2, 2])

    # Test case 3
    let result3 = factorize(8)
    assert_equal(result3, [2, 2, 2])

    # Test case 4
    let result4 = factorize(3 * 19)
    assert_equal(result4, [3, 19])

    # Test case 5
    let result5 = factorize(3 * 19 * 3 * 19)
    assert_equal(result5, [3, 3, 19, 19])

    # Test case 6
    let result6 = factorize(3 * 19 * 3 * 19 * 3 * 19)
    assert_equal(result6, [3, 3, 3, 19, 19, 19])

    # Test case 7
    let result7 = factorize(3 * 19 * 19 * 19)
    assert_equal(result7, [3, 19, 19, 19])

    # Test case 8
    let result8 = factorize(3 * 2 * 3)
    assert_equal(result8, [2, 3, 3])

    print(""All tests passed!"")

fn main():
    test_factorize()",factorize
HumanEval-Mojo/29,"from collections import Dict

fn remove_duplicates(numbers: DynamicVector[Int]) -> DynamicVector[Int]:
    """""" From a DynamicVector of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates(DynamicVector[Int]([1, 2, 3, 2, 4]))
    DynamicVector[Int]([1, 3, 4])
    """"""","from collections import Counter
from list import List

fn remove_duplicates(numbers: List[Int]) -> List[Int]:
    let counter = Counter[Int]()
    for num in numbers:
        counter.add(num)
    
    var result = List[Int]()
    for num in numbers:
        if counter[num] <= 1:
            result.append(num)
    
    return result","from testing import assert_equal
from collections.vector import DynamicVector

fn remove_duplicates(input: DynamicVector[Int]) -> DynamicVector[Int]:
    # Implementation of remove_duplicates function goes here
    # For this example, we'll assume it's implemented correctly

fn test_remove_duplicates():
    # Test case 1: Empty list
    var empty_input = DynamicVector[Int]()
    var empty_result = remove_duplicates(empty_input)
    assert_equal(empty_result.size, 0, ""Empty list should return empty list"")

    # Test case 2: List with no duplicates
    var no_duplicates_input = DynamicVector[Int]()
    no_duplicates_input.push_back(1)
    no_duplicates_input.push_back(2)
    no_duplicates_input.push_back(3)
    no_duplicates_input.push_back(4)
    var no_duplicates_result = remove_duplicates(no_duplicates_input)
    assert_equal(no_duplicates_result.size, 4, ""List with no duplicates should return same size"")
    assert_equal(no_duplicates_result[0], 1, ""First element should be 1"")
    assert_equal(no_duplicates_result[1], 2, ""Second element should be 2"")
    assert_equal(no_duplicates_result[2], 3, ""Third element should be 3"")
    assert_equal(no_duplicates_result[3], 4, ""Fourth element should be 4"")

    # Test case 3: List with duplicates
    var with_duplicates_input = DynamicVector[Int]()
    with_duplicates_input.push_back(1)
    with_duplicates_input.push_back(2)
    with_duplicates_input.push_back(3)
    with_duplicates_input.push_back(2)
    with_duplicates_input.push_back(4)
    with_duplicates_input.push_back(3)
    with_duplicates_input.push_back(5)
    var with_duplicates_result = remove_duplicates(with_duplicates_input)
    assert_equal(with_duplicates_result.size, 3, ""List with duplicates should return size 3"")
    assert_equal(with_duplicates_result[0], 1, ""First element should be 1"")
    assert_equal(with_duplicates_result[1], 4, ""Second element should be 4"")
    assert_equal(with_duplicates_result[2], 5, ""Third element should be 5"")

fn main():
    test_remove_duplicates()
    print(""All tests passed!"")",remove_duplicates
HumanEval-Mojo/30,"fn unique(l: List[Int]) -> List[Int]:
    """"""Return sorted unique elements in a list
    Example:
    let input = [5, 3, 5, 2, 3, 3, 9, 0, 123]
    let result = unique(input)
    print(result)  # Should output: [0, 2, 3, 5, 9, 123]
    """"""","from python import Python

fn remove_duplicates_and_sort(l: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    let set_func = py.get_attr(""set"")
    let list_func = py.get_attr(""list"")
    let sorted_func = py.get_attr(""sorted"")
    
    let unique_set = set_func(l)
    let unique_list = list_func(unique_set)
    let sorted_list = sorted_func(unique_list)
    
    return sorted_list","from testing import assert_equal
from collections.vector import DynamicVector

fn unique(input: DynamicVector[Int]) -> DynamicVector[Int]:
    # Implementation of the unique function goes here
    # For this example, we'll assume it's implemented correctly
    var result = DynamicVector[Int]()
    for item in input:
        if item not in result:
            result.append(item)
    result.sort()
    return result

fn test_unique():
    let input = DynamicVector[Int]([5, 3, 5, 2, 3, 3, 9, 0, 123])
    let expected = DynamicVector[Int]([0, 2, 3, 5, 9, 123])
    let result = unique(input)
    assert_equal(result, expected, ""unique function failed to produce expected output"")

fn main():
    test_unique()
    print(""All tests passed!"")",unique
HumanEval-Mojo/31,"fn get_positive(l: List[Int]) -> List[Int]:
    """"""Return only positive numbers in the list.
    Example usage:
    let result1 = get_positive([-1, 2, -4, 5, 6])
    print(result1)  # Should output: [2, 5, 6]
    
    let result2 = get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    print(result2)  # Should output: [5, 3, 2, 3, 9, 123, 1]
    """"""","fn positive_elements(l: List[Int]) -> List[Int]:
    var result = List[Int]()
    for e in l:
        if e > 0:
            result.append(e)
    return result","from testing import assert_equal

fn test_get_positive():
    # Test case 1
    let input1 = [-1, -2, 4, 5, 6]
    let expected1 = [4, 5, 6]
    assert_equal(get_positive(input1), expected1)

    # Test case 2
    let input2 = [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]
    let expected2 = [5, 3, 2, 3, 3, 9, 123, 1]
    assert_equal(get_positive(input2), expected2)

    # Test case 3
    let input3 = [-1, -2]
    let expected3: DynamicVector[Int] = []  # Empty list
    assert_equal(get_positive(input3), expected3)

    # Test case 4
    let input4: DynamicVector[Int] = []  # Empty list
    let expected4: DynamicVector[Int] = []  # Empty list
    assert_equal(get_positive(input4), expected4)

    print(""All tests passed!"")

fn main():
    test_get_positive()",get_positive
HumanEval-Mojo/32,"fn is_prime(n: Int) -> Bool:
    """"""Return true if a given number is prime, and false otherwise.
    Example usage:
    let result1 = is_prime(6)
    print(result1)  # Should print: False
    
    let result2 = is_prime(101)
    print(result2)  # Should print: True
    
    let result3 = is_prime(11)
    print(result3)  # Should print: True
    
    let result4 = is_prime(13441)
    print(result4)  # Should print: True
    
    let result5 = is_prime(61)
    print(result5)  # Should print: True
    
    let result6 = is_prime(4)
    print(result6)  # Should print: False
    
    let result7 = is_prime(1)
    print(result7)  # Should print: False
    """"""","fn is_prime(n: Int) raises -> Bool:
    if n < 2:
        return False
    
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    
    return True","from testing import assert_equal

fn test_is_prime():
    assert_equal(is_prime(6), False, ""6 should not be prime"")
    assert_equal(is_prime(101), True, ""101 should be prime"")
    assert_equal(is_prime(11), True, ""11 should be prime"")
    assert_equal(is_prime(13441), True, ""13441 should be prime"")
    assert_equal(is_prime(61), True, ""61 should be prime"")
    assert_equal(is_prime(4), False, ""4 should not be prime"")
    assert_equal(is_prime(1), False, ""1 should not be prime"")
    assert_equal(is_prime(5), True, ""5 should be prime"")
    assert_equal(is_prime(11), True, ""11 should be prime"")
    assert_equal(is_prime(17), True, ""17 should be prime"")
    assert_equal(is_prime(5 * 17), False, ""5 * 17 should not be prime"")
    assert_equal(is_prime(11 * 7), False, ""11 * 7 should not be prime"")
    assert_equal(is_prime(13441 * 19), False, ""13441 * 19 should not be prime"")

fn main():
    test_is_prime()
    print(""All tests passed!"")",is_prime
HumanEval-Mojo/33,"fn sort_third(l: DynamicVector[Int]) -> DynamicVector[Int]:
    """"""This function takes a DynamicVector[Int] l and returns a DynamicVector[Int] l' such that
    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal
    to the values of the corresponding indices of l, but sorted.
    
    Example usage:
    let v1 = DynamicVector[Int]().push_back(1).push_back(2).push_back(3)
    let result1 = sort_third(v1)
    # result1 should be [1, 2, 3]
    
    let v2 = DynamicVector[Int]().push_back(5).push_back(6).push_back(3).push_back(4).push_back(8).push_back(9).push_back(2)
    let result2 = sort_third(v2)
    # result2 should be [2, 6, 3, 4, 8, 9, 5]
    """"""","from python import Python

fn sort_every_third(l: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    
    var list_l = py.list(l)
    let sorted_slice = py.sorted(list_l[::3])
    
    var i: Int = 0
    for item in sorted_slice:
        list_l[i::3] = item
        i += 1
    
    return list_l","from testing import assert_equal
from collections import DynamicVector

fn sort_third(inout v: DynamicVector[Int]) -> DynamicVector[Int]:
    # Assuming the implementation of sort_third is defined here
    # For this example, we'll use a placeholder implementation
    return v

fn test_sort_third():
    # Test case 1
    var input1 = DynamicVector[Int]([1, 2, 3])
    var expected1 = DynamicVector[Int]([1, 2, 3])
    assert_equal(sort_third(input1), expected1)

    # Test case 2
    var input2 = DynamicVector[Int]([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    var expected2 = DynamicVector[Int]([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    assert_equal(sort_third(input2), expected2)

    # Test case 3
    var input3 = DynamicVector[Int]([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
    var expected3 = DynamicVector[Int]([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
    assert_equal(sort_third(input3), expected3)

    # Test case 4
    var input4 = DynamicVector[Int]([5, 6, 3, 4, 8, 9, 2])
    var expected4 = DynamicVector[Int]([2, 6, 3, 4, 8, 9, 5])
    assert_equal(sort_third(input4), expected4)

    # Test case 5
    var input5 = DynamicVector[Int]([5, 8, 3, 4, 6, 9, 2])
    var expected5 = DynamicVector[Int]([2, 8, 3, 4, 6, 9, 5])
    assert_equal(sort_third(input5), expected5)

    # Test case 6
    var input6 = DynamicVector[Int]([5, 6, 9, 4, 8, 3, 2])
    var expected6 = DynamicVector[Int]([2, 6, 9, 4, 8, 3, 5])
    assert_equal(sort_third(input6), expected6)

    # Test case 7
    var input7 = DynamicVector[Int]([5, 6, 3, 4, 8, 9, 2, 1])
    var expected7 = DynamicVector[Int]([2, 6, 3, 4, 8, 9, 5, 1])
    assert_equal(sort_third(input7), expected7)

    print(""All tests passed!"")

fn main():
    test_sort_third()",sort_third
HumanEval-Mojo/34,"from math import pow

fn poly(xs: DynamicVector[Float64], x: Float64) -> Float64:
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    # Implementation details to be filled

fn find_zero(xs: DynamicVector[Float64]) -> Float64:
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only one zero point, even if there are many.
    Moreover, find_zero only takes DynamicVector xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    Example usage:
    let result1 = find_zero([1.0, 2.0]) # f(x) = 1 + 2x
    print(round(result1, 2)) # Should print approximately -0.5
    
    let result2 = find_zero([-6.0, 11.0, -6.0, 1.0]) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    print(round(result2, 2)) # Should print approximately 1.0
    """"""
    # Implementation details to be filled","fn find_root(xs: DynamicVector[Float64]) raises -> Float64:
    var begin: Float64 = -1.0
    var end: Float64 = 1.0
    
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    
    while end - begin > 1e-10:
        let center: Float64 = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    
    return begin

fn poly(xs: DynamicVector[Float64], x: Float64) raises -> Float64:
    var result: Float64 = 0.0
    for i in range(xs.size()):
        result += xs[i] * x ** Float64(i)
    return result","from testing import assert_true, assert_almost_equal
from math import abs
from random import random_si64, seed
from memory import memcpy

fn poly(coeffs: DynamicVector[Float64], x: Float64) -> Float64:
    var result: Float64 = 0.0
    for i in range(len(coeffs)):
        result += coeffs[i] * x ** i
    return result

fn generate_coeffs(ncoeff: Int) -> DynamicVector[Float64]:
    var coeffs = DynamicVector[Float64](ncoeff)
    for _ in range(ncoeff):
        var coeff = Float64(random_si64(-10, 11))
        if coeff == 0:
            coeff = 1
        coeffs.append(coeff)
    return coeffs

fn test_find_zero():
    seed(42)
    
    for _ in range(100):
        let ncoeff = 2 * (random_si64(1, 5))
        let coeffs = generate_coeffs(ncoeff)
        
        # Create a copy of coeffs
        var coeffs_copy = DynamicVector[Float64](len(coeffs))
        memcpy(coeffs_copy.data, coeffs.data, len(coeffs) * sizeof[Float64]())
        
        let solution = find_zero(coeffs_copy)
        
        assert_true(abs(poly(coeffs, solution)) < 1e-4, ""Solution not accurate enough"")

fn main():
    test_find_zero()
    print(""All tests passed!"")",find_zero
HumanEval-Mojo/35,"fn fizz_buzz(n: Int) -> Int:
    """"""
    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    
    Examples:
    fizz_buzz(50) -> 0
    fizz_buzz(78) -> 2
    fizz_buzz(79) -> 3
    """"""","fn count_sevens(n: Int) -> Int:
    var ns = DynamicVector[Int]()
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    
    var s = String()
    for num in ns:
        s += String(num)
    
    var ans: Int = 0
    for i in range(len(s)):
        if s[i] == '7':
            ans += 1
    
    return ans","from testing import assert_equal

fn test_fizz_buzz():
    assert_equal(fizz_buzz(50), 0, ""Test case 1 failed"")
    assert_equal(fizz_buzz(78), 2, ""Test case 2 failed"")
    assert_equal(fizz_buzz(79), 3, ""Test case 3 failed"")
    assert_equal(fizz_buzz(100), 3, ""Test case 4 failed"")
    assert_equal(fizz_buzz(200), 6, ""Test case 5 failed"")
    assert_equal(fizz_buzz(4000), 192, ""Test case 6 failed"")
    assert_equal(fizz_buzz(10000), 639, ""Test case 7 failed"")
    assert_equal(fizz_buzz(100000), 8026, ""Test case 8 failed"")

fn main():
    test_fizz_buzz()
    print(""All tests passed!"")",fizz_buzz
HumanEval-Mojo/36,"fn encode_cyclic(s: String) -> String:
    """"""
    Returns encoded string by cycling groups of three characters.
    """"""
    # Split string into groups. Each of length 3.
    let groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # Cycle elements in each group. Unless group has fewer elements than 3.
    let cycled_groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(cycled_groups)


fn decode_cyclic(s: String) -> String:
    """"""
    Takes as input a string encoded with the encode_cyclic function. Returns the decoded string.
    """"""","fn encode_twice(s: String) -> String:
    return encode_cyclic(encode_cyclic(s))

fn encode_cyclic(inout s: String) raises -> String:
    if s.count() == 0:
        return s
    
    var result = String("""")
    for i in range(s.count()):
        let char = s[i]
        if char.isalpha():
            let base = 'A' if char.isupper() else 'a'
            let offset = (ord(char) - ord(base) + 1) % 26
            result += chr(ord(base) + offset)
        else:
            result += char
    
    return result","from testing import assert_equal
from random import randint, choice
from string import ascii_lowercase

fn test_decode_cyclic():
    let letters = ascii_lowercase()
    
    for _ in range(100):
        var str = """"
        let length = randint(10, 20)
        for _ in range(length):
            str += choice(letters)
        
        let encoded_str = encode_cyclic(str)
        let decoded_str = decode_cyclic(encoded_str)
        
        assert_equal(decoded_str, str, ""Decoded string should match original string"")

fn main():
    test_decode_cyclic()
    print(""All tests passed!"")",decode_cyclic
HumanEval-Mojo/37,"fn prime_fib(n: Int) -> Int:
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    
    Example usage:
    let result1 = prime_fib(1)  # Returns 2
    let result2 = prime_fib(2)  # Returns 3
    let result3 = prime_fib(3)  # Returns 5
    let result4 = prime_fib(4)  # Returns 13
    let result5 = prime_fib(5)  # Returns 89
    """"""","from math import sqrt

fn is_prime(p: Int) -> Bool:
    if p < 2:
        return False
    let limit = min(Int(sqrt(Float64(p))) + 1, p - 1)
    for k in range(2, limit):
        if p % k == 0:
            return False
    return True

fn find_nth_prime_fibonacci(n: Int) raises -> Int:
    if n <= 0:
        raise Error(""n must be a positive integer"")
    
    var f = DynamicVector[Int]()
    f.append(0)
    f.append(1)
    var count = n
    
    while True:
        let next_fib = f[f.size() - 1] + f[f.size() - 2]
        f.append(next_fib)
        
        if is_prime(next_fib):
            count -= 1
        
        if count == 0:
            return next_fib

fn main() raises:
    let result = find_nth_prime_fibonacci(3)
    print(result)","from testing import assert_equal

fn test_prime_fib():
    assert_equal(prime_fib(1), 2, ""Test case 1 failed"")
    assert_equal(prime_fib(2), 3, ""Test case 2 failed"")
    assert_equal(prime_fib(3), 5, ""Test case 3 failed"")
    assert_equal(prime_fib(4), 13, ""Test case 4 failed"")
    assert_equal(prime_fib(5), 89, ""Test case 5 failed"")
    assert_equal(prime_fib(6), 233, ""Test case 6 failed"")
    assert_equal(prime_fib(7), 1597, ""Test case 7 failed"")
    assert_equal(prime_fib(8), 28657, ""Test case 8 failed"")
    assert_equal(prime_fib(9), 514229, ""Test case 9 failed"")
    assert_equal(prime_fib(10), 433494437, ""Test case 10 failed"")

fn main():
    test_prime_fib()
    print(""All tests passed!"")",prime_fib
HumanEval-Mojo/38,"fn max_element(l: DynamicVector[Int]) -> Int:
    """"""Return maximum element in the vector.
    Example usage:
    let v1 = DynamicVector[Int]()
    v1.push_back(1)
    v1.push_back(2)
    v1.push_back(3)
    print(max_element(v1))  # Output: 3

    let v2 = DynamicVector[Int]()
    v2.extend([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    print(max_element(v2))  # Output: 123
    """"""","fn find_max(l: DynamicVector[Int]) raises -> Int:
    if l.size() == 0:
        raise Error(""Empty vector"")
    
    var m: Int = l[0]
    for i in range(l.size()):
        let e: Int = l[i]
        if e > m:
            m = e
    return m","from testing import assert_equal

fn test_max_element():
    # Test case 1
    let test_list1 = DynamicVector[Int]()
    test_list1.push_back(1)
    test_list1.push_back(2)
    test_list1.push_back(3)
    assert_equal(max_element(test_list1), 3)

    # Test case 2
    let test_list2 = DynamicVector[Int]()
    test_list2.push_back(5)
    test_list2.push_back(3)
    test_list2.push_back(-5)
    test_list2.push_back(2)
    test_list2.push_back(-3)
    test_list2.push_back(3)
    test_list2.push_back(9)
    test_list2.push_back(0)
    test_list2.push_back(124)
    test_list2.push_back(1)
    test_list2.push_back(-10)
    assert_equal(max_element(test_list2), 124)

fn main():
    test_max_element()
    print(""All tests passed!"")",max_element
HumanEval-Mojo/39,"fn sort_even(l: PythonObject) raises -> PythonObject:
    """"""This function takes a PythonObject l (representing a list) and returns a PythonObject l' such that
    l' is identical to l in the odd indices, while its values at the even indices are equal
    to the values of the even indices of l, but sorted.
    
    Example usage:
    let result1 = sort_even(PythonObject([1, 2, 3]))
    print(result1)  # Should output: [1, 2, 3]
    
    let result2 = sort_even(PythonObject([5, 6, 3, 4]))
    print(result2)  # Should output: [3, 6, 5, 4]
    """"""","from python import Python

fn sort_even_odd(l: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    
    let evens = l[::2]
    let odds = l[1::2]
    
    evens.sort()
    
    var ans = py.list()
    
    let zip_obj = py.zip(evens, odds)
    for pair in zip_obj:
        let e = pair[0]
        let o = pair[1]
        ans.extend([e, o])
    
    if evens.__len__() > odds.__len__():
        ans.append(evens[-1])
    
    return ans

fn main() raises:
    let py = Python.import_module(""builtins"")
    let input_list = py.list([5, 3, 1, 2, 4, 6])
    
    let result = sort_even_odd(input_list)
    print(result)","from testing import assert_equal
from collections import DynamicVector

fn test_sort_even():
    # Test case 1
    var input1 = DynamicVector[Int]()
    input1.push_back(1)
    input1.push_back(2)
    input1.push_back(3)
    
    var expected1 = DynamicVector[Int]()
    expected1.push_back(1)
    expected1.push_back(2)
    expected1.push_back(3)
    
    assert_equal(sort_even(input1), expected1)

    # Test case 2
    var input2 = DynamicVector[Int]()
    input2.extend([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    
    var expected2 = DynamicVector[Int]()
    expected2.extend([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
    
    assert_equal(sort_even(input2), expected2)

    # Test case 3
    var input3 = DynamicVector[Int]()
    input3.extend([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
    
    var expected3 = DynamicVector[Int]()
    expected3.extend([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])
    
    assert_equal(sort_even(input3), expected3)

    print(""All tests passed!"")

fn main():
    test_sort_even()",sort_even
HumanEval-Mojo/40,"fn car_race_collision(n: Int) -> Int:
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move at the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function returns the number of such collisions.
    """"""","fn square(n: Int) -> Int:
    return n * n","from testing import assert_equal

fn test_car_race_collision():
    assert_equal(car_race_collision(2), 4, ""Test case 1 failed"")
    assert_equal(car_race_collision(3), 9, ""Test case 2 failed"")
    assert_equal(car_race_collision(4), 16, ""Test case 3 failed"")
    assert_equal(car_race_collision(8), 64, ""Test case 4 failed"")
    assert_equal(car_race_collision(10), 100, ""Test case 5 failed"")
    print(""All test cases passed!"")

fn main():
    test_car_race_collision()",car_race_collision
HumanEval-Mojo/41,"fn change_base(x: Int, base: Int) -> String:
    """"""Change numerical base of input number x to base.
    Return string representation after the conversion.
    Base numbers are less than 10.
    
    Examples:
    change_base(8, 3) -> ""22""
    change_base(8, 2) -> ""1000""
    change_base(7, 2) -> ""111""
    """"""","fn convert_to_base(x: Int, base: Int) raises -> String:
    var ret = String("""")
    var num = x
    
    while num > 0:
        let digit = num % base
        ret = String(digit) + ret
        num //= base
    
    if ret.count() == 0:
        return String(""0"")
    
    return ret","from testing import assert_equal
from sys import argv

fn test_change_base():
    print(""Running tests for change_base function..."")
    
    assert_equal(change_base(8, 3), ""22"")
    assert_equal(change_base(9, 3), ""100"")
    assert_equal(change_base(234, 2), ""11101010"")
    assert_equal(change_base(16, 2), ""10000"")
    assert_equal(change_base(8, 2), ""1000"")
    assert_equal(change_base(7, 2), ""111"")
    
    for x in range(2, 8):
        assert_equal(change_base(x, x + 1), String(x))
    
    print(""All tests passed!"")

fn main() raises:
    test_change_base()",change_base
HumanEval-Mojo/42,"fn incr_list(l: PythonObject) -> PythonObject:
    """"""Return list with elements incremented by 1.
    
    Example usage:
    let result1 = incr_list(PythonObject([1, 2, 3]))
    print(result1)  # Should output: [2, 3, 4]
    
    let result2 = incr_list(PythonObject([5, 3, 5, 2, 3, 3, 9, 0, 123]))
    print(result2)  # Should output: [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""","fn increment_list(l: List[Int]) -> List[Int]:
    var result = List[Int]()
    for i in range(len(l)):
        result.append(l[i] + 1)
    return result","from testing import assert_equal

fn test_incr_list():
    # Test case 1: Empty list
    let empty_input = DynamicVector[Int]()
    let empty_expected = DynamicVector[Int]()
    assert_equal(incr_list(empty_input), empty_expected)

    # Test case 2: List with three elements
    let input2 = DynamicVector[Int]([3, 2, 1])
    let expected2 = DynamicVector[Int]([4, 3, 2])
    assert_equal(incr_list(input2), expected2)

    # Test case 3: Longer list with various numbers
    let input3 = DynamicVector[Int]([5, 2, 5, 2, 3, 3, 9, 0, 123])
    let expected3 = DynamicVector[Int]([6, 3, 6, 3, 4, 4, 10, 1, 124])
    assert_equal(incr_list(input3), expected3)

    print(""All tests passed!"")

fn main():
    test_incr_list()",incr_list
HumanEval-Mojo/43,"fn triples_sum_to_zero(l: DynamicVector[Int]) -> Bool:
    """"""
    triples_sum_to_zero takes a DynamicVector of integers as an input.
    It returns True if there are three distinct elements in the vector that
    sum to zero, and False otherwise.

    Examples:
    let v1 = DynamicVector[Int]([1, 3, 5, 0])
    print(triples_sum_to_zero(v1))  # Should print: False

    let v2 = DynamicVector[Int]([1, 3, -2, 1])
    print(triples_sum_to_zero(v2))  # Should print: True

    let v3 = DynamicVector[Int]([1, 2, 3, 7])
    print(triples_sum_to_zero(v3))  # Should print: False

    let v4 = DynamicVector[Int]([2, 4, -5, 3, 9, 7])
    print(triples_sum_to_zero(v4))  # Should print: True

    let v5 = DynamicVector[Int]([1])
    print(triples_sum_to_zero(v5))  # Should print: False
    """"""","fn find_zero_sum(l: DynamicVector[Int]) raises -> Bool:
    let length = len(l)
    for i in range(length):
        for j in range(i + 1, length):
            for k in range(j + 1, length):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False","from testing import assert_equal

fn test_triples_sum_to_zero():
    assert_equal(triples_sum_to_zero([1, 3, 5, 0]), False)
    assert_equal(triples_sum_to_zero([1, 3, 5, -1]), False)
    assert_equal(triples_sum_to_zero([1, 3, -2, 1]), True)
    assert_equal(triples_sum_to_zero([1, 2, 3, 7]), False)
    assert_equal(triples_sum_to_zero([1, 2, 5, 7]), False)
    assert_equal(triples_sum_to_zero([2, 4, -5, 3, 9, 7]), True)
    assert_equal(triples_sum_to_zero([1]), False)
    assert_equal(triples_sum_to_zero([1, 3, 5, -100]), False)
    assert_equal(triples_sum_to_zero([100, 3, 5, -100]), False)

fn main():
    test_triples_sum_to_zero()
    print(""All tests passed!"")",triples_sum_to_zero
HumanEval-Mojo/44,"fn pairs_sum_to_zero(l: DynamicVector[Int]) -> Bool:
    """"""
    pairs_sum_to_zero takes a DynamicVector of integers as an input.
    It returns True if there are two distinct elements in the vector that
    sum to zero, and False otherwise.
    
    Examples:
    let v1 = DynamicVector[Int]().push_back(1).push_back(3).push_back(5).push_back(0)
    print(pairs_sum_to_zero(v1))  # False
    
    let v2 = DynamicVector[Int]().push_back(1).push_back(3).push_back(-2).push_back(1)
    print(pairs_sum_to_zero(v2))  # False
    
    let v3 = DynamicVector[Int]().push_back(1).push_back(2).push_back(3).push_back(7)
    print(pairs_sum_to_zero(v3))  # False
    
    let v4 = DynamicVector[Int]().push_back(2).push_back(4).push_back(-5).push_back(3).push_back(5).push_back(7)
    print(pairs_sum_to_zero(v4))  # True
    
    let v5 = DynamicVector[Int]().push_back(1)
    print(pairs_sum_to_zero(v5))  # False
    """"""","fn find_zero_sum_pair(l: List[Int]) raises -> Bool:
    let length = len(l)
    for i in range(length):
        let l1 = l[i]
        for j in range(i + 1, length):
            if l1 + l[j] == 0:
                return True
    return False","from testing import assert_equal, assert_true, assert_false
from collections import DynamicVector

fn pairs_sum_to_zero(numbers: DynamicVector[Int]) -> Bool:
    # Assuming the implementation of pairs_sum_to_zero is defined here
    # or imported from another module
    ...

fn test_pairs_sum_to_zero():
    print(""Running tests for pairs_sum_to_zero..."")

    assert_false(pairs_sum_to_zero(DynamicVector[Int]([1, 3, 5, 0])))
    assert_false(pairs_sum_to_zero(DynamicVector[Int]([1, 3, -2, 1])))
    assert_false(pairs_sum_to_zero(DynamicVector[Int]([1, 2, 3, 7])))
    assert_true(pairs_sum_to_zero(DynamicVector[Int]([2, 4, -5, 3, 5, 7])))
    assert_false(pairs_sum_to_zero(DynamicVector[Int]([1])))

    assert_true(pairs_sum_to_zero(DynamicVector[Int]([-3, 9, -1, 3, 2, 30])))
    assert_true(pairs_sum_to_zero(DynamicVector[Int]([-3, 9, -1, 3, 2, 31])))
    assert_false(pairs_sum_to_zero(DynamicVector[Int]([-3, 9, -1, 4, 2, 30])))
    assert_false(pairs_sum_to_zero(DynamicVector[Int]([-3, 9, -1, 4, 2, 31])))

    print(""All tests passed!"")

fn main():
    test_pairs_sum_to_zero()",pairs_sum_to_zero
HumanEval-Mojo/45,"fn triangle_area(a: Float64, h: Float64) -> Float64:
    """"""
    Given length of a side and height, return area for a triangle.
    
    Example:
    let result = triangle_area(5, 3)
    print(result)  # Should output: 7.5
    """"""","fn calculate_triangle_area(a: Float64, h: Float64) -> Float64:
    return a * h / 2.0","from testing import assert_equal

fn test_triangle_area():
    assert_equal(triangle_area(5, 3), 7.5, ""Triangle area for base 5 and height 3 should be 7.5"")
    assert_equal(triangle_area(2, 2), 2.0, ""Triangle area for base 2 and height 2 should be 2.0"")
    assert_equal(triangle_area(10, 8), 40.0, ""Triangle area for base 10 and height 8 should be 40.0"")

fn main():
    test_triangle_area()
    print(""All tests passed!"")",triangle_area
HumanEval-Mojo/46,"fn is_palindrome(text: String) -> Bool:
    """"""
    Checks if given string is a palindrome
    
    Examples:
    is_palindrome("""") # Returns True
    is_palindrome(""aba"") # Returns True
    is_palindrome(""aaaaa"") # Returns True
    is_palindrome(""zbcd"") # Returns False
    """"""","fn is_palindrome(text: String) -> Bool:
    let length = len(text)
    for i in range(length):
        if text[i] != text[length - 1 - i]:
            return False
    return True","from testing import assert_true, assert_false

fn is_palindrome(s: String) -> Bool:
    # Implement the is_palindrome function here
    # This is just a placeholder implementation
    return True

fn test_is_palindrome():
    print(""Testing is_palindrome function"")
    
    assert_true(is_palindrome(""""), ""Empty string should be a palindrome"")
    assert_true(is_palindrome(""aba""), ""'aba' should be a palindrome"")
    assert_true(is_palindrome(""aaaaa""), ""'aaaaa' should be a palindrome"")
    assert_false(is_palindrome(""zbcd""), ""'zbcd' should not be a palindrome"")
    assert_true(is_palindrome(""xywyx""), ""'xywyx' should be a palindrome"")
    assert_false(is_palindrome(""xywyz""), ""'xywyz' should not be a palindrome"")
    assert_false(is_palindrome(""xywzx""), ""'xywzx' should not be a palindrome"")
    
    print(""All tests passed!"")

fn main():
    test_is_palindrome()",is_palindrome
HumanEval-Mojo/47,"fn modp(n: Int, p: Int) -> Int:
    """"""
    Return 2^n modulo p (be aware of numerics).
    
    Examples:
    modp(3, 5) -> 3
    modp(1101, 101) -> 2
    modp(0, 101) -> 1
    modp(3, 11) -> 8
    modp(100, 101) -> 1
    """"""","fn calculate_result(n: Int, p: Int) raises -> Int:
    var ret: Int = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret","from testing import assert_equal

fn test_modp():
    assert_equal(modp(3, 5), 3, ""Test case 1 failed"")
    assert_equal(modp(1101, 101), 2, ""Test case 2 failed"")
    assert_equal(modp(0, 101), 1, ""Test case 3 failed"")
    assert_equal(modp(3, 11), 8, ""Test case 4 failed"")
    assert_equal(modp(100, 101), 1, ""Test case 5 failed"")
    assert_equal(modp(30, 5), 4, ""Test case 6 failed"")
    assert_equal(modp(31, 5), 3, ""Test case 7 failed"")
    print(""All test cases passed!"")

fn main():
    test_modp()",modp
HumanEval-Mojo/48,"fn median(l: List[Float64]) -> Float64:
    """"""Return median of elements in the list l.
    Example usage:
    let result1 = median([3.0, 1.0, 2.0, 4.0, 5.0])
    print(result1)  # Should output: 3.0
    
    let result2 = median([-10.0, 4.0, 6.0, 1000.0, 10.0, 20.0])
    print(result2)  # Should output: 15.0
    """"""","fn median(l: DynamicVector[Float64]) raises -> Float64:
    var sorted_l = l.sorted()
    let length = len(sorted_l)
    
    if length == 0:
        raise Error(""Cannot compute median of an empty list"")
    
    if length % 2 == 1:
        return sorted_l[length // 2]
    else:
        let lower = sorted_l[length // 2 - 1]
        let upper = sorted_l[length // 2]
        return (lower + upper) / 2.0","from testing import assert_equal

fn test_median():
    # Test case 1
    let result1 = median([3, 1, 2, 4, 5])
    assert_equal(result1, 3)

    # Test case 2
    let result2 = median([-10, 4, 6, 1000, 10, 20])
    assert_equal(result2, 8.0)

    # Test case 3
    let result3 = median([5])
    assert_equal(result3, 5)

    # Test case 4
    let result4 = median([6, 5])
    assert_equal(result4, 5.5)

    # Test case 5
    let result5 = median([8, 1, 3, 9, 9, 2, 7])
    assert_equal(result5, 7)

    print(""All tests passed!"")

fn main():
    test_median()",median
HumanEval-Mojo/49,"fn fib4(n: Int) -> Int:
    """"""The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please implement a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.
    
    Example usage:
    let result1 = fib4(5)
    print(result1)  # Should output: 4
    
    let result2 = fib4(6)
    print(result2)  # Should output: 8
    
    let result3 = fib4(7)
    print(result3)  # Should output: 14
    """"""","from memory import memset_zero
from sys.intrinsics import unlikely

fn tribonacci(n: Int) raises -> Int:
    if unlikely(n < 0):
        raise Error(""n must be non-negative"")
    
    var results = DynamicVector[Int](4)
    memset_zero(results.data, 4 * sizeof(Int))
    results[2] = 2
    
    if n < 4:
        return results[n]
    
    for _ in range(4, n + 1):
        let new_value = results[0] + results[1] + results[2] + results[3]
        results.pop_front()
        results.push_back(new_value)
    
    return results[3]","from testing import assert_equal

fn test_fib4():
    fn fib4(n: Int) -> Int:
        # Assuming the fib4 function is defined here or imported
        # This is just a placeholder implementation
        if n <= 1:
            return 0
        elif n == 2:
            return 1
        else:
            return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)

    print(""Running tests for fib4 function"")
    
    assert_equal(fib4(5), 4, ""Test case 1 failed"")
    assert_equal(fib4(8), 28, ""Test case 2 failed"")
    assert_equal(fib4(10), 104, ""Test case 3 failed"")
    assert_equal(fib4(12), 386, ""Test case 4 failed"")
    
    print(""All tests passed successfully"")

fn main():
    test_fib4()",fib4
HumanEval-Mojo/50,"fn add(x: Int, y: Int) -> Int:
    """"""Add two numbers x and y
    Example usage:
    let result1 = add(2, 3)
    print(result1)  # Output: 5
    
    let result2 = add(5, 7)
    print(result2)  # Output: 12
    """"""","fn add(x: Int, y: Int) -> Int:
    return x + y","from testing import assert_equal
from random import random_si64

fn add(x: Int, y: Int) -> Int:
    return x + y

fn test_add():
    assert_equal(add(0, 1), 1, ""Test case 1 failed"")
    assert_equal(add(1, 0), 1, ""Test case 2 failed"")
    assert_equal(add(2, 3), 5, ""Test case 3 failed"")
    assert_equal(add(5, 7), 12, ""Test case 4 failed"")
    assert_equal(add(7, 5), 12, ""Test case 5 failed"")

    for i in range(100):
        let x = random_si64(0, 1000).to_int()
        let y = random_si64(0, 1000).to_int()
        assert_equal(add(x, y), x + y, ""Random test case "" + String(i) + "" failed"")

    print(""All test cases passed!"")

fn main():
    test_add()",add
HumanEval-Mojo/51,"fn remove_vowels(text: String) -> String:
    """"""
    remove_vowels is a function that takes a String and returns a String without vowels.
    
    Examples:
    remove_vowels("""")         # Returns: """"
    remove_vowels(""abcdef\nghijklm"")  # Returns: ""bcdf\nghjklm""
    remove_vowels(""abcdef"")   # Returns: ""bcdf""
    remove_vowels(""aaaaa"")    # Returns: """"
    remove_vowels(""aaBAA"")    # Returns: ""B""
    remove_vowels(""zbcd"")     # Returns: ""zbcd""
    """"""","fn remove_vowels(text: String) -> String:
    let vowels = StringSet(""aeiouAEIOU"")
    var result = String()
    for c in text:
        if not vowels.contains(c):
            result += c
    return result","from testing import assert_equal

fn test_remove_vowels():
    # Test empty string
    assert_equal(remove_vowels(""""), """")
    
    # Test string with newline
    assert_equal(remove_vowels(""abcdef\nghijklm""), ""bcdf\nghjklm"")
    
    # Test reverse order string
    assert_equal(remove_vowels(""fedcba""), ""fdcb"")
    
    # Test string with only vowels
    assert_equal(remove_vowels(""eeeee""), """")
    
    # Test mixed case string
    assert_equal(remove_vowels(""acBAA""), ""cB"")
    
    # Test mixed case string with uppercase vowels
    assert_equal(remove_vowels(""EcBOO""), ""cB"")
    
    # Test string with no vowels
    assert_equal(remove_vowels(""ybcd""), ""ybcd"")

    print(""All tests passed!"")

fn main():
    test_remove_vowels()",remove_vowels
HumanEval-Mojo/52,"fn same_chars(s0: String, s1: String) -> Bool:
    """"""
    Check if two words have the same characters.
    Example usage:
    let result1 = same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
    print(result1)  # Should print: True

    let result2 = same_chars(""abcd"", ""dddddddabc"")
    print(result2)  # Should print: True

    let result3 = same_chars(""dddddddabc"", ""abcd"")
    print(result3)  # Should print: True

    let result4 = same_chars(""eabcd"", ""dddddddabc"")
    print(result4)  # Should print: False

    let result5 = same_chars(""abcd"", ""dddddddabce"")
    print(result5)  # Should print: False

    let result6 = same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
    print(result6)  # Should print: False
    """"""","fn are_anagrams(s0: String, s1: String) -> Bool:
    let set0 = StringSet(s0)
    let set1 = StringSet(s1)
    return set0 == set1","from testing import assert_true, assert_false

fn test_same_chars():
    assert_true(same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc""))
    assert_true(same_chars(""abcd"", ""dddddddabc""))
    assert_true(same_chars(""dddddddabc"", ""abcd""))
    assert_false(same_chars(""eabcd"", ""dddddddabc""))
    assert_false(same_chars(""abcd"", ""dddddddabcf""))
    assert_false(same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc""))
    assert_false(same_chars(""aabb"", ""aaccc""))

fn main():
    test_same_chars()
    print(""All tests passed!"")",same_chars
HumanEval-Mojo/53,"fn below_threshold(l: DynamicVector[Int], t: Int) -> Bool:
    """"""Return True if all numbers in the vector l are below threshold t.
    
    Examples:
    let v1 = DynamicVector[Int]().push_back(1).push_back(2).push_back(4).push_back(10)
    print(below_threshold(v1, 100))  # Should print: True
    
    let v2 = DynamicVector[Int]().push_back(1).push_back(20).push_back(4).push_back(10)
    print(below_threshold(v2, 5))  # Should print: False
    """"""","fn check_elements(l: DynamicVector[Int], t: Int) -> Bool:
    for i in range(len(l)):
        if l[i] >= t:
            return False
    return True","from testing import assert_true, assert_false

fn test_below_threshold():
    # Test case 1
    assert_true(below_threshold([1, 2, 4, 10], 100))
    
    # Test case 2
    assert_false(below_threshold([1, 20, 4, 10], 5))
    
    # Test case 3
    assert_true(below_threshold([1, 20, 4, 10], 21))
    
    # Test case 4
    assert_true(below_threshold([1, 20, 4, 10], 22))
    
    # Test case 5
    assert_true(below_threshold([1, 8, 4, 10], 11))
    
    # Test case 6
    assert_false(below_threshold([1, 8, 4, 10], 10))

    print(""All tests passed!"")

fn main():
    test_below_threshold()",below_threshold
HumanEval-Mojo/54,"fn encode_shift(s: String) -> String:
    """"""
    Returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    # Implementation details would go here

fn decode_shift(s: String) -> String:
    """"""
    Takes as input a string encoded with the encode_shift function. Returns the decoded string.
    """"""
    # Implementation to be completed","fn decrypt_string(s: String) -> String:
    var result = String()
    for i in range(len(s)):
        let ch = s[i]
        let ascii_value = ord(ch)
        if ascii_value >= ord('a') and ascii_value <= ord('z'):
            let shifted = (ascii_value - 5 - ord('a')) % 26
            let new_char = chr(shifted + ord('a'))
            result += new_char
        else:
            result += ch
    return result","from testing import assert_equal
from random import randint, choice
from string import ascii_lowercase
from memory import memcpy

fn generate_random_string(length: Int) -> String:
    var result = String(capacity=length)
    for _ in range(length):
        result += choice(ascii_lowercase)
    return result

fn encode_shift(s: String) -> String:
    var result = String(capacity=len(s))
    for c in s:
        var shifted = ord(c) + 1
        if shifted > ord('z'):
            shifted = ord('a')
        result += chr(shifted)
    return result

fn test_decode_shift():
    for _ in range(100):
        let str_length = randint(10, 20)
        let original_str = generate_random_string(str_length)
        let encoded_str = encode_shift(original_str)
        
        # Create a copy of encoded_str
        var encoded_str_copy = String(capacity=len(encoded_str))
        memcpy(encoded_str_copy.data, encoded_str.data, len(encoded_str))
        
        let decoded_str = decode_shift(encoded_str_copy)
        assert_equal(decoded_str, original_str, ""Decoded string should match the original string"")

fn main():
    test_decode_shift()
    print(""All tests passed!"")",decode_shift
HumanEval-Mojo/55,"fn largest_prime_factor(n: Int) -> Int:
    """"""
    Return the largest prime factor of n. Assume n > 1 and is not a prime.
    
    Examples:
    let result1 = largest_prime_factor(13195)
    print(result1)  # Should output: 29
    
    let result2 = largest_prime_factor(2048)
    print(result2)  # Should output: 2
    """"""","fn is_prime(k: Int) -> Bool:
    if k < 2:
        return False
    for i in range(2, k - 1):
        if k % i == 0:
            return False
    return True

fn largest_prime_factor(n: Int) -> Int:
    var largest: Int = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest","from testing import assert_equal

fn test_largest_prime_factor():
    assert_equal(largest_prime_factor(15), 5, ""Test case 1 failed"")
    assert_equal(largest_prime_factor(27), 3, ""Test case 2 failed"")
    assert_equal(largest_prime_factor(63), 7, ""Test case 3 failed"")
    assert_equal(largest_prime_factor(330), 11, ""Test case 4 failed"")
    assert_equal(largest_prime_factor(13195), 29, ""Test case 5 failed"")

fn main():
    test_largest_prime_factor()
    print(""All tests passed!"")",largest_prime_factor
HumanEval-Mojo/56,"fn fib(n: Int) -> Int:
    """"""Return n-th Fibonacci number.
    Example usage:
    let result1 = fib(10)
    print(result1)  # Should output: 55
    
    let result2 = fib(1)
    print(result2)  # Should output: 1
    
    let result3 = fib(8)
    print(result3)  # Should output: 21
    """"""","fn fib(n: Int) raises -> Int:
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)","from testing import assert_equal

fn test_fib():
    assert_equal(fib(10), 55, ""fib(10) should return 55"")
    assert_equal(fib(1), 1, ""fib(1) should return 1"")
    assert_equal(fib(8), 21, ""fib(8) should return 21"")
    assert_equal(fib(11), 89, ""fib(11) should return 89"")
    assert_equal(fib(12), 144, ""fib(12) should return 144"")

fn main():
    test_fib()
    print(""All tests passed!"")",fib
HumanEval-Mojo/57,"fn common(l1: List[Int], l2: List[Int]) -> List[Int]:
    """"""
    Return sorted unique common elements for two lists.
    
    Example usage:
    let result1 = common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    print(result1)  # Should output: [1, 5, 653]
    
    let result2 = common([5, 3, 2, 8], [3, 2])
    print(result2)  # Should output: [2, 3]
    """"""","from collections import HashSet, List
from algorithm import sort

fn find_common_elements(l1: List[Int], l2: List[Int]) raises -> List[Int]:
    var ret = HashSet[Int]()
    
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    
    var result = List[Int]()
    for item in ret:
        result.append(item)
    
    sort(result)
    return result","from testing import assert_equal

fn test_common():
    # Test case 1
    let result1 = common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    assert_equal(result1, [1, 5, 653])

    # Test case 2
    let result2 = common([5, 3, 2, 8], [3, 2])
    assert_equal(result2, [2, 3])

    # Test case 3
    let result3 = common([4, 3, 2, 8], [3, 2, 4])
    assert_equal(result3, [2, 3, 4])

    # Test case 4
    let result4 = common([4, 3, 2, 8], [])
    assert_equal(result4, [])

    print(""All tests passed!"")

fn main():
    test_common()",common
HumanEval-Mojo/58,"fn correct_bracketing(brackets: String) -> Bool:
    """"""
    brackets is a String of ""<"" and "">"".
    Return True if every opening bracket has a corresponding closing bracket.

    Examples:
    correct_bracketing(""<"")      # Returns False
    correct_bracketing(""<>"")     # Returns True
    correct_bracketing(""<<><>>"") # Returns True
    correct_bracketing(""><<>"")   # Returns False
    """"""","fn check_brackets(brackets: String) raises -> Bool:
    var depth: Int = 0
    for b in brackets:
        if b == '<':
            depth += 1
        elif b == '>':
            depth -= 1
        else:
            raise Error(""Invalid character in input"")
        if depth < 0:
            return False
    return depth == 0","from testing import assert_true, assert_false

fn test_correct_bracketing():
    assert_true(correct_bracketing(""<>""), ""Test case 1 failed"")
    assert_true(correct_bracketing(""<<><>>""), ""Test case 2 failed"")
    assert_true(correct_bracketing(""<><><<><>><>""), ""Test case 3 failed"")
    assert_true(correct_bracketing(""<><><<<><><>><>><<><><<>>>""), ""Test case 4 failed"")
    assert_false(correct_bracketing(""<<<><>>>>""), ""Test case 5 failed"")
    assert_false(correct_bracketing(""><<>""), ""Test case 6 failed"")
    assert_false(correct_bracketing(""<""), ""Test case 7 failed"")
    assert_false(correct_bracketing(""<<<<""), ""Test case 8 failed"")
    assert_false(correct_bracketing("">""), ""Test case 9 failed"")
    assert_false(correct_bracketing(""<<>""), ""Test case 10 failed"")
    assert_false(correct_bracketing(""<><><<><>><>><<>""), ""Test case 11 failed"")
    assert_false(correct_bracketing(""<><><<><>><>>><>""), ""Test case 12 failed"")
    print(""All test cases passed!"")

fn main():
    test_correct_bracketing()",correct_bracketing
HumanEval-Mojo/59,"fn monotonic(l: List[Int]) -> Bool:
    """"""
    Return True if list elements are monotonically increasing or decreasing.
    
    Examples:
    >>> let list1 = [1, 2, 4, 20]
    >>> print(monotonic(list1))
    True
    
    >>> let list2 = [1, 20, 4, 10]
    >>> print(monotonic(list2))
    False
    
    >>> let list3 = [4, 1, 0, -10]
    >>> print(monotonic(list3))
    True
    """"""","fn is_monotonic(l: DynamicVector[Int]) raises -> Bool:
    let sorted_asc = l.sorted()
    let sorted_desc = l.sorted(reverse=True)
    
    return l == sorted_asc or l == sorted_desc","from testing import assert_equal

fn test_monotonic():
    # Test case 1
    let result1 = monotonic([1, 2, 4, 10])
    assert_equal(result1, True, ""Test case 1 failed"")

    # Test case 2
    let result2 = monotonic([1, 2, 4, 20])
    assert_equal(result2, True, ""Test case 2 failed"")

    # Test case 3
    let result3 = monotonic([1, 20, 4, 10])
    assert_equal(result3, False, ""Test case 3 failed"")

    # Test case 4
    let result4 = monotonic([4, 1, 0, -10])
    assert_equal(result4, True, ""Test case 4 failed"")

    # Test case 5
    let result5 = monotonic([4, 1, 1, 0])
    assert_equal(result5, True, ""Test case 5 failed"")

    # Test case 6
    let result6 = monotonic([1, 2, 3, 2, 5, 60])
    assert_equal(result6, False, ""Test case 6 failed"")

    # Test case 7
    let result7 = monotonic([1, 2, 3, 4, 5, 60])
    assert_equal(result7, True, ""Test case 7 failed"")

    # Test case 8
    let result8 = monotonic([9, 9, 9, 9])
    assert_equal(result8, True, ""Test case 8 failed"")

    print(""All tests passed!"")

fn main():
    test_monotonic()",monotonic
HumanEval-Mojo/60,"fn sum_to_n(n: Int) -> Int:
    """"""sum_to_n is a function that sums numbers from 1 to n.
    Example usage:
    let result1 = sum_to_n(30)
    print(result1)  # Output: 465

    let result2 = sum_to_n(100)
    print(result2)  # Output: 5050

    let result3 = sum_to_n(5)
    print(result3)  # Output: 15

    let result4 = sum_to_n(10)
    print(result4)  # Output: 55

    let result5 = sum_to_n(1)
    print(result5)  # Output: 1
    """"""","fn sum_up_to(n: Int) raises -> Int:
    var total: Int = 0
    for i in range(n + 1):
        total += i
    return total","from testing import assert_equal

fn test_sum_to_n():
    assert_equal(sum_to_n(1), 1, ""Test case 1 failed"")
    assert_equal(sum_to_n(6), 21, ""Test case 2 failed"")
    assert_equal(sum_to_n(11), 66, ""Test case 3 failed"")
    assert_equal(sum_to_n(30), 465, ""Test case 4 failed"")
    assert_equal(sum_to_n(100), 5050, ""Test case 5 failed"")

fn main():
    test_sum_to_n()
    print(""All tests passed!"")",sum_to_n
HumanEval-Mojo/61,"fn vowels_count(s: String) -> Int:
    """"""Write a function vowels_count which takes a String representing
    a word as input and returns the number of vowels in the String.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    let result1 = vowels_count(""abcde"")
    print(result1)  # Should output: 2

    let result2 = vowels_count(""ACEDY"")
    print(result2)  # Should output: 3
    """"""","fn count_vowels(s: String) -> Int:
    let vowels: String = ""aeiouAEIOU""
    var n_vowels: Int = 0
    
    for c in s:
        if vowels.contains(c):
            n_vowels += 1
    
    if s.length() > 0:
        let last_char = s[s.length() - 1]
        if last_char == 'y' or last_char == 'Y':
            n_vowels += 1
    
    return n_vowels","from testing import assert_equal, assert_true

fn test_vowels_count():
    # Check some simple cases
    assert_equal(vowels_count(""abcde""), 2, ""Test 1"")
    assert_equal(vowels_count(""Alone""), 3, ""Test 2"")
    assert_equal(vowels_count(""key""), 2, ""Test 3"")
    assert_equal(vowels_count(""bye""), 1, ""Test 4"")
    assert_equal(vowels_count(""keY""), 2, ""Test 5"")
    assert_equal(vowels_count(""bYe""), 1, ""Test 6"")
    assert_equal(vowels_count(""ACEDY""), 3, ""Test 7"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")

    print(""All tests passed!"")

fn main():
    test_vowels_count()",vowels_count
HumanEval-Mojo/62,"fn fibfib(n: Int) -> Int:
    """"""The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    
    Example usage:
    let result1 = fibfib(1)
    print(result1)  # Output: 0
    
    let result2 = fibfib(5)
    print(result2)  # Output: 4
    
    let result3 = fibfib(8)
    print(result3)  # Output: 24
    """"""","fn fibfib(n: Int) raises -> Int:
    if n == 0 or n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)","from testing import assert_equal

fn test_fibfib():
    fn fibfib(n: Int) -> Int:
        # Assuming the fibfib function is defined here or imported
        # For this example, we'll use a placeholder implementation
        return n  # Placeholder, replace with actual implementation

    print(""Running tests for fibfib function"")
    
    assert_equal(fibfib(2), 1, ""Test case 1 failed"")
    assert_equal(fibfib(1), 0, ""Test case 2 failed"")
    assert_equal(fibfib(5), 4, ""Test case 3 failed"")
    assert_equal(fibfib(8), 24, ""Test case 4 failed"")
    assert_equal(fibfib(10), 81, ""Test case 5 failed"")
    assert_equal(fibfib(12), 274, ""Test case 6 failed"")
    assert_equal(fibfib(14), 927, ""Test case 7 failed"")
    
    print(""All tests passed successfully"")

fn main():
    test_fibfib()",fibfib
HumanEval-Mojo/63,"fn derivative(xs: DynamicVector[Int]) -> DynamicVector[Int]:
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    
    Example usage:
    let result1 = derivative(DynamicVector[Int]([3, 1, 2, 4, 5]))
    # result1 should be [1, 4, 12, 20]
    
    let result2 = derivative(DynamicVector[Int]([1, 2, 3]))
    # result2 should be [2, 6]
    """"""","fn multiply_and_slice(xs: DynamicVector[Int]) -> DynamicVector[Int]:
    var result = DynamicVector[Int]()
    for i in range(1, len(xs)):
        result.append(i * xs[i])
    return result","from testing import assert_equal

fn test_derivative():
    # Test case 1
    let input1 = [3, 1, 2, 4, 5]
    let expected1 = [1, 4, 12, 20]
    assert_equal(derivative(input1), expected1)

    # Test case 2
    let input2 = [1, 2, 3]
    let expected2 = [2, 6]
    assert_equal(derivative(input2), expected2)

    # Test case 3
    let input3 = [3, 2, 1]
    let expected3 = [2, 2]
    assert_equal(derivative(input3), expected3)

    # Test case 4
    let input4 = [3, 2, 1, 0, 4]
    let expected4 = [2, 2, 0, 16]
    assert_equal(derivative(input4), expected4)

    # Test case 5
    let input5 = [1]
    let expected5: DynamicVector[Int] = []
    assert_equal(derivative(input5), expected5)

    print(""All tests passed!"")

fn main():
    test_derivative()",derivative
HumanEval-Mojo/64,"fn correct_bracketing(brackets: String) -> Bool:
    """"""
    brackets is a String of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    Examples:
    correct_bracketing(""("") -> False
    correct_bracketing(""()"") -> True
    correct_bracketing(""(()())"") -> True
    correct_bracketing("")(()"") -> False
    """"""","fn check_brackets(brackets: String) raises -> Bool:
    var depth: Int = 0
    
    for b in brackets:
        if b == '(':
            depth += 1
        elif b == ')':
            depth -= 1
        else:
            raise Error(""Invalid character in input string"")
        
        if depth < 0:
            return False
    
    return depth == 0","from testing import assert_true, assert_false

fn test_correct_bracketing():
    # Positive cases
    assert_true(correct_bracketing(""()""))
    assert_true(correct_bracketing(""(()())""))
    assert_true(correct_bracketing(""()()(()())()""))
    assert_true(correct_bracketing(""()()((()()())())(()()(()))""))

    # Negative cases
    assert_false(correct_bracketing(""((()())))"")
    assert_false(correct_bracketing("")(()"")
    assert_false(correct_bracketing(""(""))
    assert_false(correct_bracketing(""((((""))
    assert_false(correct_bracketing("")""))
    assert_false(correct_bracketing(""(()""))
    assert_false(correct_bracketing(""()()(()())())(()"")
    assert_false(correct_bracketing(""()()(()())()))()"")

fn main():
    test_correct_bracketing()
    print(""All tests passed!"")",correct_bracketing
HumanEval-Mojo/65,"fn circular_shift(x: Int, shift: Int) -> String:
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a String.
    If shift > number of digits, return digits reversed.
    
    Examples:
    circular_shift(12, 1) -> ""21""
    circular_shift(12, 2) -> ""12""
    """"""","fn rotate_string(x: String, shift: Int) raises -> String:
    let s = x
    let length = len(s)
    
    if shift > length:
        return String(s.reversed())
    else:
        let first_part = s[length - shift:]
        let second_part = s[:length - shift]
        return first_part + second_part","from testing import assert_equal

fn test_circular_shift():
    # Check some simple cases
    assert_equal(circular_shift(100, 2), ""001"")
    assert_equal(circular_shift(12, 2), ""12"")
    assert_equal(circular_shift(97, 8), ""79"")
    assert_equal(circular_shift(12, 1), ""21"", message=""Failed: circular_shift(12, 1)"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(circular_shift(11, 101), ""11"", message=""Failed: circular_shift(11, 101)"")

    print(""All tests passed!"")

fn main():
    test_circular_shift()",circular_shift
HumanEval-Mojo/66,"fn digitSum(s: String) -> Int:
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""","fn ascii_uppercase_sum(s: String) raises -> Int:
    if s == """":
        return 0
    
    var total: Int = 0
    for i in range(len(s)):
        let char = s[i]
        if char.isascii() and char.isupper():
            total += ord(char)
    
    return total","from testing import assert_equal, assert_true
from sys.intrinsics import _assert

fn test_digitSum():
    # Check some simple cases
    _assert(True, ""This prints if this assert fails 1 (good for debugging!)"")
    assert_equal(digitSum(""""), 0, ""Error: Empty string should return 0"")
    assert_equal(digitSum(""abAB""), 131, ""Error: 'abAB' should return 131"")
    assert_equal(digitSum(""abcCd""), 67, ""Error: 'abcCd' should return 67"")
    assert_equal(digitSum(""helloE""), 69, ""Error: 'helloE' should return 69"")
    assert_equal(digitSum(""woArBld""), 131, ""Error: 'woArBld' should return 131"")
    assert_equal(digitSum(""aAaaaXa""), 153, ""Error: 'aAaaaXa' should return 153"")

    # Check some edge cases that are easy to work out by hand.
    _assert(True, ""This prints if this assert fails 2 (also good for debugging!)"")
    assert_equal(digitSum("" How are yOu?""), 151, ""Error: ' How are yOu?' should return 151"")
    assert_equal(digitSum(""You arE Very Smart""), 327, ""Error: 'You arE Very Smart' should return 327"")

fn main():
    test_digitSum()
    print(""All tests passed!"")",digitSum
HumanEval-Mojo/67,"fn fruit_distribution(s: String, n: Int) -> Int:
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit. This basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represents the total number of the fruits 
    in the basket, return the number of the mango fruits in the basket.
    
    For example:
    fruit_distribution(""5 apples and 6 oranges"", 19) -> 19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"", 3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"", 120) -> 120 - 100 - 1 = 19
    """"""","fn process_string(s: String, n: Int) raises -> Int:
    var total: Int = 0
    let words = s.split()
    
    for word in words:
        if word.isdigit():
            let num = Int(word)
            if num.is_ok():
                total += num.value()
    
    return n - total","from testing import assert_equal

fn test_fruit_distribution():
    # Check some simple cases
    assert_equal(fruit_distribution(""5 apples and 6 oranges"", 19), 8)
    assert_equal(fruit_distribution(""5 apples and 6 oranges"", 21), 10)
    assert_equal(fruit_distribution(""0 apples and 1 oranges"", 3), 2)
    assert_equal(fruit_distribution(""1 apples and 0 oranges"", 3), 2)
    assert_equal(fruit_distribution(""2 apples and 3 oranges"", 100), 95)
    assert_equal(fruit_distribution(""2 apples and 3 oranges"", 5), 0)
    assert_equal(fruit_distribution(""1 apples and 100 oranges"", 120), 19)

    print(""All tests passed!"")

fn main():
    test_fruit_distribution()",fruit_distribution
HumanEval-Mojo/68,"fn pluck(arr: DynamicVector[Int]) -> DynamicVector[Int]:
    """"""
    Given a DynamicVector representing a branch of a tree that has non-negative integer nodes,
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found, return the node that has the smallest index.

    The plucked node should be returned in a DynamicVector, [smallest_value, its_index].
    If there are no even values or the given DynamicVector is empty, return an empty DynamicVector.

    Example1:
        Input: DynamicVector[Int](4, 2, 3)
        Output: DynamicVector[Int](2, 1)
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example2:
        Input: DynamicVector[Int](1, 2, 3)
        Output: DynamicVector[Int](2, 1)
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example3:
        Input: DynamicVector[Int]()
        Output: DynamicVector[Int]()
    
    Example4:
        Input: DynamicVector[Int](5, 0, 3, 0, 4, 2)
        Output: DynamicVector[Int](0, 1)
        Explanation: 0 is the smallest value, but there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.len() <= 10000
        * 0 <= node.value
    """"""","from python import Python

fn find_smallest_even(arr: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    
    if arr.__len__() == 0:
        return py.list()
    
    let evens = py.list(py.filter(lambda x: x % 2 == 0, arr))
    
    if evens.__len__() == 0:
        return py.list()
    
    let min_even = py.min(evens)
    let min_even_index = arr.index(min_even)
    
    return py.list([min_even, min_even_index])

fn main() raises:
    let py = Python.import_module(""builtins"")
    let test_arr = py.list([1, 2, 3, 4, 5, 6])
    let result = find_smallest_even(test_arr)
    print(result)","from testing import assert_equal, assert_true
from collections.vector import DynamicVector

fn pluck(inout v: DynamicVector[Int]) -> DynamicVector[Int]:
    # Implement the pluck function here
    return DynamicVector[Int]()

fn test_pluck():
    print(""Running tests for pluck function..."")

    # Check some simple cases
    assert_true(True, ""This prints if this assert fails 1 (good for debugging!)"")
    assert_equal(pluck(DynamicVector[Int](4,2,3)), DynamicVector[Int](2, 1), ""Error"")
    assert_equal(pluck(DynamicVector[Int](1,2,3)), DynamicVector[Int](2, 1), ""Error"")
    assert_equal(pluck(DynamicVector[Int]()), DynamicVector[Int](), ""Error"")
    assert_equal(pluck(DynamicVector[Int](5, 0, 3, 0, 4, 2)), DynamicVector[Int](0, 1), ""Error"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")
    assert_equal(pluck(DynamicVector[Int](1, 2, 3, 0, 5, 3)), DynamicVector[Int](0, 3), ""Error"")
    assert_equal(pluck(DynamicVector[Int](5, 4, 8, 4, 8)), DynamicVector[Int](4, 1), ""Error"")
    assert_equal(pluck(DynamicVector[Int](7, 6, 7, 1)), DynamicVector[Int](6, 1), ""Error"")
    assert_equal(pluck(DynamicVector[Int](7, 9, 7, 1)), DynamicVector[Int](), ""Error"")

    print(""All tests passed!"")

fn main():
    test_pluck()",pluck
HumanEval-Mojo/69,"fn search(lst: List[Int]) -> Int:
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''","from python import Python

fn find_special_integer(lst: PythonObject) raises -> Int:
    let py = Python.import_module(""builtins"")
    let max_value = py.max(lst)
    var frq = DynamicVector[Int](max_value.to_int() + 1)
    
    for i in range(max_value.to_int() + 1):
        frq.append(0)
    
    for i in range(lst.__len__()):
        let index = lst.__getitem__(i).to_int()
        frq[index] += 1
    
    var ans: Int = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans

fn main() raises:
    let py = Python.import_module(""builtins"")
    let lst = py.list([1, 2, 2, 3, 4, 5])
    let result = find_special_integer(lst)
    print(result)","from testing import assert_equal

fn test_search():
    # manually generated tests
    assert_equal(search([5, 5, 5, 5, 1]), 1)
    assert_equal(search([4, 1, 4, 1, 4, 4]), 4)
    assert_equal(search([3, 3]), -1)
    assert_equal(search([8, 8, 8, 8, 8, 8, 8, 8]), 8)
    assert_equal(search([2, 3, 3, 2, 2]), 2)

    # automatically generated tests
    assert_equal(search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]), 1)
    assert_equal(search([3, 2, 8, 2]), 2)
    assert_equal(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1)
    assert_equal(search([8, 8, 3, 6, 5, 6, 4]), -1)
    assert_equal(search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1)
    assert_equal(search([1, 9, 10, 1, 3]), 1)
    assert_equal(search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5)
    assert_equal(search([1]), 1)
    assert_equal(search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4)
    assert_equal(search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2)
    assert_equal(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1)
    assert_equal(search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]), 4)
    assert_equal(search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4)
    assert_equal(search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2)
    assert_equal(search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6,",search
HumanEval-Mojo/70,"fn smallest_change(arr: DynamicVector[Int]) -> Int:
    """"""
    Given a DynamicVector arr of integers, find the minimum number of elements that
    need to be changed to make the vector palindromic. A palindromic vector is a vector that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change(DynamicVector[Int]([1,2,3,5,4,7,9,6])) == 4
    smallest_change(DynamicVector[Int]([1, 2, 3, 4, 3, 2, 2])) == 1
    smallest_change(DynamicVector[Int]([1, 2, 3, 2, 1])) == 0
    """"""","fn count_mismatches(arr: DynamicVector[Int]) raises -> Int:
    var ans: Int = 0
    let length = len(arr)
    
    for i in range(length // 2):
        if arr[i] != arr[length - i - 1]:
            ans += 1
    
    return ans","from testing import assert_equal

fn test_smallest_change():
    # Check some simple cases
    assert_equal(smallest_change([1,2,3,5,4,7,9,6]), 4)
    assert_equal(smallest_change([1, 2, 3, 4, 3, 2, 2]), 1)
    assert_equal(smallest_change([1, 4, 2]), 1)
    assert_equal(smallest_change([1, 4, 4, 2]), 1)

    # Check some edge cases that are easy to work out by hand.
    assert_equal(smallest_change([1, 2, 3, 2, 1]), 0)
    assert_equal(smallest_change([3, 1, 1, 3]), 0)
    assert_equal(smallest_change([1]), 0)
    assert_equal(smallest_change([0, 1]), 1)

    print(""All tests passed!"")

fn main():
    test_smallest_change()",smallest_change
HumanEval-Mojo/71,"fn triangle_area(a: Float64, b: Float64, c: Float64) -> Float64:
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1.0
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3.0, 4.0, 5.0) == 6.00
    triangle_area(1.0, 2.0, 10.0) == -1.0
    '''","fn calculate_triangle_area(a: Float64, b: Float64, c: Float64) raises -> Float64:
    if a + b <= c or a + c <= b or b + c <= a:
        raise Error(""Invalid triangle sides"")
    
    let s: Float64 = (a + b + c) / 2
    var area: Float64 = (s * (s - a) * (s - b) * (s - c)).sqrt()
    area = area.round(2)
    return area","from testing import assert_equal, assert_almost_equal
from math import abs

fn test_triangle_area():
    # Check some simple cases
    assert_almost_equal(triangle_area(3, 4, 5), 6.00, 0.01, ""Test case 1 failed"")
    assert_equal(triangle_area(1, 2, 10), -1, ""Test case 2 failed"")
    assert_almost_equal(triangle_area(4, 8, 5), 8.18, 0.01, ""Test case 3 failed"")
    assert_almost_equal(triangle_area(2, 2, 2), 1.73, 0.01, ""Test case 4 failed"")
    assert_equal(triangle_area(1, 2, 3), -1, ""Test case 5 failed"")
    assert_almost_equal(triangle_area(10, 5, 7), 16.25, 0.01, ""Test case 6 failed"")
    assert_equal(triangle_area(2, 6, 3), -1, ""Test case 7 failed"")

    # Check some edge cases that are easy to work out by hand.
    assert_almost_equal(triangle_area(1, 1, 1), 0.43, 0.01, ""Test case 8 failed"")
    assert_equal(triangle_area(2, 2, 10), -1, ""Test case 9 failed"")

    print(""All tests passed!"")

fn main():
    test_triangle_area()",triangle_area
HumanEval-Mojo/72,"fn will_it_fly(q: List[Int], w: Int) -> Bool:
    """"""
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) -> False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) -> False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) -> True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) -> True
    # 3 is less than the maximum possible weight, and it's balanced.
    """"""","fn is_palindrome(q: DynamicVector[Int], w: Int) raises -> Bool:
    let total = q.reduce(0, fn(a: Int, b: Int) -> Int: return a + b)
    if total > w:
        return False

    var i: Int = 0
    var j: Int = q.size - 1

    while i < j:
        if q[i] != q[j]:
            return False
        i += 1
        j -= 1

    return True","from testing import assert_true, assert_false

fn test_will_it_fly():
    # Check some simple cases
    assert_true(will_it_fly([3, 2, 3], 9))
    assert_false(will_it_fly([1, 2], 5))
    assert_true(will_it_fly([3], 5))
    assert_false(will_it_fly([3, 2, 3], 1))

    # Check some edge cases that are easy to work out by hand.
    assert_false(will_it_fly([1, 2, 3], 6))
    assert_true(will_it_fly([5], 5))

fn main():
    test_will_it_fly()
    print(""All tests passed!"")",will_it_fly
HumanEval-Mojo/73,"fn strange_sort_list(lst: List[Int]) -> List[Int]:
    '''
    Given a list of integers, return the list in a strange order.
    Strange sorting is when you start with the minimum value,
    then the maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''","from python import Python

fn rearrange_array(lst: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    var res = py.list()
    var switch = True
    
    while py.bool(lst):
        if switch:
            var min_val = py.min(lst)
            res.append(min_val)
            lst.remove(min_val)
        else:
            var max_val = py.max(lst)
            res.append(max_val)
            lst.remove(max_val)
        switch = not switch
    
    return res

fn main() raises:
    let py = Python.import_module(""builtins"")
    var test_list = py.list([1, 2, 3, 4, 5])
    var result = rearrange_array(test_list)
    print(result)","from testing import assert_equal
from collections import DynamicVector

fn strange_sort_list(input: DynamicVector[Int]) -> DynamicVector[Int]:
    # Assuming the implementation of strange_sort_list is defined elsewhere
    ...

fn test_strange_sort_list():
    # Check some simple cases
    assert_equal(strange_sort_list(DynamicVector[Int]([1, 2, 3, 4])), DynamicVector[Int]([1, 4, 2, 3]))
    assert_equal(strange_sort_list(DynamicVector[Int]([5, 6, 7, 8, 9])), DynamicVector[Int]([5, 9, 6, 8, 7]))
    assert_equal(strange_sort_list(DynamicVector[Int]([1, 2, 3, 4, 5])), DynamicVector[Int]([1, 5, 2, 4, 3]))
    assert_equal(strange_sort_list(DynamicVector[Int]([5, 6, 7, 8, 9, 1])), DynamicVector[Int]([1, 9, 5, 8, 6, 7]))
    assert_equal(strange_sort_list(DynamicVector[Int]([5, 5, 5, 5])), DynamicVector[Int]([5, 5, 5, 5]))
    assert_equal(strange_sort_list(DynamicVector[Int]([])), DynamicVector[Int]([]))
    assert_equal(strange_sort_list(DynamicVector[Int]([1,2,3,4,5,6,7,8])), DynamicVector[Int]([1, 8, 2, 7, 3, 6, 4, 5]))
    assert_equal(strange_sort_list(DynamicVector[Int]([0,2,2,2,5,5,-5,-5])), DynamicVector[Int]([-5, 5, -5, 5, 0, 2, 2, 2]))
    assert_equal(strange_sort_list(DynamicVector[Int]([111111])), DynamicVector[Int]([111111]))

    # Check some edge cases that are easy to work out by hand.
    assert True

fn main():
    test_strange_sort_list()
    print(""All tests passed!"")",strange_sort_list
HumanEval-Mojo/74,"fn total_match(lst1: List[String], lst2: List[String]) -> List[String]:
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in all the strings of the list less than the other list.

    If the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) -> []
    total_match([""hi"", ""admin""], [""hI"", ""Hi""]) -> [""hI"", ""Hi""]
    total_match([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]) -> [""hi"", ""admin""]
    total_match([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]) -> [""hI"", ""hi"", ""hi""]
    total_match([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]) -> [""4""]
    '''","fn compare_lists(lst1: List[String], lst2: List[String]) -> List[String]:
    var l1: Int = 0
    for st in lst1:
        l1 += len(st)
    
    var l2: Int = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2

fn main():
    let list1 = [""apple"", ""banana"", ""cherry""]
    let list2 = [""dog"", ""elephant"", ""frog"", ""giraffe""]
    
    let result = compare_lists(list1, list2)
    print(result)","from testing import assert_equal, assert_true
from collections import DynamicVector

fn test_total_match():
    print(""Running tests for total_match function"")
    
    # Check some simple cases
    assert_true(True, ""This prints if this assert fails 1 (good for debugging!)"")
    
    assert_equal(total_match(DynamicVector[String](), DynamicVector[String]()), DynamicVector[String]())
    
    var test1_input1 = DynamicVector[String]()
    test1_input1.push_back(""hi"")
    test1_input1.push_back(""admin"")
    var test1_input2 = DynamicVector[String]()
    test1_input2.push_back(""hi"")
    test1_input2.push_back(""hi"")
    var test1_expected = DynamicVector[String]()
    test1_expected.push_back(""hi"")
    test1_expected.push_back(""hi"")
    assert_equal(total_match(test1_input1, test1_input2), test1_expected)
    
    var test2_input1 = DynamicVector[String]()
    test2_input1.push_back(""hi"")
    test2_input1.push_back(""admin"")
    var test2_input2 = DynamicVector[String]()
    test2_input2.push_back(""hi"")
    test2_input2.push_back(""hi"")
    test2_input2.push_back(""admin"")
    test2_input2.push_back(""project"")
    var test2_expected = DynamicVector[String]()
    test2_expected.push_back(""hi"")
    test2_expected.push_back(""admin"")
    assert_equal(total_match(test2_input1, test2_input2), test2_expected)
    
    var test3_input1 = DynamicVector[String]()
    test3_input1.push_back(""4"")
    var test3_input2 = DynamicVector[String]()
    test3_input2.push_back(""1"")
    test3_input2.push_back(""2"")
    test3_input2.push_back(""3"")
    test3_input2.push_back(""4"")
    test3_input2.push_back(""5"")
    var test3_expected = DynamicVector[String]()
    test3_expected.push_back(""4"")
    assert_equal(total_match(test3_input1, test3_input2), test3_expected)
    
    var test4_input1 = DynamicVector[String]()
    test4_input1.push_back(""hi"")
    test4_input1.push_back(""admin"")
    var test4_input2 = DynamicVector[String]()
    test4_input2.push_back(""hI"")
    test4_input2.push_back(""Hi"")
    var test4_expected = DynamicVector[String]()
    test4_expected.push_back(""hI"")
    test4_expected.push_back(""Hi"")
    assert_equal(total_match(test4_input1, test4_input2), test4_expected)
    
    var test5_input1 = DynamicVector[String]()
    test5_input1.push_back(""hi"")
    test5_input1.push_back(""admin"")
    var test5_input2 = DynamicVector[String]()
    test5_input2.push_back(""hI"")
    test5_input2.push_back(""hi"")
    test5_input2.push_back(""hi"")
    var test5_expected = DynamicVector[String]()
    test5_expected.push_back(""hI"")
    test5_expected.push_back(""hi"")
    test5_expected.push_back(""hi"")
    assert_equal(total_match(test5_input1, test5_input2), test5_expected)",total_match
HumanEval-Mojo/75,"fn decimal_to_binary(decimal: Int) -> String:
    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a String, with each character representing a binary
    number. Each character in the String will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the String.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""","fn convert_to_binary(decimal: Int) -> String:
    let binary_str = String(decimal, 2)
    return ""db"" + binary_str + ""db""

fn main():
    let decimal: Int = 10
    let result = convert_to_binary(decimal)
    print(result)","from testing import assert_equal, assert_true
from sys.info import simdwidthof

fn test_decimal_to_binary():
    print(""Running tests for decimal_to_binary..."")

    # Check some simple cases
    assert_equal(decimal_to_binary(0), ""db0db"", ""Test case 0 failed"")
    assert_equal(decimal_to_binary(32), ""db100000db"", ""Test case 32 failed"")
    assert_equal(decimal_to_binary(103), ""db1100111db"", ""Test case 103 failed"")
    assert_equal(decimal_to_binary(15), ""db1111db"", ""Test case 15 failed"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This assertion should always pass"")

    print(""All tests passed!"")

fn main():
    test_decimal_to_binary()",decimal_to_binary
HumanEval-Mojo/76,"fn iscube(a: Int) -> Bool:
    '''
    Write a function that takes an integer 'a' and returns True 
    if this integer is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''","fn cube_root(a: Int64) raises -> Bool:
    let abs_a = abs(a)
    let cube_root = Int64(round(pow(Float64(abs_a), 1.0 / 3.0)))
    return cube_root ** 3 == abs_a

fn abs(x: Int64) -> Int64:
    if x < 0:
        return -x
    return x

fn round(x: Float64) -> Float64:
    return floor(x + 0.5)","from testing import assert_true, assert_false

fn test_iscube():
    # Check some simple cases
    assert_true(iscube(1), ""First test error: iscube(1) should be True"")
    assert_false(iscube(2), ""Second test error: iscube(2) should be False"")
    assert_true(iscube(-1), ""Third test error: iscube(-1) should be True"")
    assert_true(iscube(64), ""Fourth test error: iscube(64) should be True"")
    assert_false(iscube(180), ""Fifth test error: iscube(180) should be False"")
    assert_true(iscube(1000), ""Sixth test error: iscube(1000) should be True"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(iscube(0), ""1st edge test error: iscube(0) should be True"")
    assert_false(iscube(1729), ""2nd edge test error: iscube(1729) should be False"")

fn main():
    test_iscube()
    print(""All tests passed!"")",iscube
HumanEval-Mojo/77,"fn is_simple_power(x: Int, n: Int) -> Bool:
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""","fn is_power(x: Int, n: Int) -> Bool:
    if n == 1:
        return x == 1
    
    var power: Int = 1
    while power < x:
        power *= n
    
    return power == x

fn main():
    let x: Int = 16
    let n: Int = 2
    let result: Bool = is_power(x, n)
    print(result)","from testing import assert_true, assert_false

fn test_is_simple_power():
    # Check some simple cases
    assert_true(is_simple_power(16, 2), ""Failed: 16 is a simple power of 2"")
    assert_false(is_simple_power(143214, 16), ""Failed: 143214 is not a simple power of 16"")
    assert_true(is_simple_power(4, 2), ""Failed: 4 is a simple power of 2"")
    assert_true(is_simple_power(9, 3), ""Failed: 9 is a simple power of 3"")
    assert_true(is_simple_power(16, 4), ""Failed: 16 is a simple power of 4"")
    assert_false(is_simple_power(24, 2), ""Failed: 24 is not a simple power of 2"")
    assert_false(is_simple_power(128, 4), ""Failed: 128 is not a simple power of 4"")
    assert_false(is_simple_power(12, 6), ""Failed: 12 is not a simple power of 6"")

    # Check some edge cases that are easy to work out by hand
    assert_true(is_simple_power(1, 1), ""Failed: 1 is a simple power of 1"")
    assert_true(is_simple_power(1, 12), ""Failed: 1 is a simple power of 12"")

fn main():
    test_is_simple_power()
    print(""All tests passed!"")",is_simple_power
HumanEval-Mojo/78,"fn is_multiply_prime(a: Int) -> Bool:
    """"""Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less than 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """"""","fn is_prime(n: Int) -> Bool:
    for j in range(2, n):
        if n % j == 0:
            return False
    return True

fn check_product(a: Int) raises -> Bool:
    for i in range(2, 101):
        if not is_prime(i):
            continue
        for j in range(2, 101):
            if not is_prime(j):
                continue
            for k in range(2, 101):
                if not is_prime(k):
                    continue
                if i * j * k == a:
                    return True
    return False

fn main() raises:
    let result = check_product(30)
    print(result)","from testing import assert_equal

fn test_is_multiply_prime():
    # Assuming 'is_multiply_prime' is defined elsewhere
    assert_equal(is_multiply_prime(5), False, ""Test case 1 failed"")
    assert_equal(is_multiply_prime(30), True, ""Test case 2 failed"")
    assert_equal(is_multiply_prime(8), True, ""Test case 3 failed"")
    assert_equal(is_multiply_prime(10), False, ""Test case 4 failed"")
    assert_equal(is_multiply_prime(125), True, ""Test case 5 failed"")
    assert_equal(is_multiply_prime(3 * 5 * 7), True, ""Test case 6 failed"")
    assert_equal(is_multiply_prime(3 * 6 * 7), False, ""Test case 7 failed"")
    assert_equal(is_multiply_prime(9 * 9 * 9), False, ""Test case 8 failed"")
    assert_equal(is_multiply_prime(11 * 9 * 9), False, ""Test case 9 failed"")
    assert_equal(is_multiply_prime(11 * 13 * 7), True, ""Test case 10 failed"")

fn main():
    test_is_multiply_prime()
    print(""All tests passed!"")",is_multiply_prime
HumanEval-Mojo/79,"fn hex_key(num: String) -> Int:
    """"""You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""","from python import Python

fn count_primes(num: String) raises -> Int:
    let py = Python.import_module(""builtins"")
    let primes = py.tuple(""2"", ""3"", ""5"", ""7"", ""B"", ""D"")
    
    var total: Int = 0
    for i in range(len(num)):
        if py.tuple.__contains__(primes, num[i]):
            total += 1
    
    return total","from testing import assert_equal

fn test_hex_key():
    # Check some simple cases
    assert_equal(hex_key(""AB""), 1, ""First test error"")
    assert_equal(hex_key(""1077E""), 2, ""Second test error"")
    assert_equal(hex_key(""ABED1A33""), 4, ""Third test error"")
    assert_equal(hex_key(""2020""), 2, ""Fourth test error"")
    assert_equal(hex_key(""123456789ABCDEF0""), 6, ""Fifth test error"")
    assert_equal(hex_key(""112233445566778899AABBCCDDEEFF00""), 12, ""Sixth test error"")

    # Check an edge case
    assert_equal(hex_key(""""), 0, ""Empty string test error"")

fn main():
    test_hex_key()
    print(""All tests passed!"")",hex_key
HumanEval-Mojo/80,"fn starts_one_ends(n: Int) -> Int:
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""","fn calculate(n: Int) raises -> Int:
    if n == 1:
        return 1
    
    if n < 1:
        raise Error(""Input must be a positive integer"")
    
    return 18 * (10 ** (n - 2))","from testing import assert_equal, assert_true
from sys import assert_true as sys_assert

fn test_starts_one_ends():
    # Check some simple cases
    sys_assert(True, ""This prints if this assert fails 1 (good for debugging!)"")
    assert_equal(starts_one_ends(1), 1)
    assert_equal(starts_one_ends(2), 18)
    assert_equal(starts_one_ends(3), 180)
    assert_equal(starts_one_ends(4), 1800)
    assert_equal(starts_one_ends(5), 18000)

    # Check some edge cases that are easy to work out by hand.
    sys_assert(True, ""This prints if this assert fails 2 (also good for debugging!)"")

    print(""All tests passed!"")

fn main():
    test_starts_one_ends()",starts_one_ends
HumanEval-Mojo/81,"fn solve(N: Int) -> String:
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Parameters:
        N: Int
             Constraints: 0 ≤ N ≤ 10000.
    Returns:
         A String representing the binary number
    """"""","fn binary_sum_of_digits(N: Int) -> String:
    var digit_sum: Int = 0
    var num_str = String(N)
    
    for i in range(len(num_str)):
        let digit = ord(num_str[i]) - ord('0')
        if 0 <= digit <= 9:
            digit_sum += digit
        else:
            raise Error(""Invalid digit in input"")
    
    var binary_result = String("""")
    if digit_sum == 0:
        return ""0""
    
    while digit_sum > 0:
        if digit_sum % 2 == 0:
            binary_result = ""0"" + binary_result
        else:
            binary_result = ""1"" + binary_result
        digit_sum //= 2
    
    return binary_result","from testing import assert_equal, assert_true
from sys import assert_true as sys_assert

fn test_solve():
    # Check some simple cases
    sys_assert(True, ""This prints if this assert fails 1 (good for debugging!)"")
    assert_equal(solve(1000), ""1"", ""Error: solve(1000) should return '1'"")
    assert_equal(solve(150), ""110"", ""Error: solve(150) should return '110'"")
    assert_equal(solve(147), ""1100"", ""Error: solve(147) should return '1100'"")

    # Check some edge cases that are easy to work out by hand.
    sys_assert(True, ""This prints if this assert fails 2 (also good for debugging!)"")
    assert_equal(solve(333), ""1001"", ""Error: solve(333) should return '1001'"")
    assert_equal(solve(963), ""10010"", ""Error: solve(963) should return '10010'"")

    print(""All tests passed!"")

fn main():
    test_solve()",solve
HumanEval-Mojo/82,"fn is_happy(s: String) -> Bool:
    """"""You are given a String s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive characters are distinct.
    For example:
    is_happy(""a"") => False
    is_happy(""aa"") => False
    is_happy(""abcd"") => True
    is_happy(""aabb"") => False
    is_happy(""adb"") => True
    is_happy(""xyy"") => False
    """"""","fn is_valid_string(s: String) raises -> Bool:
    if s.count() < 3:
        return False

    for i in range(s.count() - 2):
        let char1 = s[i]
        let char2 = s[i + 1]
        let char3 = s[i + 2]
        
        if char1 == char2 or char2 == char3 or char1 == char3:
            return False
    
    return True","from testing import assert_equal, assert_true, assert_false

fn test_is_happy():
    # Test simple cases
    assert_false(is_happy(""a""), ""Test case 'a' failed"")
    assert_false(is_happy(""aa""), ""Test case 'aa' failed"")
    assert_true(is_happy(""abcd""), ""Test case 'abcd' failed"")
    assert_false(is_happy(""aabb""), ""Test case 'aabb' failed"")
    assert_true(is_happy(""adb""), ""Test case 'adb' failed"")
    assert_false(is_happy(""xyy""), ""Test case 'xyy' failed"")
    assert_true(is_happy(""iopaxpoi""), ""Test case 'iopaxpoi' failed"")
    assert_false(is_happy(""iopaxioi""), ""Test case 'iopaxioi' failed"")

fn main():
    test_is_happy()
    print(""All tests passed!"")",is_happy
HumanEval-Mojo/83,"fn prime_length(string: String) -> Bool:
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length(""Hello"") == True
    prime_length(""abcdcba"") == True
    prime_length(""kittens"") == True
    prime_length(""orange"") == False
    """"""","fn is_prime(string: String) raises -> Bool:
    let l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True","from testing import assert_true, assert_false
from sys.info import simdwidthof

fn prime_length(s: String) -> Bool:
    # Assuming the implementation of prime_length is defined here
    # For this example, we'll use a placeholder implementation
    return len(s) > 1 and len(s) <= 13

fn test_prime_length():
    print(""Running tests for prime_length function"")

    # Check some simple cases
    assert_true(prime_length(""Hello""), ""Test case 'Hello' failed"")
    assert_true(prime_length(""abcdcba""), ""Test case 'abcdcba' failed"")
    assert_true(prime_length(""kittens""), ""Test case 'kittens' failed"")
    assert_false(prime_length(""orange""), ""Test case 'orange' failed"")
    assert_true(prime_length(""wow""), ""Test case 'wow' failed"")
    assert_true(prime_length(""world""), ""Test case 'world' failed"")
    assert_true(prime_length(""MadaM""), ""Test case 'MadaM' failed"")
    assert_true(prime_length(""Wow""), ""Test case 'Wow' failed"")
    assert_false(prime_length(""""), ""Test case '' failed"")
    assert_true(prime_length(""HI""), ""Test case 'HI' failed"")
    assert_true(prime_length(""go""), ""Test case 'go' failed"")
    assert_false(prime_length(""gogo""), ""Test case 'gogo' failed"")
    assert_false(prime_length(""aaaaaaaaaaaaaaa""), ""Test case 'aaaaaaaaaaaaaaa' failed"")

    # Check some edge cases that are easy to work out by hand
    assert_true(prime_length(""Madam""), ""Test case 'Madam' failed"")
    assert_false(prime_length(""M""), ""Test case 'M' failed"")
    assert_false(prime_length(""0""), ""Test case '0' failed"")

    print(""All tests passed successfully!"")

fn main():
    test_prime_length()",prime_length
HumanEval-Mojo/84,"fn numerical_letter_grade(grades: List[Float64]) -> List[String]:
    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    numerical_letter_grade([4.0, 3.0, 1.7, 2.0, 3.5]) ==> [""A+"", ""B"", ""C-"", ""C"", ""A-""]
    """"""","from collections import DynamicVector

fn convert_grades_to_letters(grades: DynamicVector[Float64]) raises -> DynamicVector[String]:
    var letter_grades = DynamicVector[String]()
    
    for i in range(len(grades)):
        let gpa = grades[i]
        if gpa == 4.0:
            letter_grades.push_back(""A+"")
        elif gpa > 3.7:
            letter_grades.push_back(""A"")
        elif gpa > 3.3:
            letter_grades.push_back(""A-"")
        elif gpa > 3.0:
            letter_grades.push_back(""B+"")
        elif gpa > 2.7:
            letter_grades.push_back(""B"")
        elif gpa > 2.3:
            letter_grades.push_back(""B-"")
        elif gpa > 2.0:
            letter_grades.push_back(""C+"")
        elif gpa > 1.7:
            letter_grades.push_back(""C"")
        elif gpa > 1.3:
            letter_grades.push_back(""C-"")
        elif gpa > 1.0:
            letter_grades.push_back(""D+"")
        elif gpa > 0.7:
            letter_grades.push_back(""D"")
        elif gpa > 0.0:
            letter_grades.push_back(""D-"")
        else:
            letter_grades.push_back(""E"")
    
    return letter_grades

fn main() raises:
    let grades = DynamicVector[Float64]()
    grades.push_back(3.9)
    grades.push_back(2.5)
    grades.push_back(1.8)
    grades.push_back(4.0)
    
    let letter_grades = convert_grades_to_letters(grades)
    
    for i in range(len(letter_grades)):
        print(letter_grades[i])","from testing import assert_equal, assert_true
from collections import DynamicVector

fn test_numerical_letter_grade():
    # Test case 1
    var input1 = DynamicVector[Float64]()
    input1.push_back(4.0)
    input1.push_back(3.0)
    input1.push_back(1.7)
    input1.push_back(2.0)
    input1.push_back(3.5)
    var expected1 = DynamicVector[String]()
    expected1.push_back(""A+"")
    expected1.push_back(""B"")
    expected1.push_back(""C-"")
    expected1.push_back(""C"")
    expected1.push_back(""A-"")
    assert_equal(numerical_letter_grade(input1), expected1)

    # Test case 2
    var input2 = DynamicVector[Float64]()
    input2.push_back(1.2)
    var expected2 = DynamicVector[String]()
    expected2.push_back(""D+"")
    assert_equal(numerical_letter_grade(input2), expected2)

    # Test case 3
    var input3 = DynamicVector[Float64]()
    input3.push_back(0.5)
    var expected3 = DynamicVector[String]()
    expected3.push_back(""D-"")
    assert_equal(numerical_letter_grade(input3), expected3)

    # Test case 4
    var input4 = DynamicVector[Float64]()
    input4.push_back(0.0)
    var expected4 = DynamicVector[String]()
    expected4.push_back(""E"")
    assert_equal(numerical_letter_grade(input4), expected4)

    # Test case 5
    var input5 = DynamicVector[Float64]()
    input5.push_back(1.0)
    input5.push_back(0.3)
    input5.push_back(1.5)
    input5.push_back(2.8)
    input5.push_back(3.3)
    var expected5 = DynamicVector[String]()
    expected5.push_back(""D"")
    expected5.push_back(""D-"")
    expected5.push_back(""C-"")
    expected5.push_back(""B"")
    expected5.push_back(""B+"")
    assert_equal(numerical_letter_grade(input5), expected5)

    # Test case 6
    var input6 = DynamicVector[Float64]()
    input6.push_back(0.0)
    input6.push_back(0.7)
    var expected6 = DynamicVector[String]()
    expected6.push_back(""E"")
    expected6.push_back(""D-"")
    assert_equal(numerical_letter_grade(input6), expected6)

    # Check some edge cases that are easy to work out by hand.
    assert_true(True)

    print(""All tests passed!"")

fn main():
    test_numerical_letter_grade()",numerical_letter_grade
HumanEval-Mojo/85,"fn add(lst: List[Int]) -> Int:
    """"""Given a non-empty list of integers lst, add the even elements that are at odd indices.

    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""","fn sum_even_values_at_odd_indices(lst: List[Int]) -> Int:
    var total: Int = 0
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            total += lst[i]
    return total","from testing import assert_equal

fn test_add():
    # Check some simple cases
    assert_equal(add([4, 88]), 88)
    assert_equal(add([4, 5, 6, 7, 2, 122]), 122)
    assert_equal(add([4, 0, 6, 7]), 0)
    assert_equal(add([4, 4, 6, 8]), 12)

    # Check some edge cases that are easy to work out by hand.
    # (You can add more edge cases here if needed)

    print(""All tests passed!"")

fn main():
    test_add()",add
HumanEval-Mojo/86,"fn anti_shuffle(s: String) -> String:
    """"""
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle(""Hi"") returns ""Hi""
    anti_shuffle(""hello"") returns ""ehllo""
    anti_shuffle(""Hello World!!!"") returns ""Hello !!!Wdlor""
    """"""","fn sort_words(s: String) -> String:
    let words = s.split()
    var sorted_words = DynamicVector[String]()
    
    for word in words:
        var chars = DynamicVector[Int8]()
        for c in word:
            chars.append(ord(c))
        chars.sort()
        var sorted_word = String("""")
        for c in chars:
            sorted_word += chr(c)
        sorted_words.append(sorted_word)
    
    return "" "".join(sorted_words)","from testing import assert_equal, assert_true
from memory.unsafe import Pointer
from python import Python

fn test_anti_shuffle():
    let py = Python()
    let anti_shuffle = py.import_module(""your_module"").anti_shuffle

    # Check some simple cases
    assert_equal(anti_shuffle(""Hi""), ""Hi"")
    assert_equal(anti_shuffle(""hello""), ""ehllo"")
    assert_equal(anti_shuffle(""number""), ""bemnru"")
    assert_equal(anti_shuffle(""abcd""), ""abcd"")
    assert_equal(anti_shuffle(""Hello World!!!""), ""Hello !!!Wdlor"")
    assert_equal(anti_shuffle(""""), """")
    assert_equal(anti_shuffle(""Hi. My name is Mister Robot. How are you?""), 
                 "".Hi My aemn is Meirst .Rboot How aer ?ouy"")
    
    # Check some edge cases that are easy to work out by hand.
    assert_true(True)

    print(""All tests passed!"")

fn main():
    test_anti_shuffle()",anti_shuffle
HumanEval-Mojo/87,"fn encrypt(s: String) -> String:
    """"""Create a function encrypt that takes a String as an argument and
    returns a String encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt(""hi"") returns ""lm""
    encrypt(""asdfghjkl"") returns ""ewhjklnop""
    encrypt(""gf"") returns ""kj""
    encrypt(""et"") returns ""ix""
    """"""","fn caesar_cipher(s: String) -> String:
    let d = ""abcdefghijklmnopqrstuvwxyz""
    var out = String()
    
    for i in range(len(s)):
        let c = s[i]
        var found = False
        
        for j in range(len(d)):
            if c == d[j]:
                let new_index = (j + 4) % 26
                out += d[new_index]
                found = True
                break
        
        if not found:
            out += c
    
    return out","from testing import assert_equal

fn test_encrypt():
    # Check some simple cases
    assert_equal(encrypt(""hi""), ""lm"", ""Test case 1 failed"")
    assert_equal(encrypt(""asdfghjkl""), ""ewhjklnop"", ""Test case 2 failed"")
    assert_equal(encrypt(""gf""), ""kj"", ""Test case 3 failed"")
    assert_equal(encrypt(""et""), ""ix"", ""Test case 4 failed"")

    assert_equal(encrypt(""faewfawefaewg""), ""jeiajeaijeiak"", ""Test case 5 failed"")
    assert_equal(encrypt(""hellomyfriend""), ""lippsqcjvmirh"", ""Test case 6 failed"")
    assert_equal(encrypt(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""), ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"", ""Test case 7 failed"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(encrypt(""a""), ""e"", ""Test case 8 failed"")

fn main():
    test_encrypt()
    print(""All tests passed!"")",encrypt
HumanEval-Mojo/88,"fn sort_array(array: DynamicVector[Int]) -> DynamicVector[Int]:
    """"""
    Given a DynamicVector of non-negative integers, return a copy of the given vector after sorting,
    you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given vector.

    Examples:
    * sort_array(DynamicVector[Int]()) => DynamicVector[Int]()
    * sort_array(DynamicVector[Int](5)) => DynamicVector[Int](5)
    * sort_array(DynamicVector[Int](2, 4, 3, 0, 1, 5)) => DynamicVector[Int](0, 1, 2, 3, 4, 5)
    * sort_array(DynamicVector[Int](2, 4, 3, 0, 1, 5, 6)) => DynamicVector[Int](6, 5, 4, 3, 2, 1, 0)
    """"""","from python import Python

fn sort_array(array: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    
    if array.__len__() == 0:
        return py.list()
    else:
        let first_element = array.__getitem__(0)
        let last_element = array.__getitem__(-1)
        let is_reverse = ((first_element + last_element) % 2) == 0
        return py.sorted(array, reverse=is_reverse)

fn main() raises:
    let py = Python.import_module(""builtins"")
    let test_array = py.list([3, 1, 2, 4])
    let result = sort_array(test_array)
    print(result)","from testing import assert_equal, assert_true
from collections import DynamicVector

fn sort_array(inout arr: DynamicVector[Int]) -> DynamicVector[Int]:
    # Assuming the sort_array function is implemented elsewhere
    # This is just a placeholder
    return arr

fn test_sort_array():
    print(""Running tests for sort_array..."")

    # Check some simple cases
    assert_true(True, ""This prints if this assert fails 1 (good for debugging!)"")
    
    var empty = DynamicVector[Int]()
    assert_equal(sort_array(empty), DynamicVector[Int](), ""Error: Empty array test failed"")
    
    var single = DynamicVector[Int]([5])
    assert_equal(sort_array(single), DynamicVector[Int]([5]), ""Error: Single element array test failed"")
    
    var arr1 = DynamicVector[Int]([2, 4, 3, 0, 1, 5])
    assert_equal(sort_array(arr1), DynamicVector[Int]([0, 1, 2, 3, 4, 5]), ""Error: Ascending order test failed"")
    
    var arr2 = DynamicVector[Int]([2, 4, 3, 0, 1, 5, 6])
    assert_equal(sort_array(arr2), DynamicVector[Int]([6, 5, 4, 3, 2, 1, 0]), ""Error: Descending order test failed"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")
    
    var arr3 = DynamicVector[Int]([2, 1])
    assert_equal(sort_array(arr3), DynamicVector[Int]([1, 2]), ""Error: Two element array test failed"")
    
    var arr4 = DynamicVector[Int]([15, 42, 87, 32, 11, 0])
    assert_equal(sort_array(arr4), DynamicVector[Int]([0, 11, 15, 32, 42, 87]), ""Error: Mixed order array test failed"")
    
    var arr5 = DynamicVector[Int]([21, 14, 23, 11])
    assert_equal(sort_array(arr5), DynamicVector[Int]([23, 21, 14, 11]), ""Error: Descending order test failed"")

    print(""All tests passed!"")

fn main():
    test_sort_array()",sort_array
HumanEval-Mojo/89,"fn get_row(lst: List[List[Int]], x: Int) -> List[Tuple[Int, Int]]:
    """"""
    You are given a 2 dimensional data structure, as a nested list of lists,
    which is similar to a matrix. However, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return a list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, column), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""","from python import Python

fn find_and_sort_coords(lst: PythonObject, x: PythonObject) -> PythonObject:
    let py = Python.import_module(""builtins"")
    let itertools = Python.import_module(""itertools"")
    let functools = Python.import_module(""functools"")
    
    let enumerate = py.enumerate
    let filter = py.filter
    let sorted = py.sorted
    let lambda_ = py.eval(""lambda"")
    
    let coords = itertools.chain.from_iterable(
        filter(
            lambda item: item[1][1] == x,
            enumerate(
                itertools.chain.from_iterable(
                    enumerate(row) for row in lst
                )
            )
        )
    )
    
    let key1 = lambda_.__call__(""lambda x: (-x[0], -x[1][0])"")
    let sorted_coords = sorted(coords, key=key1)
    
    return py.list(sorted_coords)

fn main():
    let py = Python.import_module(""builtins"")
    let lst = py.list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    let x = 5
    
    let result = find_and_sort_coords(lst, x)
    print(result)","from testing import assert_equal, assert_true
from collections.vector import DynamicVector

fn test_get_row():
    # Test case 1
    var input1 = DynamicVector[DynamicVector[Int]]()
    input1.push_back(DynamicVector[Int]([1,2,3,4,5,6]))
    input1.push_back(DynamicVector[Int]([1,2,3,4,1,6]))
    input1.push_back(DynamicVector[Int]([1,2,3,4,5,1]))
    
    var expected1 = DynamicVector[Tuple[Int, Int]]()
    expected1.push_back((0, 0))
    expected1.push_back((1, 4))
    expected1.push_back((1, 0))
    expected1.push_back((2, 5))
    expected1.push_back((2, 0))
    
    assert_equal(get_row(input1, 1), expected1)

    # Test case 2
    var input2 = DynamicVector[DynamicVector[Int]]()
    for i in range(6):
        input2.push_back(DynamicVector[Int]([1,2,3,4,5,6]))
    
    var expected2 = DynamicVector[Tuple[Int, Int]]()
    for i in range(6):
        expected2.push_back((i, 1))
    
    assert_equal(get_row(input2, 2), expected2)

    # Test case 3
    var input3 = DynamicVector[DynamicVector[Int]]()
    input3.push_back(DynamicVector[Int]([1,2,3,4,5,6]))
    input3.push_back(DynamicVector[Int]([1,2,3,4,5,6]))
    input3.push_back(DynamicVector[Int]([1,1,3,4,5,6]))
    input3.push_back(DynamicVector[Int]([1,2,1,4,5,6]))
    input3.push_back(DynamicVector[Int]([1,2,3,1,5,6]))
    input3.push_back(DynamicVector[Int]([1,2,3,4,1,6]))
    input3.push_back(DynamicVector[Int]([1,2,3,4,5,1]))
    
    var expected3 = DynamicVector[Tuple[Int, Int]]()
    expected3.push_back((0, 0))
    expected3.push_back((1, 0))
    expected3.push_back((2, 1))
    expected3.push_back((2, 0))
    expected3.push_back((3, 2))
    expected3.push_back((3, 0))
    expected3.push_back((4, 3))
    expected3.push_back((4, 0))
    expected3.push_back((5, 4))
    expected3.push_back((5, 0))
    expected3.push_back((6, 5))
    expected3.push_back((6, 0))
    
    assert_equal(get_row(input3, 1), expected3)

    # Test case 4
    var input4 = DynamicVector[DynamicVector[Int]]()
    assert_equal(get_row(input4, 1), DynamicVector[Tuple[Int, Int]]())

    # Test case 5
    var input5 = DynamicVector[DynamicVector[Int]]()
    input5.push_back(DynamicVector[Int]([1]))
    assert_equal(get_row(input5, 2), DynamicVector[Tuple[Int, Int]]())

    # Test case 6
    var input6 = DynamicVector[DynamicVector[Int]]()
    input6.push_back(DynamicVector[Int",get_row
HumanEval-Mojo/90,"fn is_bored(S: String) -> Int:
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> let result1 = is_bored(""Hello world"")
    >>> print(result1)
    0
    >>> let result2 = is_bored(""The sky is blue. The sun is shining. I love this weather"")
    >>> print(result2)
    1
    """"""","from python import Python
from python.object import PythonObject

fn count_sentences_starting_with_i(S: String) raises -> Int:
    let re = Python.import_module(""re"")
    let sentences = re.split(PythonObject(""[.?!]\\s*""), S)
    
    var count: Int = 0
    for sentence in sentences:
        let str_sentence = String(sentence)
        if str_sentence.startswith(""I ""):
            count += 1
    
    return count","from testing import assert_equal, assert_true
from sys import stderr

fn test_is_bored():
    # Check some simple cases
    assert_equal(is_bored(""Hello world""), 0, ""Test 1"")
    assert_equal(is_bored(""Is the sky blue?""), 0, ""Test 2"")
    assert_equal(is_bored(""I love It !""), 1, ""Test 3"")
    assert_equal(is_bored(""bIt""), 0, ""Test 4"")
    assert_equal(is_bored(""I feel good today. I will be productive. will kill It""), 2, ""Test 5"")
    assert_equal(is_bored(""You and I are going for a walk""), 0, ""Test 6"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")

    print(""All tests passed!"", file=stderr)

fn main():
    test_is_bored()",is_bored
HumanEval-Mojo/91,"fn next_smallest(lst: List[Int]) -> Optional[Int]:
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""","from python import Python

fn find_second_smallest(lst: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    let sorted_func = py.get_attr(""sorted"")
    let set_func = py.get_attr(""set"")
    
    let unique_sorted = sorted_func(set_func(lst))
    let length = py.get_attr(""len"")(unique_sorted)
    
    if length.to_float64() < 2:
        return py.get_attr(""None"")
    else:
        return unique_sorted[1]","from testing import assert_equal, assert_true
from sys.info import type_id

fn test_next_smallest():
    # Check some simple cases
    assert_equal(next_smallest([1, 2, 3, 4, 5]), 2)
    assert_equal(next_smallest([5, 1, 4, 3, 2]), 2)
    assert_equal(type_id(next_smallest([])), type_id(None))
    assert_equal(type_id(next_smallest([1, 1])), type_id(None))
    assert_equal(next_smallest([1, 1, 1, 1, 0]), 1)
    assert_equal(type_id(next_smallest([1, 1])), type_id(None))  # 0**0 is 1 in Python, so we keep [1, 1]
    assert_equal(next_smallest([-35, 34, 12, -45]), -35)

    # Check some edge cases that are easy to work out by hand.
    assert_true(True)

fn main():
    test_next_smallest()
    print(""All tests passed!"")",next_smallest
HumanEval-Mojo/92,"fn encode(message: String) -> String:
    """"""
    Write a function that takes a message, and encodes it in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the English alphabet. 
    Assume only letters. 
    
    Examples:
    >>> let result1 = encode(""test"")
    >>> print(result1)
    TGST
    >>> let result2 = encode(""This is a message"")
    >>> print(result2)
    tHKS KS C MGSSCGG
    """"""","from python import Python

fn replace_vowels(message: String) raises -> String:
    let py = Python.import_module(""builtins"")
    let vowels = ""aeiouAEIOU""
    var vowels_replace = Dict[String, String]()
    
    for i in range(len(vowels)):
        let char = vowels[i]
        let new_char = chr(ord(char) + 2)
        vowels_replace[char] = new_char
    
    var result = String()
    let swapped_message = py.swapcase(message)
    
    for char in swapped_message:
        if vowels.contains(char):
            result += vowels_replace[char]
        else:
            result += char
    
    return result

fn main() raises:
    let message = ""Hello, World!""
    let result = replace_vowels(message)
    print(result)","from testing import assert_equal

fn test_encode():
    # Check some simple cases
    assert_equal(encode(""TEST""), ""tgst"", ""Failed: Simple case 1"")
    assert_equal(encode(""Mudasir""), ""mWDCSKR"", ""Failed: Simple case 2"")
    assert_equal(encode(""YES""), ""ygs"", ""Failed: Simple case 3"")
    
    # Check some edge cases that are easy to work out by hand
    assert_equal(encode(""This is a message""), ""tHKS KS C MGSSCGG"", ""Failed: Edge case 1"")
    assert_equal(encode(""I DoNt KnOw WhAt tO WrItE""), ""k dQnT kNqW wHcT Tq wRkTg"", ""Failed: Edge case 2"")

    print(""All tests passed!"")

fn main():
    test_encode()",encode
HumanEval-Mojo/93,"fn any_int(x: Int, y: Int, z: Int) -> Bool:
    '''
    Create a function that takes 3 integers.
    Returns true if one of the numbers is equal to the sum of the other two.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) â -> True
    
    any_int(3, 2, 2) â -> False

    any_int(3, -2, 1) â -> True
    
    Note: In Mojo, we don't need to check if the numbers are integers
    as the function signature ensures they are of type Int.
    
    '''","fn two_sum_one(x: Int, y: Int, z: Int) -> Bool:
    if x + y == z or x + z == y or y + z == x:
        return True
    return False

fn main():
    let result = two_sum_one(1, 2, 3)
    print(result)","from testing import assert_true, assert_false

fn test_any_int():
    # Check some simple cases
    assert_true(any_int(2, 3, 1), ""This prints if this assert fails 1 (good for debugging!)"")
    assert_false(any_int(2.5, 2, 3), ""This prints if this assert fails 2 (good for debugging!)"")
    assert_false(any_int(1.5, 5, 3.5), ""This prints if this assert fails 3 (good for debugging!)"")
    assert_false(any_int(2, 6, 2), ""This prints if this assert fails 4 (good for debugging!)"")
    assert_true(any_int(4, 2, 2), ""This prints if this assert fails 5 (good for debugging!)"")
    assert_false(any_int(2.2, 2.2, 2.2), ""This prints if this assert fails 6 (good for debugging!)"")
    assert_true(any_int(-4, 6, 2), ""This prints if this assert fails 7 (good for debugging!)"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(any_int(2, 1, 1), ""This prints if this assert fails 8 (also good for debugging!)"")
    assert_true(any_int(3, 4, 7), ""This prints if this assert fails 9 (also good for debugging!)"")
    assert_false(any_int(3.0, 4, 7), ""This prints if this assert fails 10 (also good for debugging!)"")

fn main():
    test_any_int()
    print(""All tests passed!"")",any_int
HumanEval-Mojo/94,"fn skjkasdkd(lst: List[Int]) -> Int:
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""","fn isPrime(n: Int) -> Bool:
    var i: Int = 2
    while i * i <= n:
        if n % i == 0:
            return False
        i += 1
    return True

fn findLargestPrimeAndSumDigits(lst: DynamicVector[Int]) -> Int:
    var maxx: Int = 0
    for i in range(len(lst)):
        if lst[i] > maxx and isPrime(lst[i]):
            maxx = lst[i]
    
    var result: Int = 0
    var num: Int = maxx
    while num > 0:
        result += num % 10
        num //= 10
    
    return result

fn main():
    var lst = DynamicVector[Int]()
    lst.push_back(3)
    lst.push_back(7)
    lst.push_back(11)
    lst.push_back(13)
    lst.push_back(17)
    
    let result = findLargestPrimeAndSumDigits(lst)
    print(result)","from testing import assert_equal

fn test_skjkasdkd():
    # Check some simple cases
    assert_equal(
        skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]), 
        10, 
        ""Test case 1 failed""
    )

    # Check some edge cases that are easy to work out by hand
    assert_equal(
        skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]), 
        25, 
        ""Test case 2 failed""
    )

    assert_equal(
        skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]), 
        13, 
        ""Test case 3 failed""
    )

    assert_equal(
        skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]), 
        11, 
        ""Test case 4 failed""
    )

    assert_equal(
        skjkasdkd([0,81,12,3,1,21]), 
        3, 
        ""Test case 5 failed""
    )

    assert_equal(
        skjkasdkd([0,8,1,2,1,7]), 
        7, 
        ""Test case 6 failed""
    )

    assert_equal(
        skjkasdkd([8191]), 
        19, 
        ""Test case 7 failed""
    )

    assert_equal(
        skjkasdkd([8191, 123456, 127, 7]), 
        19, 
        ""Test case 8 failed""
    )

    assert_equal(
        skjkasdkd([127, 97, 8192]), 
        10, 
        ""Test case 9 failed""
    )

    print(""All test cases passed!"")

fn main():
    test_skjkasdkd()",skjkasdkd
HumanEval-Mojo/95,"fn multiply(a: Int, b: Int) -> Int:
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""","fn multiply_last_digits(a: Int, b: Int) -> Int:
    let last_digit_a = abs(a % 10)
    let last_digit_b = abs(b % 10)
    return last_digit_a * last_digit_b","from testing import assert_equal

fn test_multiply():
    # Check some simple cases
    assert_equal(multiply(148, 412), 16, ""First test error"")
    assert_equal(multiply(19, 28), 72, ""Second test error"")
    assert_equal(multiply(2020, 1851), 0, ""Third test error"")
    assert_equal(multiply(14, -15), 20, ""Fourth test error"")
    assert_equal(multiply(76, 67), 42, ""Fifth test error"")
    assert_equal(multiply(17, 27), 49, ""Sixth test error"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(multiply(0, 1), 0, ""1st edge test error"")
    assert_equal(multiply(0, 0), 0, ""2nd edge test error"")

    print(""All tests passed!"")

fn main():
    test_multiply()",multiply
HumanEval-Mojo/96,"fn count_upper(s: String) -> Int:
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper(""aBCdEf"") returns 1
    count_upper(""abcdefg"") returns 0
    count_upper(""dBBE"") returns 0
    """"""","fn count_vowels(s: String) -> Int:
    var count: Int = 0
    let vowels: String = ""AEIOU""
    
    for i in range(0, len(s), 2):
        if i < len(s):
            let char: String = s[i]
            if vowels.contains(char):
                count += 1
    
    return count","from testing import assert_equal, assert_true
from sys.info import simdwidthof

fn test_count_upper():
    # Check some simple cases
    assert_equal(count_upper(""aBCdEf""), 1)
    assert_equal(count_upper(""abcdefg""), 0)
    assert_equal(count_upper(""dBBE""), 0)
    assert_equal(count_upper(""B""), 0)
    assert_equal(count_upper(""U""), 1)
    assert_equal(count_upper(""""), 0)
    assert_equal(count_upper(""EEEE""), 2)

    # Check some edge cases that are easy to work out by hand.
    assert_true(True)

    print(""All tests passed!"")

fn main():
    test_count_upper()",count_upper
HumanEval-Mojo/97,"fn closest_integer(value: String) -> Int:
    """"""
    Create a function that takes a value (String) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples:
    let result1 = closest_integer(""10"")
    print(result1)  # Output: 10

    let result2 = closest_integer(""15.3"")
    print(result2)  # Output: 15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example, closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    """"""","from math import floor, ceil

fn round_to_nearest_integer(value: String) raises -> Int64:
    var modified_value = value

    if modified_value.count('.') == 1:
        while modified_value.ends_with('0'):
            modified_value = modified_value[:-1]

    let num = Float64(modified_value)
    var res: Int64

    if modified_value.ends_with('.5'):
        if num > 0:
            res = Int64(ceil(num))
        else:
            res = Int64(floor(num))
    elif len(modified_value) > 0:
        res = Int64(round(num))
    else:
        res = 0

    return res

fn main() raises:
    let test_value = ""3.5""
    let result = round_to_nearest_integer(test_value)
    print(result)","from testing import assert_equal

fn test_closest_integer():
    # Check some simple cases
    assert_equal(closest_integer(""10""), 10, ""Test 1"")
    assert_equal(closest_integer(""14.5""), 15, ""Test 2"")
    assert_equal(closest_integer(""-15.5""), -16, ""Test 3"")
    assert_equal(closest_integer(""15.3""), 15, ""Test 4"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(closest_integer(""0""), 0, ""Test 0"")

    print(""All tests passed!"")

fn main():
    test_closest_integer()",closest_integer
HumanEval-Mojo/98,"fn check_dict_case(dict: Dict[String, String]) -> Bool:
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False if the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", ""8"":""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""","fn check_dict_keys(dict: Dict[String, AnyType]) raises -> Bool:
    if dict.keys().len() == 0:
        return False
    
    var state: String = ""start""
    
    for key in dict.keys():
        if not isinstance(key, String):
            state = ""mixed""
            break
        
        let key_str: String = key.to_string()
        
        if state == ""start"":
            if key_str.isupper():
                state = ""upper""
            elif key_str.islower():
                state = ""lower""
            else:
                break
        elif (state == ""upper"" and not key_str.isupper()) or (state == ""lower"" and not key_str.islower()):
            state = ""mixed""
            break
        else:
            break
    
    return state == ""upper"" or state == ""lower""","from testing import assert_equal, assert_true, assert_false
from collections import Dict

fn check_dict_case(d: Dict[String, String]) -> Bool:
    # Implement the function here
    # For this example, we'll assume it's implemented correctly
    return True  # Placeholder

fn test_check_dict_case():
    print(""Running tests for check_dict_case..."")

    # Check some simple cases
    assert_true(check_dict_case(Dict[String, String]{""p"": ""pineapple"", ""b"": ""banana""}), 
                ""First test error"")
    
    assert_false(check_dict_case(Dict[String, String]{""p"": ""pineapple"", ""A"": ""banana"", ""B"": ""banana""}), 
                 ""Second test error"")
    
    # Note: Mojo doesn't support mixing types in Dict, so we'll use String for all values
    assert_false(check_dict_case(Dict[String, String]{""p"": ""pineapple"", ""5"": ""banana"", ""a"": ""apple""}), 
                 ""Third test error"")
    
    assert_false(check_dict_case(Dict[String, String]{""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""}), 
                 ""Fourth test error"")
    
    assert_true(check_dict_case(Dict[String, String]{""STATE"": ""NC"", ""ZIP"": ""12345""}), 
                ""Fifth test error"")
    
    assert_true(check_dict_case(Dict[String, String]{""fruit"": ""Orange"", ""taste"": ""Sweet""}), 
                ""Sixth test error"")

    # Check edge case
    assert_false(check_dict_case(Dict[String, String]{}), 
                 ""Edge case test error"")

    print(""All tests passed!"")

fn main():
    test_check_dict_case()",check_dict_case
HumanEval-Mojo/99,"fn count_up_to(n: Int) -> DynamicVector[Int]:
    """"""Implement a function that takes a non-negative integer and returns a DynamicVector of the first n
    integers that are prime numbers and less than n.
    For example:
    count_up_to(5) => DynamicVector[2,3]
    count_up_to(11) => DynamicVector[2,3,5,7]
    count_up_to(0) => DynamicVector[]
    count_up_to(20) => DynamicVector[2,3,5,7,11,13,17,19]
    count_up_to(1) => DynamicVector[]
    count_up_to(18) => DynamicVector[2,3,5,7,11,13,17]
    """"""","from python import Python

fn is_prime(n: Int) -> Bool:
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

fn generate_primes(n: Int) -> PythonObject:
    let py = Python.import_module(""builtins"")
    var primes = py.list()
    
    for i in range(2, n):
        if is_prime(i):
            _ = primes.append(i)
    
    return primes

fn main():
    let n = 20
    let result = generate_primes(n)
    print(result)","from testing import assert_equal
from collections.vector import DynamicVector

fn test_count_up_to():
    # Test case 1
    var result1 = count_up_to(5)
    assert_equal(result1, DynamicVector[Int]([2, 3]))

    # Test case 2
    var result2 = count_up_to(6)
    assert_equal(result2, DynamicVector[Int]([2, 3, 5]))

    # Test case 3
    var result3 = count_up_to(7)
    assert_equal(result3, DynamicVector[Int]([2, 3, 5]))

    # Test case 4
    var result4 = count_up_to(10)
    assert_equal(result4, DynamicVector[Int]([2, 3, 5, 7]))

    # Test case 5
    var result5 = count_up_to(0)
    assert_equal(result5, DynamicVector[Int]([]))

    # Test case 6
    var result6 = count_up_to(22)
    assert_equal(result6, DynamicVector[Int]([2, 3, 5, 7, 11, 13, 17, 19]))

    # Test case 7
    var result7 = count_up_to(1)
    assert_equal(result7, DynamicVector[Int]([]))

    # Test case 8
    var result8 = count_up_to(18)
    assert_equal(result8, DynamicVector[Int]([2, 3, 5, 7, 11, 13, 17]))

    # Test case 9
    var result9 = count_up_to(47)
    assert_equal(result9, DynamicVector[Int]([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]))

    # Test case 10
    var result10 = count_up_to(101)
    assert_equal(result10, DynamicVector[Int]([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]))

    print(""All test cases passed!"")

fn main():
    test_count_up_to()",count_up_to
HumanEval-Mojo/100,"fn choose_num(x: Int, y: Int) -> Int:
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""","fn process(x: Int, y: Int) -> Int:
    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1","from testing import assert_equal

fn test_choose_num():
    # Check some simple cases
    assert_equal(choose_num(12, 15), 14)
    assert_equal(choose_num(13, 12), -1)
    assert_equal(choose_num(33, 12354), 12354)
    assert_equal(choose_num(5234, 5233), -1)
    assert_equal(choose_num(6, 29), 28)
    assert_equal(choose_num(27, 10), -1)

    # Check some edge cases that are easy to work out by hand.
    assert_equal(choose_num(7, 7), -1)
    assert_equal(choose_num(546, 546), 546)

    print(""All tests passed!"")

fn main():
    test_choose_num()",choose_num
HumanEval-Mojo/101,"fn make_a_pile(n: Int) -> DynamicVector[Int]:
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a DynamicVector, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> let result = make_a_pile(3)
    >>> print(result)  # Should output: [3, 5, 7]
    """"""","fn generate_sequence(n: Int) -> DynamicVector[Int]:
    var result = DynamicVector[Int]()
    for i in range(n):
        result.append(n + 2 * i)
    return result","from testing import assert_equal, assert_true
from collections.vector import DynamicVector

fn test_make_a_pile():
    # Test case 1
    let result1 = make_a_pile(3)
    let expected1 = DynamicVector[Int]([3, 5, 7])
    assert_equal(result1, expected1, ""Test 3"")

    # Test case 2
    let result2 = make_a_pile(4)
    let expected2 = DynamicVector[Int]([4, 6, 8, 10])
    assert_equal(result2, expected2, ""Test 4"")

    # Test case 3
    let result3 = make_a_pile(5)
    let expected3 = DynamicVector[Int]([5, 7, 9, 11, 13])
    assert_equal(result3, expected3, ""Test 5"")

    # Test case 4
    let result4 = make_a_pile(6)
    let expected4 = DynamicVector[Int]([6, 8, 10, 12, 14, 16])
    assert_equal(result4, expected4, ""Test 6"")

    # Test case 5
    let result5 = make_a_pile(8)
    let expected5 = DynamicVector[Int]([8, 10, 12, 14, 16, 18, 20, 22])
    assert_equal(result5, expected5, ""Test 8"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")

fn main():
    test_make_a_pile()
    print(""All tests passed!"")",make_a_pile
HumanEval-Mojo/102,"fn unique_digits(x: List[Int]) -> List[Int]:
    """"""Given a list of positive integers x, return a sorted list of all 
    elements that don't have any even digits.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""","fn is_all_odd_digits(num: Int) -> Bool:
    var n = num
    while n > 0:
        if (n % 10) % 2 == 0:
            return False
        n //= 10
    return True

fn odd_digit_elements(x: DynamicVector[Int]) -> DynamicVector[Int]:
    var result = DynamicVector[Int]()
    for i in range(len(x)):
        if is_all_odd_digits(x[i]):
            result.append(x[i])
    
    let sorted_result = result.sorted()
    return sorted_result","from testing import assert_equal, assert_true
from collections import List

fn test_unique_digits():
    # Check some simple cases
    assert_equal(unique_digits([15, 33, 1422, 1]), [1, 15, 33])
    assert_equal(unique_digits([152, 323, 1422, 10]), [])
    assert_equal(unique_digits([12345, 2033, 111, 151]), [111, 151])
    assert_equal(unique_digits([135, 103, 31]), [31, 135])

    # Check some edge cases that are easy to work out by hand.
    assert_true(True)

fn main():
    test_unique_digits()
    print(""All tests passed!"")",unique_digits
HumanEval-Mojo/103,"fn rounded_avg(n: Int, m: Int) -> String:
    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return ""-1"".
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => ""-1""
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""","fn calculate_binary_average(m: Int, n: Int) raises -> String:
    if m < n:
        raise Error(""m must be greater than or equal to n"")
    
    let range_size = m - n + 1
    var summation: Int = 0
    
    for i in range(n, m + 1):
        summation += i
    
    let average = Float64(summation) / Float64(range_size)
    let rounded_average = round(average).to_int()
    return bin(rounded_average)","from testing import assert_equal, assert_true
from sys.info import simdwidthof

fn test_rounded_avg():
    print(""Running tests for rounded_avg..."")

    # Check some simple cases
    assert_equal(rounded_avg(1, 5), ""0b11"")
    assert_equal(rounded_avg(7, 13), ""0b1010"")
    assert_equal(rounded_avg(964, 977), ""0b1111001010"")
    assert_equal(rounded_avg(996, 997), ""0b1111100100"")
    assert_equal(rounded_avg(560, 851), ""0b1011000010"")
    assert_equal(rounded_avg(185, 546), ""0b101101110"")
    assert_equal(rounded_avg(362, 496), ""0b110101101"")
    assert_equal(rounded_avg(350, 902), ""0b1001110010"")
    assert_equal(rounded_avg(197, 233), ""0b11010111"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(rounded_avg(7, 5), ""-1"")
    assert_equal(rounded_avg(5, 1), ""-1"")
    assert_equal(rounded_avg(5, 5), ""0b101"")

    print(""All tests passed!"")

fn main():
    test_rounded_avg()",rounded_avg
HumanEval-Mojo/104,"fn words_string(s: String) -> PythonObject:
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return a PythonObject (list) of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""","from python import Python

fn process_string(s: String) raises -> PythonObject:
    if s.count() == 0:
        return Python.list()
    
    var s_list = String()
    
    for i in range(s.count()):
        let letter = s[i]
        if letter == ',':
            s_list += ' '
        else:
            s_list += letter
    
    let py_string = Python.str(s_list)
    return py_string.split()

fn main() raises:
    let input_string = ""Hello,World,Mojo""
    let result = process_string(input_string)
    print(result)","from testing import assert_equal, assert_true
from collections import DynamicVector

fn test_words_string():
    print(""Running tests for words_string..."")

    # Check some simple cases
    assert_true(True, ""This prints if this assert fails 1 (good for debugging!)"")
    assert_equal(words_string(""Hi, my name is John""), [""Hi"", ""my"", ""name"", ""is"", ""John""])
    assert_equal(words_string(""One, two, three, four, five, six""), [""One"", ""two"", ""three"", ""four"", ""five"", ""six""])
    assert_equal(words_string(""Hi, my name""), [""Hi"", ""my"", ""name""])
    assert_equal(words_string(""One,, two, three, four, five, six,""), [""One"", ""two"", ""three"", ""four"", ""five"", ""six""])

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")
    assert_equal(words_string(""""), [])
    assert_equal(words_string(""ahmed     , gamal""), [""ahmed"", ""gamal""])

    print(""All tests passed!"")

fn main():
    test_words_string()

fn words_string(s: String) -> DynamicVector[String]:
    # Implement the words_string function here
    # This is just a placeholder implementation
    let result = DynamicVector[String]()
    # Add your implementation here
    return result",words_string
HumanEval-Mojo/105,"fn f(n: Int) -> DynamicVector[Int]:
    """""" Implement the function f that takes n as a parameter,
    and returns a DynamicVector of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == DynamicVector[Int]([1, 2, 6, 24, 15])
    """"""","from python import Python

fn calculate_sequence(n: Int) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    var ret = py.list()
    
    for i in range(1, n + 1):
        if i % 2 == 0:
            var x: Int64 = 1
            for j in range(1, i + 1):
                x *= j
            ret.append(x)
        else:
            var x: Int64 = 0
            for j in range(1, i + 1):
                x += j
            ret.append(x)
    
    return ret

fn main() raises:
    let n = 5
    let result = calculate_sequence(n)
    print(result)","from testing import assert_equal

fn f(n: Int) -> List[Int]:
    # Assume this function is implemented elsewhere
    # It should return the list as per the test cases

fn test_f():
    print(""Testing function f..."")
    
    # Test case 1
    assert_equal(f(5), [1, 2, 6, 24, 15])
    
    # Test case 2
    assert_equal(f(7), [1, 2, 6, 24, 15, 720, 28])
    
    # Test case 3
    assert_equal(f(1), [1])
    
    # Test case 4
    assert_equal(f(3), [1, 2, 6])
    
    print(""All tests passed!"")

fn main():
    test_f()",f
HumanEval-Mojo/106,"fn even_odd_palindrome(n: Int) -> (Int, Int):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""","from python import Python

fn is_palindrome(n: Int) raises -> Bool:
    let py = Python.import_module(""builtins"")
    let str_n = py.str(n)
    return str_n == str_n[::-1]

fn count_palindromes(n: Int) raises -> (Int, Int):
    var even_palindrome_count: Int = 0
    var odd_palindrome_count: Int = 0

    for i in range(1, n + 1):
        if i % 2 == 1 and is_palindrome(i):
            odd_palindrome_count += 1
        elif i % 2 == 0 and is_palindrome(i):
            even_palindrome_count += 1

    return (even_palindrome_count, odd_palindrome_count)","from testing import assert_equal

fn test_even_odd_palindrome():
    # Check some simple cases
    assert_equal(even_odd_palindrome(123), (8, 13))
    assert_equal(even_odd_palindrome(12), (4, 6))
    assert_equal(even_odd_palindrome(3), (1, 2))
    assert_equal(even_odd_palindrome(63), (6, 8))
    assert_equal(even_odd_palindrome(25), (5, 6))
    assert_equal(even_odd_palindrome(19), (4, 6))
    assert_equal(even_odd_palindrome(9), (4, 5), ""This prints if this assert fails 1 (good for debugging!)"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(even_odd_palindrome(1), (0, 1), ""This prints if this assert fails 2 (also good for debugging!)"")

    print(""All tests passed!"")

fn main():
    test_even_odd_palindrome()",even_odd_palindrome
HumanEval-Mojo/107,"fn move_one_ball(arr: DynamicVector[Int]) -> Bool:
    """"""We have a DynamicVector 'arr' of N integers arr[0], arr[1], ..., arr[N-1]. The
    numbers in the vector will be randomly ordered. Your task is to determine if
    it is possible to get a vector sorted in non-decreasing order by performing 
    the following operation on the given vector:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the vector by one
    position in the right direction. The last element of the vector will be moved to
    the starting position in the vector i.e. 0th index. 

    If it is possible to obtain the sorted vector by performing the above operation
    then return True else return False.
    If the given vector is empty then return True.

    Note: The given vector is guaranteed to have unique elements.

    For Example:
    
    move_one_ball(DynamicVector[Int]([3, 4, 5, 1, 2])) ==> True
    Explanation: By performing 2 right shift operations, non-decreasing order can
                 be achieved for the given vector.
    move_one_ball(DynamicVector[Int]([3, 5, 4, 1, 2])) ==> False
    Explanation: It is not possible to get non-decreasing order for the given
                 vector by performing any number of right shift operations.
                
    """"""","from python import Python

fn is_sorted_rotated(arr: PythonObject) -> Bool:
    let py = Python.import_module(""builtins"")
    
    if py.len(arr) == 0:
        return True
    
    let sorted_array = py.sorted(arr)
    var my_arr = PythonObject()
    
    let min_value = py.min(arr)
    let min_index = arr.index(min_value)
    my_arr = arr[min_index:] + arr[:min_index]
    
    for i in range(py.len(arr)):
        if my_arr[i] != sorted_array[i]:
            return False
    
    return True

fn main():
    let py = Python.import_module(""builtins"")
    let test_arr = py.list([3, 4, 5, 1, 2])
    let result = is_sorted_rotated(test_arr)
    print(result)","from testing import assert_true, assert_false

fn test_move_one_ball():
    # Check some simple cases
    assert_true(move_one_ball([3, 4, 5, 1, 2]), ""Test case 1 failed"")
    assert_true(move_one_ball([3, 5, 10, 1, 2]), ""Test case 2 failed"")
    assert_false(move_one_ball([4, 3, 1, 2]), ""Test case 3 failed"")
    
    # Check some edge cases that are easy to work out by hand
    assert_false(move_one_ball([3, 5, 4, 1, 2]), ""Test case 4 failed"")
    assert_true(move_one_ball([]), ""Test case 5 failed"")

fn main():
    test_move_one_ball()
    print(""All tests passed!"")",move_one_ball
HumanEval-Mojo/108,"fn count_nums(arr: DynamicVector[Int]) -> Int:
    """"""
    Write a function count_nums which takes a DynamicVector of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    
    Example usage:
    let empty = DynamicVector[Int]()
    assert(count_nums(empty) == 0)
    
    let vec1 = DynamicVector[Int]()
    vec1.push_back(-1)
    vec1.push_back(11)
    vec1.push_back(-11)
    assert(count_nums(vec1) == 1)
    
    let vec2 = DynamicVector[Int]()
    vec2.push_back(1)
    vec2.push_back(1)
    vec2.push_back(2)
    assert(count_nums(vec2) == 3)
    """"""","from python import Python

fn digits_sum(n: Int) -> Int:
    var neg: Int = 1
    var num: Int = n
    if num < 0:
        num = -1 * num
        neg = -1
    
    let py = Python.import_module(""builtins"")
    let str_num = py.str(num)
    var digits = py.list()
    
    for i in range(len(str_num)):
        let digit = py.int(str_num[i])
        if i == 0:
            digits.append(digit * neg)
        else:
            digits.append(digit)
    
    return py.sum(digits)

fn count_positive_digit_sums(arr: PythonObject) -> Int:
    var count: Int = 0
    for i in range(len(arr)):
        let sum = digits_sum(arr[i].to_int())
        if sum > 0:
            count += 1
    return count

fn main():
    let py = Python.import_module(""builtins"")
    let arr = py.list([12, -17, 14, 3, -18, 5, 0])
    let result = count_positive_digit_sums(arr)
    print(result)","from testing import assert_equal, assert_true
from sys.intrinsics import _Bool

fn count_nums(nums: DynamicVector[Int]) -> Int:
    # Assuming the implementation of count_nums is defined elsewhere
    # This is just a placeholder
    return 0

fn test_count_nums():
    # Check some simple cases
    assert_equal(count_nums([]), 0)
    assert_equal(count_nums([-1, -2, 0]), 0)
    assert_equal(count_nums([1, 1, 2, -2, 3, 4, 5]), 6)
    assert_equal(count_nums([1, 6, 9, -6, 0, 1, 5]), 5)
    assert_equal(count_nums([1, 100, 98, -7, 1, -1]), 4)
    assert_equal(count_nums([12, 23, 34, -45, -56, 0]), 5)
    assert_equal(count_nums([0, 1]), 1)  # Mojo doesn't have ** operator, so we use 1 instead of 1**0
    assert_equal(count_nums([1]), 1)

    # Check some edge cases that are easy to work out by hand.
    assert_true(_Bool(True), ""This prints if this assert fails 2 (also good for debugging!)"")

fn main():
    test_count_nums()
    print(""All tests passed!"")",count_nums
HumanEval-Mojo/109,"fn by_length(arr: DynamicVector[Int]) -> DynamicVector[String]:
    """"""
    Given a DynamicVector of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting vector, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = DynamicVector[Int](2, 1, 1, 4, 5, 8, 2, 3)   
            -> sort arr -> DynamicVector[Int](1, 1, 2, 2, 3, 4, 5, 8) 
            -> reverse arr -> DynamicVector[Int](8, 5, 4, 3, 2, 2, 1, 1)
      return DynamicVector[String](""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One"")
    
      If the vector is empty, return an empty vector:
      arr = DynamicVector[Int]()
      return DynamicVector[String]()
    
      If the vector has any strange number ignore it:
      arr = DynamicVector[Int](1, -1, 55) 
            -> sort arr -> DynamicVector[Int](-1, 1, 55)
            -> reverse arr -> DynamicVector[Int](55, 1, -1)
      return = DynamicVector[String]('One')
    """"""","from collections.dict import Dict
from collections.vector import DynamicVector
from algorithm import sort
from memory.unsafe import Pointer

fn sort_by_value(arr: DynamicVector[Int]) -> DynamicVector[String]:
    let dic = Dict[Int, String]()
    dic[1] = ""One""
    dic[2] = ""Two""
    dic[3] = ""Three""
    dic[4] = ""Four""
    dic[5] = ""Five""
    dic[6] = ""Six""
    dic[7] = ""Seven""
    dic[8] = ""Eight""
    dic[9] = ""Nine""

    var sorted_arr = arr.copy()
    sort(sorted_arr, reverse=True)

    var new_arr = DynamicVector[String]()
    for var in sorted_arr:
        if dic.contains(var):
            new_arr.push_back(dic[var])

    return new_arr

fn main():
    var input_arr = DynamicVector[Int]()
    input_arr.push_back(1)
    input_arr.push_back(5)
    input_arr.push_back(2)
    input_arr.push_back(8)
    input_arr.push_back(3)

    let result = sort_by_value(input_arr)
    for item in result:
        print(item)","from testing import assert_equal, assert_true
from collections import DynamicVector

fn test_by_length():
    # Check some simple cases
    assert_true(True, ""This prints if this assert fails 1 (good for debugging!)"")
    
    var input1 = DynamicVector[Int]([2, 1, 1, 4, 5, 8, 2, 3])
    var expected1 = DynamicVector[String]([""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""])
    assert_equal(by_length(input1), expected1, ""Error"")
    
    var input2 = DynamicVector[Int]()
    var expected2 = DynamicVector[String]()
    assert_equal(by_length(input2), expected2, ""Error"")
    
    var input3 = DynamicVector[Int]([1, -1, 55])
    var expected3 = DynamicVector[String]([""One""])
    assert_equal(by_length(input3), expected3, ""Error"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")
    
    var input4 = DynamicVector[Int]([1, -1, 3, 2])
    var expected4 = DynamicVector[String]([""Three"", ""Two"", ""One""])
    assert_equal(by_length(input4), expected4)
    
    var input5 = DynamicVector[Int]([9, 4, 8])
    var expected5 = DynamicVector[String]([""Nine"", ""Eight"", ""Four""])
    assert_equal(by_length(input5), expected5)

fn main():
    test_by_length()
    print(""All tests passed!"")",by_length
HumanEval-Mojo/110,"fn exchange(lst1: DynamicVector[Int], lst2: DynamicVector[Int]) -> String:
    """"""In this problem, you will implement a function that takes two DynamicVectors of integers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a DynamicVector of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange(DynamicVector[Int](1, 2, 3, 4), DynamicVector[Int](1, 2, 3, 4)) => ""YES""
    exchange(DynamicVector[Int](1, 2, 3, 4), DynamicVector[Int](1, 5, 3, 4)) => ""NO""
    It is assumed that the input DynamicVectors will be non-empty.
    """"""","fn count_odd_even(lst1: DynamicVector[Int], lst2: DynamicVector[Int]) raises -> String:
    var odd: Int = 0
    var even: Int = 0
    
    for i in range(len(lst1)):
        if lst1[i] % 2 == 1:
            odd += 1
    
    for i in range(len(lst2)):
        if lst2[i] % 2 == 0:
            even += 1
    
    if even >= odd:
        return ""YES""
    return ""NO""

fn main() raises:
    let list1 = DynamicVector[Int]()
    list1.push_back(1)
    list1.push_back(2)
    list1.push_back(3)
    
    let list2 = DynamicVector[Int]()
    list2.push_back(4)
    list2.push_back(5)
    list2.push_back(6)
    
    let result = count_odd_even(list1, list2)
    print(result)","from testing import assert_equal

fn test_exchange():
    # Check some simple cases
    assert_equal(exchange([1, 2, 3, 4], [1, 2, 3, 4]), ""YES"")
    assert_equal(exchange([1, 2, 3, 4], [1, 5, 3, 4]), ""NO"")
    assert_equal(exchange([1, 2, 3, 4], [2, 1, 4, 3]), ""YES"")
    assert_equal(exchange([5, 7, 3], [2, 6, 4]), ""YES"")
    assert_equal(exchange([5, 7, 3], [2, 6, 3]), ""NO"")
    assert_equal(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]), ""NO"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(exchange([100, 200], [200, 200]), ""YES"")

    print(""All tests passed!"")

fn main():
    test_exchange()",exchange
HumanEval-Mojo/111,"fn histogram(test: String) -> Dict[String, Int]:
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram(""a b c"") == {""a"": 1, ""b"": 1, ""c"": 1}
    histogram(""a b b a"") == {""a"": 2, ""b"": 2}
    histogram(""a b c a b"") == {""a"": 2, ""b"": 2}
    histogram(""b b b b a"") == {""b"": 4}
    histogram("""") == {}

    """"""","from collections import Dict, HashSet
from string import split

fn find_most_frequent_words(test: String) -> Dict[String, Int]:
    var result = Dict[String, Int]()
    let words = split(test, "" "")
    var max_count = 0
    var word_set = HashSet[String]()

    for word in words:
        if word != """":
            let count = words.count(word)
            if count > max_count:
                max_count = count

    if max_count > 0:
        for word in words:
            if words.count(word) == max_count and word not in word_set:
                result[word] = max_count
                word_set.add(word)

    return result

fn main():
    let test_string = ""apple banana apple orange banana apple""
    let result = find_most_frequent_words(test_string)
    print(result)","from testing import assert_equal, assert_true
from collections import Dict

fn test_histogram():
    # Check some simple cases
    assert_equal(histogram(""a b b a""), Dict[String, Int]{""a"": 2, ""b"": 2}, ""Test case 1 failed"")
    assert_equal(histogram(""a b c a b""), Dict[String, Int]{""a"": 2, ""b"": 2, ""c"": 1}, ""Test case 2 failed"")
    assert_equal(histogram(""a b c d g""), Dict[String, Int]{""a"": 1, ""b"": 1, ""c"": 1, ""d"": 1, ""g"": 1}, ""Test case 3 failed"")
    assert_equal(histogram(""r t g""), Dict[String, Int]{""r"": 1, ""t"": 1, ""g"": 1}, ""Test case 4 failed"")
    assert_equal(histogram(""b b b b a""), Dict[String, Int]{""b"": 4, ""a"": 1}, ""Test case 5 failed"")
    assert_equal(histogram(""r t g""), Dict[String, Int]{""r"": 1, ""t"": 1, ""g"": 1}, ""Test case 6 failed"")

    # Check some edge cases that are easy to work out by hand
    assert_equal(histogram(""""), Dict[String, Int]{}, ""Test case 7 failed"")
    assert_equal(histogram(""a""), Dict[String, Int]{""a"": 1}, ""Test case 8 failed"")

    print(""All test cases passed!"")

fn main():
    test_histogram()",histogram
HumanEval-Mojo/112,"fn minSubArraySum(nums: List[Int]) -> Int:
    """"""
    Given a list of integers nums, find the minimum sum of any non-empty sub-list
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""","fn find_min_sum(nums: DynamicVector[Int]) raises -> Int:
    var max_sum: Int = 0
    var s: Int = 0
    
    for num in nums:
        s += -num
        if s < 0:
            s = 0
        max_sum = max(s, max_sum)
    
    if max_sum == 0:
        max_sum = nums[0]
        for i in range(1, len(nums)):
            max_sum = max(max_sum, -nums[i])
    
    let min_sum: Int = -max_sum
    return min_sum

fn max(a: Int, b: Int) -> Int:
    if a > b:
        return a
    else:
        return b","from testing import assert_equal, assert_true
from sys.info import simd_width
from algorithm import vectorize
from memory.unsafe import Pointer
from math import min, max

fn minSubArraySum(arr: DynamicVector[Int]) -> Int:
    # Implement the minSubArraySum function here
    # This is a placeholder implementation
    return 0

fn test_minSubArraySum():
    print(""Running tests for minSubArraySum..."")

    # Check some simple cases
    assert_equal(minSubArraySum([2, 3, 4, 1, 2, 4]), 1, ""Test case 1 failed"")
    assert_equal(minSubArraySum([-1, -2, -3]), -6, ""Test case 2 failed"")
    assert_equal(minSubArraySum([-1, -2, -3, 2, -10]), -14, ""Test case 3 failed"")
    assert_equal(minSubArraySum([-9999999999999999]), -9999999999999999, ""Test case 4 failed"")
    assert_equal(minSubArraySum([0, 10, 20, 1000000]), 0, ""Test case 5 failed"")
    assert_equal(minSubArraySum([-1, -2, -3, 10, -5]), -6, ""Test case 6 failed"")
    assert_equal(minSubArraySum([100, -1, -2, -3, 10, -5]), -6, ""Test case 7 failed"")
    assert_equal(minSubArraySum([10, 11, 13, 8, 3, 4]), 3, ""Test case 8 failed"")
    assert_equal(minSubArraySum([100, -33, 32, -1, 0, -2]), -33, ""Test case 9 failed"")

    # Check some edge cases that are easy to work out by hand
    assert_equal(minSubArraySum([-10]), -10, ""Edge case 1 failed"")
    assert_equal(minSubArraySum([7]), 7, ""Edge case 2 failed"")
    assert_equal(minSubArraySum([1, -1]), -1, ""Edge case 3 failed"")

    print(""All tests passed!"")

fn main():
    test_minSubArraySum()",minSubArraySum
HumanEval-Mojo/113,"fn odd_count(lst: List[String]) -> List[String]:
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    Example:
    let result1 = odd_count([""1234567""])
    print(result1)  # Output: [""the number of odd elements 4n the str4ng 4 of the 4nput.""]

    let result2 = odd_count([""3"", ""11111111""])
    print(result2)  # Output: [""the number of odd elements 1n the str1ng 1 of the 1nput."",
                    #          ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""","fn convert_to_mojo(lst: List[String]) raises -> List[String]:
    var res = List[String]()
    
    for arr in lst:
        var n: Int = 0
        for d in arr:
            if let digit = Int(d):
                if digit % 2 == 1:
                    n += 1
        
        let result_string = ""the number of odd elements "" + String(n) + ""n the str"" + String(n) + ""ng "" + String(n) + "" of the "" + String(n) + ""nput.""
        res.append(result_string)
    
    return res","from testing import assert_equal, assert_true
from collections.vector import DynamicVector

fn test_odd_count():
    # Test 1
    var input1 = DynamicVector[StringLiteral]()
    input1.push_back(""1234567"")
    var expected1 = DynamicVector[StringLiteral]()
    expected1.push_back(""the number of odd elements 4n the str4ng 4 of the 4nput."")
    assert_equal(odd_count(input1), expected1, ""Test 1 failed"")

    # Test 2
    var input2 = DynamicVector[StringLiteral]()
    input2.push_back(""3"")
    input2.push_back(""11111111"")
    var expected2 = DynamicVector[StringLiteral]()
    expected2.push_back(""the number of odd elements 1n the str1ng 1 of the 1nput."")
    expected2.push_back(""the number of odd elements 8n the str8ng 8 of the 8nput."")
    assert_equal(odd_count(input2), expected2, ""Test 2 failed"")

    # Test 3
    var input3 = DynamicVector[StringLiteral]()
    input3.push_back(""271"")
    input3.push_back(""137"")
    input3.push_back(""314"")
    var expected3 = DynamicVector[StringLiteral]()
    expected3.push_back(""the number of odd elements 2n the str2ng 2 of the 2nput."")
    expected3.push_back(""the number of odd elements 3n the str3ng 3 of the 3nput."")
    expected3.push_back(""the number of odd elements 2n the str2ng 2 of the 2nput."")
    assert_equal(odd_count(input3), expected3, ""Test 3 failed"")

    # Edge case check
    assert_true(True, ""This prints if this assert fails (also good for debugging!)"")

fn main():
    test_odd_count()
    print(""All tests passed!"")",odd_count
HumanEval-Mojo/114,"fn reverse_delete(s: String, c: String) -> Tuple[String, Bool]:
    """"""Task
    We are given two strings s and c. You have to delete all the characters in s that are equal to any character in c,
    then check if the result string is a palindrome.
    A string is called a palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.

    Example
    For s = ""abcde"", c = ""ae"", the result should be (""bcd"", False)
    For s = ""abcdef"", c = ""b"", the result should be (""acdef"", False)
    For s = ""abcdedcba"", c = ""ab"", the result should be (""cdedc"", True)
    """"""","fn process_string(s: String, c: String) -> (String, Bool):
    var result = String()
    for i in range(len(s)):
        let char = s[i]
        if c.find(char) == -1:
            result += char
    
    var reversed = String()
    for i in range(len(result)-1, -1, -1):
        reversed += result[i]
    
    return (result, result == reversed)","from testing import assert_equal

fn test_reverse_delete():
    # Test case 1
    let result1 = reverse_delete(""abcde"", ""ae"")
    assert_equal(result1.0, ""bcd"")
    assert_equal(result1.1, False)

    # Test case 2
    let result2 = reverse_delete(""abcdef"", ""b"")
    assert_equal(result2.0, ""acdef"")
    assert_equal(result2.1, False)

    # Test case 3
    let result3 = reverse_delete(""abcdedcba"", ""ab"")
    assert_equal(result3.0, ""cdedc"")
    assert_equal(result3.1, True)

    # Test case 4
    let result4 = reverse_delete(""dwik"", ""w"")
    assert_equal(result4.0, ""dik"")
    assert_equal(result4.1, False)

    # Test case 5
    let result5 = reverse_delete(""a"", ""a"")
    assert_equal(result5.0, """")
    assert_equal(result5.1, True)

    # Test case 6
    let result6 = reverse_delete(""abcdedcba"", """")
    assert_equal(result6.0, ""abcdedcba"")
    assert_equal(result6.1, True)

    # Test case 7
    let result7 = reverse_delete(""abcdedcba"", ""v"")
    assert_equal(result7.0, ""abcdedcba"")
    assert_equal(result7.1, True)

    # Test case 8
    let result8 = reverse_delete(""vabba"", ""v"")
    assert_equal(result8.0, ""abba"")
    assert_equal(result8.1, True)

    # Test case 9
    let result9 = reverse_delete(""mamma"", ""mia"")
    assert_equal(result9.0, """")
    assert_equal(result9.1, True)

    print(""All tests passed!"")

fn main():
    test_reverse_delete()",reverse_delete
HumanEval-Mojo/115,"fn select_words(s: String, n: Int) -> List[String]:
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""","from python import Python

fn count_consonants(word: String) -> Int:
    let vowels = StringRef(""aeiou"")
    var count: Int = 0
    for c in word.lower():
        if not vowels.contains(c):
            count += 1
    return count

fn find_words_with_n_consonants(s: String, n: Int) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    var result = py.list()
    
    let words = s.split()
    for word in words:
        if count_consonants(word) == n:
            result.append(word)
    
    return result

fn main() raises:
    let sentence = ""Hello World How are you""
    let n = 3
    let result = find_words_with_n_consonants(sentence, n)
    print(result)","from testing import assert_equal, assert_true
from collections import DynamicVector

fn test_select_words():
    # Check some simple cases
    assert_equal(select_words(""Mary had a little lamb"", 4), DynamicVector[String](""little""), ""First test error"")
    assert_equal(select_words(""Mary had a little lamb"", 3), DynamicVector[String](""Mary"", ""lamb""), ""Second test error"")
    assert_equal(select_words(""simple white space"", 2), DynamicVector[String](), ""Third test error"")
    assert_equal(select_words(""Hello world"", 4), DynamicVector[String](""world""), ""Fourth test error"")
    assert_equal(select_words(""Uncle sam"", 3), DynamicVector[String](""Uncle""), ""Fifth test error"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(select_words("""", 4), DynamicVector[String](), ""1st edge test error"")
    assert_equal(select_words(""a b c d e f"", 1), DynamicVector[String](""b"", ""c"", ""d"", ""f""), ""2nd edge test error"")

    print(""All tests passed!"")

fn main():
    test_select_words()",select_words
HumanEval-Mojo/116,"fn get_closest_vowel(word: String) -> String:
    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending don't count. Return an empty string if you didn't
    find any vowel that meets the above condition. 

    You may assume that the given string contains English letters only.

    Example:
    get_closest_vowel(""yogurt"") ==> ""u""
    get_closest_vowel(""FULL"") ==> ""U""
    get_closest_vowel(""quick"") ==> """"
    get_closest_vowel(""ab"") ==> """"
    """"""","from python import Python

fn find_vowel(word: String) raises -> String:
    if len(word) < 3:
        return """"

    let py = Python.import_module(""builtins"")
    let vowels = py.set([""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""O"", ""U"", ""I""])

    for i in range(len(word) - 2, 0, -1):
        let current_char = String(word[i])
        let next_char = String(word[i + 1])
        let prev_char = String(word[i - 1])

        if py.bool(vowels.__contains__(current_char)):
            if not py.bool(vowels.__contains__(next_char)) and not py.bool(vowels.__contains__(prev_char)):
                return current_char

    return """"","from testing import assert_equal

fn test_get_closest_vowel():
    # Check some simple cases
    assert_equal(get_closest_vowel(""yogurt""), ""u"")
    assert_equal(get_closest_vowel(""full""), ""u"")
    assert_equal(get_closest_vowel(""easy""), """")
    assert_equal(get_closest_vowel(""eAsy""), """")
    assert_equal(get_closest_vowel(""ali""), """")
    assert_equal(get_closest_vowel(""bad""), ""a"")
    assert_equal(get_closest_vowel(""most""), ""o"")
    assert_equal(get_closest_vowel(""ab""), """")
    assert_equal(get_closest_vowel(""ba""), """")
    assert_equal(get_closest_vowel(""quick""), """")
    assert_equal(get_closest_vowel(""anime""), ""i"")
    assert_equal(get_closest_vowel(""Asia""), """")
    assert_equal(get_closest_vowel(""Above""), ""o"")

    # Check some edge cases that are easy to work out by hand.
    # In Mojo, we don't need to assert True at the end

fn main():
    test_get_closest_vowel()
    print(""All tests passed!"")",get_closest_vowel
HumanEval-Mojo/117,"fn match_parens(lst: List[String]) -> String:
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens([""()("", "")""]) == ""Yes""
    match_parens(["")"", "")""]) == ""No""
    '''","fn check(s: String) raises -> Bool:
    var val: Int = 0
    for i in s:
        if i == '(':
            val += 1
        else:
            val -= 1
        if val < 0:
            return False
    return val == 0

fn solution(lst: DynamicVector[String]) raises -> String:
    let S1 = lst[0] + lst[1]
    let S2 = lst[1] + lst[0]
    
    return ""Yes"" if check(S1) or check(S2) else ""No""","from testing import assert_equal

fn test_match_parens():
    # Check some simple cases
    assert_equal(match_parens([""()("", "")""]), ""Yes"")
    assert_equal(match_parens(["")"", "")""]), ""No"")
    assert_equal(match_parens([""(()(())"", ""())())""]), ""No"")
    assert_equal(match_parens(["")())"", ""(()()""]), ""Yes"")
    assert_equal(match_parens([""(())))"", ""(()())((""]), ""Yes"")
    assert_equal(match_parens([""()"", ""())""]), ""No"")
    assert_equal(match_parens([""(()("", ""()))()""]), ""Yes"")
    assert_equal(match_parens([""(((("", ""((())""]), ""No"")
    assert_equal(match_parens(["")(()"", ""(()(""]), ""No"")
    assert_equal(match_parens(["")("", "")(""]), ""No"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(match_parens([""("", "")""]), ""Yes"")
    assert_equal(match_parens(["")"", ""(""]), ""Yes"")

    print(""All tests passed!"")

fn main():
    test_match_parens()",match_parens
HumanEval-Mojo/118,"fn max_fill(grid: List[List[Int]], capacity: Int) -> Int:
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            capacity : 1
        Output: 6

    Example2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            capacity : 2
        Output: 5
    
    Example3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[0].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""","fn calculate_trips(grid: List[List[Int]], capacity: Int) raises -> Int:
    var total_trips: Int = 0
    
    for arr in grid:
        let sum_arr = sum(arr)
        let trips = (sum_arr + capacity - 1) // capacity
        total_trips += trips
    
    return total_trips

fn sum(arr: List[Int]) raises -> Int:
    var total: Int = 0
    for value in arr:
        total += value
    return total","from testing import assert_equal, assert_true
from sys.intrinsics import expect

fn test_max_fill():
    print(""Running tests for max_fill function"")

    # Check some simple cases
    assert_true(True, ""This prints if this assert fails 1 (good for debugging!)"")
    
    let test1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
    assert_equal(max_fill(test1, 1), 6, ""Error in test case 1"")

    let test2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
    assert_equal(max_fill(test2, 2), 5, ""Error in test case 2"")

    let test3 = [[0,0,0], [0,0,0]]
    assert_equal(max_fill(test3, 5), 0, ""Error in test case 3"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")

    let test4 = [[1,1,1,1], [1,1,1,1]]
    assert_equal(max_fill(test4, 2), 4, ""Error in test case 4"")
    assert_equal(max_fill(test4, 9), 2, ""Error in test case 5"")

    print(""All tests passed!"")

fn main():
    test_max_fill()",max_fill
HumanEval-Mojo/119,"fn sort_array(arr: DynamicVector[Int]) -> DynamicVector[Int]:
    """"""
    In this Kata, you have to sort a DynamicVector of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array(DynamicVector[Int](1, 5, 2, 3, 4)) == DynamicVector[Int](1, 2, 3, 4, 5)
    >>> sort_array(DynamicVector[Int](-2, -3, -4, -5, -6)) == DynamicVector[Int](-6, -5, -4, -3, -2)
    >>> sort_array(DynamicVector[Int](1, 0, 2, 3, 4)) == DynamicVector[Int](0, 1, 2, 3, 4)
    """"""","from python import Python

fn custom_sort(arr: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    
    fn count_ones(x: PythonObject) raises -> Int:
        let binary = py.bin(x)[2:]
        return py.sum(py.map(lambda c: c == '1', binary))
    
    let sorted_arr = py.sorted(arr)
    return py.sorted(sorted_arr, key=count_ones)","from testing import assert_equal, assert_true
from collections import DynamicVector

fn test_sort_array():
    print(""Running tests for sort_array..."")

    # Check some simple cases
    assert_true(True, ""This prints if this assert fails 1 (good for debugging!)"")
    
    assert_equal(sort_array(DynamicVector[Int]([1,5,2,3,4])), 
                 DynamicVector[Int]([1, 2, 4, 3, 5]))
    
    assert_equal(sort_array(DynamicVector[Int]([-2,-3,-4,-5,-6])), 
                 DynamicVector[Int]([-4, -2, -6, -5, -3]))
    
    assert_equal(sort_array(DynamicVector[Int]([1,0,2,3,4])), 
                 DynamicVector[Int]([0, 1, 2, 4, 3]))
    
    assert_equal(sort_array(DynamicVector[Int]([])), 
                 DynamicVector[Int]([]))
    
    assert_equal(sort_array(DynamicVector[Int]([2,5,77,4,5,3,5,7,2,3,4])), 
                 DynamicVector[Int]([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]))
    
    assert_equal(sort_array(DynamicVector[Int]([3,6,44,12,32,5])), 
                 DynamicVector[Int]([32, 3, 5, 6, 12, 44]))
    
    assert_equal(sort_array(DynamicVector[Int]([2,4,8,16,32])), 
                 DynamicVector[Int]([2, 4, 8, 16, 32]))
    
    assert_equal(sort_array(DynamicVector[Int]([2,4,8,16,32])), 
                 DynamicVector[Int]([2, 4, 8, 16, 32]))

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")

    print(""All tests passed!"")

fn main():
    test_sort_array()",sort_array
HumanEval-Mojo/120,"fn solution(lst: List[Int]) -> Int:
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==> 0
    """"""","fn sum_even_index_odd_elements(lst: List[Int]) -> Int:
    var result: Int = 0
    for i in range(len(lst)):
        if i % 2 == 0 and lst[i] % 2 == 1:
            result += lst[i]
    return result","from testing import assert_equal

fn test_solution():
    # Check some simple cases
    assert_equal(solution([5, 8, 7, 1]), 12)
    assert_equal(solution([3, 3, 3, 3, 3]), 9)
    assert_equal(solution([30, 13, 24, 321]), 0)
    assert_equal(solution([5, 9]), 5)
    assert_equal(solution([2, 4, 8]), 0)
    assert_equal(solution([30, 13, 23, 32]), 23)
    assert_equal(solution([3, 13, 2, 9]), 3)

    print(""All tests passed!"")

fn main():
    test_solution()",solution
HumanEval-Mojo/121,"fn add_elements(arr: List[Int], k: Int) -> Int:
    """"""
    Given a non-empty list of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""","fn sum_elements(arr: DynamicVector[Int], k: Int) -> Int:
    var total: Int = 0
    for i in range(min(k, len(arr))):
        let elem = arr[i]
        if elem < 100 and elem >= -99:
            total += elem
    return total","from testing import assert_equal, assert_true
from sys import stderr

fn add_elements(arr: DynamicVector[Int], n: Int) -> Int:
    # Assuming the implementation of add_elements is defined here
    # or imported from another module
    pass

fn test_add_elements():
    # Check some simple cases
    assert_equal(add_elements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3), -4)
    assert_equal(add_elements([111, 121, 3, 4000, 5, 6], 2), 0)
    assert_equal(add_elements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4), 125)
    
    let result = add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
    assert_true(result == 24, ""This prints if this assert fails 1 (good for debugging!)"")

    # Check some edge cases that are easy to work out by hand.
    let edge_case_result = add_elements([1], 1)
    assert_true(edge_case_result == 1, ""This prints if this assert fails 2 (also good for debugging!)"")

    print(""All tests passed!"")

fn main():
    test_add_elements()",add_elements
HumanEval-Mojo/122,"fn get_odd_collatz(n: Int) -> PythonObject:
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""","fn collatz_sequence(n: Int64) raises -> DynamicVector[Int64]:
    var odd_collatz = DynamicVector[Int64]()
    var current = n

    if current % 2 != 0:
        odd_collatz.push_back(current)

    while current > 1:
        if current % 2 == 0:
            current = current // 2
        else:
            current = current * 3 + 1

        if current % 2 != 0:
            odd_collatz.push_back(current)

    odd_collatz.sort()
    return odd_collatz

fn main() raises:
    let result = collatz_sequence(15)
    print(result)","from testing import assert_equal

fn test_get_odd_collatz():
    # Check some simple cases
    assert_equal(get_odd_collatz(14), [1, 5, 7, 11, 13, 17])
    assert_equal(get_odd_collatz(5), [1, 5])
    assert_equal(get_odd_collatz(12), [1, 3, 5], ""This prints if this assert fails 1 (good for debugging!)"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(get_odd_collatz(1), [1], ""This prints if this assert fails 2 (also good for debugging!)"")

    print(""All tests passed!"")

fn main():
    test_get_odd_collatz()",get_odd_collatz
HumanEval-Mojo/123,"fn valid_date(date: String) -> Bool:
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date(""03-11-2000"") => True

    valid_date(""15-01-2012"") => False

    valid_date(""04-0-2040"") => False

    valid_date(""06-04-2020"") => True

    valid_date(""06/04/2020"") => False
    """"""
    # Implementation goes here","fn is_valid_date(date: String) raises -> Bool:
    let trimmed_date = date.strip()
    let date_parts = trimmed_date.split('-')
    
    if len(date_parts) != 3:
        return False
    
    let month = Int(date_parts[0])
    let day = Int(date_parts[1])
    let year = Int(date_parts[2])
    
    if month is None or day is None or year is None:
        return False
    
    if month < 1 or month > 12:
        return False
    
    if (month in [1, 3, 5, 7, 8, 10, 12]) and (day < 1 or day > 31):
        return False
    
    if (month in [4, 6, 9, 11]) and (day < 1 or day > 30):
        return False
    
    if month == 2 and (day < 1 or day > 29):
        return False
    
    return True

fn main() raises:
    let test_date = ""12-31-2023""
    let result = is_valid_date(test_date)
    print(result)","from testing import assert_true, assert_false

fn test_valid_date():
    # Check some simple cases
    assert_true(valid_date(""03-11-2000""))
    
    assert_false(valid_date(""15-01-2012""))
    
    assert_false(valid_date(""04-0-2040""))
    
    assert_true(valid_date(""06-04-2020""))
    
    assert_true(valid_date(""01-01-2007""))
    
    assert_false(valid_date(""03-32-2011""))
    
    assert_false(valid_date(""""))
    
    assert_false(valid_date(""04-31-3000""))
    
    assert_true(valid_date(""06-06-2005""))
    
    assert_false(valid_date(""21-31-2000""))
    
    assert_true(valid_date(""04-12-2003""))
    
    assert_false(valid_date(""04122003""))
    
    assert_false(valid_date(""20030412""))
    
    assert_false(valid_date(""2003-04""))
    
    assert_false(valid_date(""2003-04-12""))
    
    assert_false(valid_date(""04-2003""))

fn main():
    test_valid_date()
    print(""All tests passed!"")",valid_date
HumanEval-Mojo/124,"fn maximum(arr: DynamicVector[Int], k: Int) -> DynamicVector[Int]:
    """"""
    Given a DynamicVector arr of integers and a positive integer k, return a sorted DynamicVector 
    of length k with the maximum k numbers in arr.

    Example1:

        Input: arr = DynamicVector[-3, -4, 5], k = 3
        Output: DynamicVector[-4, -3, 5]

    Example2:

        Input: arr = DynamicVector[4, -4, 4], k = 2
        Output: DynamicVector[4, 4]

    Example3:

        Input: arr = DynamicVector[-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: DynamicVector[2]

    Note:
        1. The length of the DynamicVector will be in the range of [1, 1000].
        2. The elements in the DynamicVector will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""","fn find_k_largest(arr: List[Int], k: Int) raises -> List[Int]:
    if k == 0:
        return List[Int]()
    
    var sorted_arr = arr.sorted()
    let start_index = len(sorted_arr) - k
    
    var ans = List[Int]()
    for i in range(start_index, len(sorted_arr)):
        ans.append(sorted_arr[i])
    
    return ans","from testing import assert_equal

fn maximum(values: DynamicVector[Int], k: Int) -> DynamicVector[Int]:
    # Implement the maximum function here
    # This is just a placeholder implementation
    return values

fn test_maximum():
    print(""Running tests for maximum function..."")

    # Check some simple cases
    assert_equal(maximum([-3, -4, 5], 3), [-4, -3, 5])
    assert_equal(maximum([4, -4, 4], 2), [4, 4])
    assert_equal(maximum([-3, 2, 1, 2, -1, -2, 1], 1), [2])
    assert_equal(maximum([123, -123, 20, 0, 1, 2, -3], 3), [2, 20, 123])
    assert_equal(maximum([-123, 20, 0, 1, 2, -3], 4), [0, 1, 2, 20])
    assert_equal(maximum([5, 15, 0, 3, -13, -8, 0], 7), [-13, -8, 0, 0, 3, 5, 15])
    assert_equal(maximum([-1, 0, 2, 5, 3, -10], 2), [3, 5])
    assert_equal(maximum([1, 0, 5, -7], 1), [5])
    assert_equal(maximum([4, -4], 2), [-4, 4])
    assert_equal(maximum([-10, 10], 2), [-10, 10])

    # Check some edge cases that are easy to work out by hand.
    assert_equal(maximum([1, 2, 3, -23, 243, -400, 0], 0), [])

    print(""All tests passed!"")

fn main():
    test_maximum()",maximum
HumanEval-Mojo/125,"fn prod_signs(arr: List[Int]) -> Optional[Int]:
    """"""
    You are given a List arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the list, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""","from python import Python

fn array_sign(arr: PythonObject) raises -> Int64:
    if arr.is_empty():
        return 0
    
    let py = Python.import_module(""builtins"")
    var prod: Int64 = 1
    var sum: Int64 = 0
    
    for i in range(arr.__len__()):
        let num = arr[i].to_float64()
        if num == 0:
            return 0
        if num < 0:
            prod *= -1
        sum += abs(num.to_int())
    
    return prod * sum","from testing import assert_equal, assert_true
from optional import Optional

fn test_prod_signs():
    print(""Running tests for prod_signs function"")

    # Helper function to call prod_signs and handle None case
    fn call_prod_signs(input: List[Int]) -> Optional[Int]:
        let result = prod_signs(input)
        if len(input) == 0:
            return Optional[Int]()
        else:
            return Optional(result)

    # Check some simple cases
    assert_true(True, ""This prints if this assert fails 1 (good for debugging!)"")
    assert_equal(call_prod_signs([1, 2, 2, -4]), Optional(-9))
    assert_equal(call_prod_signs([0, 1]), Optional(0))
    assert_equal(call_prod_signs([1, 1, 1, 2, 3, -1, 1]), Optional(-10))
    assert_equal(call_prod_signs([]), Optional[Int]())
    assert_equal(call_prod_signs([2, 4, 1, 2, -1, -1, 9]), Optional(20))
    assert_equal(call_prod_signs([-1, 1, -1, 1]), Optional(4))
    assert_equal(call_signs([-1, 1, 1, 1]), Optional(-4))
    assert_equal(call_prod_signs([-1, 1, 1, 0]), Optional(0))

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")

    print(""All tests passed!"")

fn main():
    test_prod_signs()",prod_signs
HumanEval-Mojo/126,"fn intersection(interval1: Tuple[Int, Int], interval2: Tuple[Int, Int]) -> String:
    """"""You are given two intervals,
    where each interval is a tuple of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
    """"""","fn is_prime(num: Int) -> Bool:
    if num <= 1:
        return False
    if num == 2:
        return True
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

fn check_prime_length(interval1: Tuple[Int, Int], interval2: Tuple[Int, Int]) -> String:
    let l = max(interval1[0], interval2[0])
    let r = min(interval1[1], interval2[1])
    let length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""

fn main():
    let result = check_prime_length((1, 5), (3, 7))
    print(result)","from testing import assert_equal

fn test_intersection():
    # Check some simple cases
    assert_equal(intersection((1, 2), (2, 3)), ""NO"")
    assert_equal(intersection((-1, 1), (0, 4)), ""NO"")
    assert_equal(intersection((-3, -1), (-5, 5)), ""YES"")
    assert_equal(intersection((-2, 2), (-4, 0)), ""YES"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(intersection((-11, 2), (-1, -1)), ""NO"")
    assert_equal(intersection((1, 2), (3, 5)), ""NO"")
    assert_equal(intersection((1, 2), (1, 2)), ""NO"")
    assert_equal(intersection((-2, -2), (-3, -2)), ""NO"")

    print(""All tests passed!"")

fn main():
    test_intersection()",intersection
HumanEval-Mojo/127,"fn split_words(txt: String) -> PythonObject:
    '''
    Given a string of words, return a PythonObject (which can represent either a list or an integer) based on the following conditions:
    
    1. If the string contains whitespace, return a list of words split on whitespace.
    2. If no whitespaces exist but commas are present, split on commas ','.
    3. If neither whitespaces nor commas exist, return the count of lower-case letters with odd order in the
       alphabet, where ord('a') = 0, ord('b') = 1, ... ord('z') = 25.

    Examples:
    split_words(""Hello world!"") -> [""Hello"", ""world!""]
    split_words(""Hello,world!"") -> [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 

    Note: The return type is PythonObject to accommodate both list and integer returns.
    '''","fn process_text(txt: String) raises -> Variant[DynamicVector[String], Int]:
    if txt.contains("" ""):
        return txt.split()
    elif txt.contains("",""):
        return txt.replace("","", "" "").split()
    else:
        var count: Int = 0
        for c in txt:
            if c.is_lowercase() and ord(c) % 2 == 0:
                count += 1
        return count","from testing import assert_equal

fn test_split_words():
    # Test case 1
    let result1 = split_words(""Hello world!"")
    assert_equal(result1, [""Hello"", ""world!""])

    # Test case 2
    let result2 = split_words(""Hello,world!"")
    assert_equal(result2, [""Hello"", ""world!""])

    # Test case 3
    let result3 = split_words(""Hello world,!"")
    assert_equal(result3, [""Hello"", ""world,!""])

    # Test case 4
    let result4 = split_words(""Hello,Hello,world !"")
    assert_equal(result4, [""Hello,Hello,world"", ""!""])

    # Test case 5
    let result5 = split_words(""abcdef"")
    assert_equal(result5, 3)

    # Test case 6
    let result6 = split_words(""aaabb"")
    assert_equal(result6, 2)

    # Test case 7
    let result7 = split_words(""aaaBb"")
    assert_equal(result7, 1)

    # Test case 8
    let result8 = split_words("""")
    assert_equal(result8, 0)

    print(""All tests passed!"")

fn main():
    test_split_words()",split_words
HumanEval-Mojo/128,"fn is_sorted(lst: DynamicVector[Int]) -> Bool:
    '''
    Given a DynamicVector of integers, return whether or not they are sorted
    in ascending order. If the vector has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted(DynamicVector[Int]([5])) -> True
    is_sorted(DynamicVector[Int]([1, 2, 3, 4, 5])) -> True
    is_sorted(DynamicVector[Int]([1, 3, 2, 4, 5])) -> False
    is_sorted(DynamicVector[Int]([1, 2, 3, 4, 5, 6])) -> True
    is_sorted(DynamicVector[Int]([1, 2, 3, 4, 5, 6, 7])) -> True
    is_sorted(DynamicVector[Int]([1, 3, 2, 4, 5, 6, 7])) -> False
    is_sorted(DynamicVector[Int]([1, 2, 2, 3, 3, 4])) -> True
    is_sorted(DynamicVector[Int]([1, 2, 2, 2, 3, 4])) -> False
    '''","from collections import Dict
from math import all, any

fn is_valid_sequence(lst: List[Int]) raises -> Bool:
    var count_digit = Dict[Int, Int]()
    for i in lst:
        if not count_digit.contains(i):
            count_digit[i] = 0
        count_digit[i] += 1
    
    for i in lst:
        if count_digit[i] > 2:
            return False
    
    for i in range(1, len(lst)):
        if lst[i-1] > lst[i]:
            return False
    
    return True","from testing import assert_true, assert_false

fn test_is_sorted():
    # Check some simple cases
    assert_true(is_sorted([5]))
    assert_true(is_sorted([1, 2, 3, 4, 5]))
    assert_false(is_sorted([1, 3, 2, 4, 5]))
    assert_true(is_sorted([1, 2, 3, 4, 5, 6]))
    assert_true(is_sorted([1, 2, 3, 4, 5, 6, 7]))
    assert_false(is_sorted([1, 3, 2, 4, 5, 6, 7]), ""This prints if this assert fails 1 (good for debugging!)"")
    assert_true(is_sorted([]), ""This prints if this assert fails 2 (good for debugging!)"")
    assert_true(is_sorted([1]), ""This prints if this assert fails 3 (good for debugging!)"")
    assert_false(is_sorted([3, 2, 1]), ""This prints if this assert fails 4 (good for debugging!)"")
    
    # Check some edge cases that are easy to work out by hand.
    assert_false(is_sorted([1, 2, 2, 2, 3, 4]), ""This prints if this assert fails 5 (good for debugging!)"")
    assert_false(is_sorted([1, 2, 3, 3, 3, 4]), ""This prints if this assert fails 6 (good for debugging!)"")
    assert_true(is_sorted([1, 2, 2, 3, 3, 4]), ""This prints if this assert fails 7 (good for debugging!)"")
    assert_true(is_sorted([1, 2, 3, 4]), ""This prints if this assert fails 8 (good for debugging!)"")

fn main():
    test_is_sorted()
    print(""All tests passed!"")",is_sorted
HumanEval-Mojo/129,"fn minPath(grid: List[List[Int]], k: Int) -> List[Int]:
    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with your current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""","from python import Python

fn solve(grid: PythonObject, k: Int) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    let n = py.len(grid)
    var val = n * n + 1

    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                var temp = DynamicVector[Int]()
                
                if i != 0:
                    temp.append(grid[i - 1][j].to_int())
                
                if j != 0:
                    temp.append(grid[i][j - 1].to_int())
                
                if i != n - 1:
                    temp.append(grid[i + 1][j].to_int())
                
                if j != n - 1:
                    temp.append(grid[i][j + 1].to_int())
                
                for t in temp:
                    if t < val:
                        val = t

    var ans = py.list()
    for i in range(k):
        if i % 2 == 0:
            _ = ans.append(1)
        else:
            _ = ans.append(val)
    
    return ans

fn main() raises:
    let py = Python.import_module(""builtins"")
    let grid = py.list([[1,1,1],[1,2,1],[1,1,1]])
    let k = 5
    let result = solve(grid, k)
    print(result)","from testing import assert_equal

fn test_minPath():
    print(""Running tests for minPath function"")

    # Check some simple cases
    assert_equal(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3), [1, 2, 1])
    assert_equal(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1), [1])
    assert_equal(minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4), [1, 2, 1, 2])
    assert_equal(minPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7), [1, 10, 1, 10, 1, 10, 1])
    assert_equal(minPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5), [1, 7, 1, 7, 1])
    assert_equal(minPath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9), [1, 6, 1, 6, 1, 6, 1, 6, 1])
    assert_equal(minPath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12), [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])
    assert_equal(minPath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8), [1, 3, 1, 3, 1, 3, 1, 3])
    assert_equal(minPath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8), [1, 5, 1, 5, 1, 5, 1, 5])

    # Check some edge cases that are easy to work out by hand.
    assert_equal(minPath([[1, 2], [3, 4]], 10), [1, 2, 1, 2, 1, 2, 1, 2, 1, 2])
    assert_equal(minPath([[1, 3], [3, 2]], 10), [1, 3, 1, 3, 1, 3, 1, 3, 1, 3])

    print(""All tests passed!"")

fn main():
    test_minPath()",minPath
HumanEval-Mojo/130,"fn digits(n: Int) -> Int:
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""","fn calculate_odd_product(n: Int) -> Int:
    var product: Int = 1
    var odd_count: Int = 0
    let n_str = String(n)
    
    for i in range(len(n_str)):
        let digit = ord(n_str[i]) - ord('0')
        if digit % 2 == 1:
            product *= digit
            odd_count += 1
    
    if odd_count == 0:
        return 0
    else:
        return product

fn main():
    let result = calculate_odd_product(12345)
    print(result)","from testing import assert_equal

fn test_digits():
    # Check some simple cases
    assert_equal(digits(5), 5)
    assert_equal(digits(54), 5)
    assert_equal(digits(120), 1)
    assert_equal(digits(5014), 5)
    assert_equal(digits(98765), 315)
    assert_equal(digits(5576543), 2625)

    # Check some edge cases that are easy to work out by hand.
    assert_equal(digits(2468), 0)

    print(""All tests passed!"")

fn main():
    test_digits()",digits
HumanEval-Mojo/131,"fn is_nested(string: String) -> Bool:
    '''
    Create a function that takes a String as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested(""[[]]"") â -> True
    is_nested(""[]]]]]]][[[[[]"") â -> False
    is_nested(""[][]"") â -> False
    is_nested(""[]"") â -> False
    is_nested(""[[][]]"") â -> True
    is_nested(""[[]][["") â -> True
    '''","fn count_valid_brackets(string: String) raises -> Bool:
    var opening_bracket_index = DynamicVector[Int]()
    var closing_bracket_index = DynamicVector[Int]()
    
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        elif string[i] == ']':
            closing_bracket_index.append(i)
    
    closing_bracket_index.reverse()
    
    var cnt: Int = 0
    var i: Int = 0
    let l: Int = len(closing_bracket_index)
    
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    
    return cnt >= 2

fn main() raises:
    let test_string: String = ""[[]][]""
    let result = count_valid_brackets(test_string)
    print(result)","from testing import assert_true, assert_false

fn test_is_nested():
    # Check some simple cases
    assert_true(is_nested(""[[]]""), ""This prints if this assert fails 1 (good for debugging!)"")
    assert_false(is_nested(""[]]]]]]][[[[[]""))
    assert_false(is_nested(""[][]""))
    assert_false(is_nested(""[]""))
    assert_true(is_nested(""[[[[]]]]""))
    assert_false(is_nested(""[]]]]]]]]]]""))
    assert_true(is_nested(""[][][[]]""))
    assert_false(is_nested(""[[]""))
    assert_false(is_nested(""[]]""))
    assert_true(is_nested(""[[]][[""))
    assert_true(is_nested(""[[][]]""))

    # Check some edge cases that are easy to work out by hand.
    assert_false(is_nested(""""), ""This prints if this assert fails 2 (also good for debugging!)"")
    assert_false(is_nested(""[[[[[[[[""))
    assert_false(is_nested(""]]]]]]]]""))

fn main():
    test_is_nested()
    print(""All tests passed!"")",is_nested
HumanEval-Mojo/132,"fn check_if_last_char_is_a_letter(txt: String) -> Bool:
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") â -> False
    check_if_last_char_is_a_letter(""apple pi e"") â -> True
    check_if_last_char_is_a_letter(""apple pi e "") â -> False
    check_if_last_char_is_a_letter("""") â -> False 
    '''","fn is_last_character_letter(txt: String) -> Bool:
    let words = txt.split(' ')
    if words.size() == 0:
        return False
    
    let last_word = words[words.size() - 1]
    if last_word.count() != 1:
        return False
    
    let char_code = ord(last_word.lower())
    return char_code >= 97 and char_code <= 122","from testing import assert_equal, assert_true
from sys.info import simdwidthof

fn check_if_last_char_is_a_letter(s: String) -> Bool:
    # Assuming this function is implemented elsewhere
    # For this example, we'll just return a placeholder value
    return False

fn test_check_if_last_char_is_a_letter():
    print(""Running tests for check_if_last_char_is_a_letter"")

    assert_equal(check_if_last_char_is_a_letter(""apple""), False)
    assert_equal(check_if_last_char_is_a_letter(""apple pi e""), True)
    assert_equal(check_if_last_char_is_a_letter(""eeeee""), False)
    assert_equal(check_if_last_char_is_a_letter(""A""), True)
    assert_equal(check_if_last_char_is_a_letter(""Pumpkin pie ""), False)
    assert_equal(check_if_last_char_is_a_letter(""Pumpkin pie 1""), False)
    assert_equal(check_if_last_char_is_a_letter(""""), False)
    assert_equal(check_if_last_char_is_a_letter(""eeeee e ""), False)
    assert_equal(check_if_last_char_is_a_letter(""apple pie""), False)
    assert_equal(check_if_last_char_is_a_letter(""apple pi e ""), False)

    # Check some edge cases that are easy to work out by hand.
    assert_true(True)

    print(""All tests passed!"")

fn main():
    test_check_if_last_char_is_a_letter()",check_if_last_char_is_a_letter
HumanEval-Mojo/133,"fn sum_squares(lst: DynamicVector[Float64]) -> Int:
    """"""You are given a DynamicVector of Float64 numbers.
    You need to return the sum of squared numbers in the given vector,
    round each element in the vector to the upper int (ceiling) first.
    Examples:
    For lst = DynamicVector[Float64](1.0, 2.0, 3.0) the output should be 14
    For lst = DynamicVector[Float64](1.0, 4.0, 9.0) the output should be 98
    For lst = DynamicVector[Float64](1.0, 3.0, 5.0, 7.0) the output should be 84
    For lst = DynamicVector[Float64](1.4, 4.2, 0.0) the output should be 29
    For lst = DynamicVector[Float64](-2.4, 1.0, 1.0) the output should be 6
    
    """"""","from math import ceil

fn calculate_squared_sum(lst: List[Float64]) raises -> Int64:
    var squared: Int64 = 0
    for i in lst:
        let ceiled = ceil(i).to_int()
        squared += ceiled * ceiled
    return squared","from testing import assert_equal, assert_true
from math import round

fn test_sum_squares():
    # Helper function to round float results to nearest integer
    fn round_result(x: Float64) -> Int:
        return round(x).to_int()

    # Check some simple cases
    assert_equal(round_result(sum_squares([1,2,3])), 14, ""Test case 1 failed"")
    assert_equal(round_result(sum_squares([1.0,2,3])), 14, ""Test case 2 failed"")
    assert_equal(round_result(sum_squares([1,3,5,7])), 84, ""Test case 3 failed"")
    assert_equal(round_result(sum_squares([1.4,4.2,0])), 29, ""Test case 4 failed"")
    assert_equal(round_result(sum_squares([-2.4,1,1])), 6, ""Test case 5 failed"")

    assert_equal(round_result(sum_squares([100,1,15,2])), 10230, ""Test case 6 failed"")
    assert_equal(round_result(sum_squares([10000,10000])), 200000000, ""Test case 7 failed"")
    assert_equal(round_result(sum_squares([-1.4,4.6,6.3])), 75, ""Test case 8 failed"")
    assert_equal(round_result(sum_squares([-1.4,17.9,18.9,19.9])), 1086, ""Test case 9 failed"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(round_result(sum_squares([0])), 0, ""Edge case 1 failed"")
    assert_equal(round_result(sum_squares([-1])), 1, ""Edge case 2 failed"")
    assert_equal(round_result(sum_squares([-1,1,0])), 2, ""Edge case 3 failed"")

    print(""All test cases passed!"")

fn main():
    test_sum_squares()",sum_squares
HumanEval-Mojo/134,"fn tri(n: Int) -> DynamicVector[Int]:
    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to return a DynamicVector of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = DynamicVector[1, 3, 2, 8]
    """"""","fn generate_triangle(n: Int) raises -> DynamicVector[Float64]:
    if n == 0:
        return DynamicVector[Float64]([1.0])
    
    var my_tri = DynamicVector[Float64]()
    my_tri.push_back(1.0)
    my_tri.push_back(3.0)
    
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.push_back(Float64(i) / 2.0 + 1.0)
        else:
            let prev = my_tri[i - 1]
            let prev_prev = my_tri[i - 2]
            my_tri.push_back(prev + prev_prev + (Float64(i) + 3.0) / 2.0)
    
    return my_tri

fn main() raises:
    let result = generate_triangle(5)
    for value in result:
        print(value)","from testing import assert_equal
from memory import memcmp
from math import sqrt

fn test_tri():
    print(""Running tests for 'tri' function..."")

    # Helper function to compare float lists
    fn compare_float_lists(actual: DynamicVector[Float64], expected: StaticIntTuple[...]) -> Bool:
        if len(actual) != len(expected):
            return False
        for i in range(len(expected)):
            if abs(actual[i] - Float64(expected[i])) > 1e-6:
                return False
        return True

    # Test cases
    assert_equal(compare_float_lists(tri(3), (1, 3, 2.0, 8.0)), True, ""Test case for n=3 failed"")
    assert_equal(compare_float_lists(tri(4), (1, 3, 2.0, 8.0, 3.0)), True, ""Test case for n=4 failed"")
    assert_equal(compare_float_lists(tri(5), (1, 3, 2.0, 8.0, 3.0, 15.0)), True, ""Test case for n=5 failed"")
    assert_equal(compare_float_lists(tri(6), (1, 3, 2.0, 8.0, 3.0, 15.0, 4.0)), True, ""Test case for n=6 failed"")
    assert_equal(compare_float_lists(tri(7), (1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0)), True, ""Test case for n=7 failed"")
    assert_equal(compare_float_lists(tri(8), (1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0)), True, ""Test case for n=8 failed"")
    assert_equal(compare_float_lists(tri(9), (1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0)), True, ""Test case for n=9 failed"")
    assert_equal(compare_float_lists(tri(20), (1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0)), True, ""Test case for n=20 failed"")

    # Edge cases
    assert_equal(compare_float_lists(tri(0), (1,)), True, ""Test case for n=0 failed"")
    assert_equal(compare_float_lists(tri(1), (1, 3)), True, ""Test case for n=1 failed"")

    print(""All tests passed!"")

fn main():
    test_tri()",tri
HumanEval-Mojo/135,"fn is_equal_to_sum_even(n: Int) -> Bool:
    """"""
    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    
    Example:
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""","fn is_valid(n: Int) -> Bool:
    return n % 2 == 0 and n >= 8","from testing import assert_equal

fn test_is_equal_to_sum_even():
    assert_equal(is_equal_to_sum_even(4), False, ""Test case 1 failed"")
    assert_equal(is_equal_to_sum_even(6), False, ""Test case 2 failed"")
    assert_equal(is_equal_to_sum_even(8), True, ""Test case 3 failed"")
    assert_equal(is_equal_to_sum_even(10), True, ""Test case 4 failed"")
    assert_equal(is_equal_to_sum_even(11), False, ""Test case 5 failed"")
    assert_equal(is_equal_to_sum_even(12), True, ""Test case 6 failed"")
    assert_equal(is_equal_to_sum_even(13), False, ""Test case 7 failed"")
    assert_equal(is_equal_to_sum_even(16), True, ""Test case 8 failed"")
    print(""All test cases passed!"")

fn main():
    test_is_equal_to_sum_even()",is_equal_to_sum_even
HumanEval-Mojo/136,"fn can_arrange(arr: List[Int]) -> Int:
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""","fn find_index(arr: DynamicVector[Int]) raises -> Int:
    var ind: Int = -1
    var i: Int = 1
    
    while i < len(arr):
        if arr[i] < arr[i-1]:
            ind = i
        i += 1
    
    return ind","from testing import assert_equal

fn test_can_arrange():
    # Check some simple cases
    assert_equal(can_arrange([1, 2, 4, 3, 5]), 3)
    assert_equal(can_arrange([1, 2, 4, 5]), -1)
    assert_equal(can_arrange([1, 4, 2, 5, 6, 7, 8, 9, 10]), 2)
    assert_equal(can_arrange([4, 8, 5, 7, 3]), 4)

    # Check some edge cases that are easy to work out by hand.
    assert_equal(can_arrange([]), -1)

    print(""All tests passed!"")

fn main():
    test_can_arrange()",can_arrange
HumanEval-Mojo/137,"fn special_factorial(n: Int) -> Int:
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""","fn calculate_special_factorial(n: Int) raises -> Int:
    var fact_i: Int = 1
    var special_fact: Int = 1
    
    for i in range(1, n + 1):
        fact_i *= i
        special_fact *= fact_i
        
        if special_fact < 0:
            raise Error(""Integer overflow occurred"")
    
    return special_fact","from testing import assert_equal

fn test_special_factorial():
    # Check some simple cases
    assert_equal(special_factorial(4), 288, ""Test 4 failed"")
    assert_equal(special_factorial(5), 34560, ""Test 5 failed"")
    assert_equal(special_factorial(7), 125411328000, ""Test 7 failed"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(special_factorial(1), 1, ""Test 1 failed"")

fn main():
    test_special_factorial()
    print(""All tests passed!"")",special_factorial
HumanEval-Mojo/138,"fn compare_one(a: AnyType, b: AnyType) -> AnyType:
    """"""
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) â -> 2.5
    compare_one(1, ""2,3"") â -> ""2,3""
    compare_one(""5,1"", ""6"") â -> ""6""
    compare_one(""1"", 1) â -> None
    """"""","fn compare_values(a: String, b: String) raises -> String?:
    var temp_a = a.replace("","", ""."")
    var temp_b = b.replace("","", ""."")
    
    let float_a = Float64(temp_a)
    let float_b = Float64(temp_b)
    
    if float_a == float_b:
        return None
    elif float_a > float_b:
        return a
    else:
        return b","from testing import assert_equal, assert_true
from sys import assert_true as sys_assert_true

fn test_compare_one():
    # Check some simple cases
    assert_equal(compare_one(1, 2), 2)
    assert_equal(compare_one(1, 2.5), 2.5)
    assert_equal(compare_one(2, 3), 3)
    assert_equal(compare_one(5, 6), 6)
    assert_equal(compare_one(1, ""2,3""), ""2,3"")
    assert_equal(compare_one(""5,1"", ""6""), ""6"")
    assert_equal(compare_one(""1"", ""2""), ""2"")
    assert_equal(compare_one(""1"", 1), None)

    # Check some edge cases that are easy to work out by hand.
    assert_true(True)

    print(""All tests passed!"")

fn main():
    test_compare_one()",compare_one
HumanEval-Mojo/139,"fn largest_smallest_integers(lst: List[Int]) -> Tuple[Int, Int]:
    """"""
    Create a function that returns a Tuple[Int, Int] (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    """"""","from python import Python

fn find_extremes(lst: PythonObject) -> Tuple[PythonObject, PythonObject]:
    let py = Python.import_module(""builtins"")
    
    let smallest = py.list(py.filter(lambda x: x < 0, lst))
    let largest = py.list(py.filter(lambda x: x > 0, lst))
    
    let max_smallest = py.max(smallest) if py.len(smallest) > 0 else py.None
    let min_largest = py.min(largest) if py.len(largest) > 0 else py.None
    
    return (max_smallest, min_largest)","from testing import assert_equal

fn test_largest_smallest_integers():
    # Check some simple cases
    assert_equal(largest_smallest_integers([2, 4, 1, 3, 5, 7]), (None, 1))
    assert_equal(largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]), (None, 1))
    assert_equal(largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]), (-2, 1))
    assert_equal(largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]), (-7, 2))
    assert_equal(largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]), (-9, 2))
    assert_equal(largest_smallest_integers([]), (None, None))
    assert_equal(largest_smallest_integers([0]), (None, None))
    assert_equal(largest_smallest_integers([-1, -3, -5, -6]), (-1, None))
    assert_equal(largest_smallest_integers([-1, -3, -5, -6, 0]), (-1, None))
    assert_equal(largest_smallest_integers([-6, -4, -4, -3, 1]), (-3, 1))
    assert_equal(largest_smallest_integers([-6, -4, -4, -3, -100, 1]), (-3, 1))

    # Check some edge cases that are easy to work out by hand.
    assert True

fn main():
    test_largest_smallest_integers()
    print(""All tests passed!"")",largest_smallest_integers
HumanEval-Mojo/140,"fn simplify(x: String, n: String) -> Bool:
    """"""Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n are string representations of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x and n are valid fractions, and do not have zero as denominator.

    Examples:
    simplify(""1/5"", ""5/1"") -> True
    simplify(""1/6"", ""2/1"") -> False
    simplify(""7/10"", ""10/2"") -> False
    """"""","fn is_rational_equal(x: String, n: String) raises -> Bool:
    let x_parts = x.split(""/"")
    let n_parts = n.split(""/"")
    
    if len(x_parts) != 2 or len(n_parts) != 2:
        raise Error(""Invalid input format"")
    
    let a = Int(x_parts[0])
    let b = Int(x_parts[1])
    let c = Int(n_parts[0])
    let d = Int(n_parts[1])
    
    if b == 0 or d == 0:
        raise Error(""Division by zero"")
    
    let numerator = a * c
    let denom = b * d
    
    return numerator % denom == 0","from testing import assert_true, assert_false

fn test_simplify():
    # Check some simple cases
    assert_true(simplify(""1/5"", ""5/1""), ""test1"")
    assert_false(simplify(""1/6"", ""2/1""), ""test2"")
    assert_true(simplify(""5/1"", ""3/1""), ""test3"")
    assert_false(simplify(""7/10"", ""10/2""), ""test4"")
    assert_true(simplify(""2/10"", ""50/10""), ""test5"")
    assert_true(simplify(""7/2"", ""4/2""), ""test6"")
    assert_true(simplify(""11/6"", ""6/1""), ""test7"")
    assert_false(simplify(""2/3"", ""5/2""), ""test8"")
    assert_false(simplify(""5/2"", ""3/5""), ""test9"")
    assert_true(simplify(""2/4"", ""8/4""), ""test10"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(simplify(""2/4"", ""4/2""), ""test11"")
    assert_true(simplify(""1/5"", ""5/1""), ""test12"")
    assert_false(simplify(""1/5"", ""1/5""), ""test13"")

fn main():
    test_simplify()
    print(""All tests passed!"")",simplify
HumanEval-Mojo/141,"fn words_in_sentence(sentence: String) -> String:
    """"""
    You are given a String representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a String that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new String should be the same as the original one.

    Example1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""","from python import Python

fn process_sentence(sentence: String) raises -> String:
    let py = Python.import_module(""builtins"")
    var new_lst = DynamicVector[String]()
    
    let words = sentence.split()
    for word in words:
        var flg: Int = 0
        if word.count() == 1:
            flg = 1
        
        for i in range(2, word.count()):
            if word.count() % i == 0:
                flg = 1
                break
        
        if flg == 0 or word.count() == 2:
            new_lst.append(word)
    
    return "" "".join(new_lst)

fn main() raises:
    let input_sentence = ""This is a test sentence""
    let result = process_sentence(input_sentence)
    print(result)","from testing import assert_equal

fn test_words_in_sentence():
    # Check some simple cases
    assert_equal(words_in_sentence(""This is a test""), ""is"")
    assert_equal(words_in_sentence(""lets go for swimming""), ""go for"")
    assert_equal(words_in_sentence(""there is no place available here""), ""there is no place"")
    assert_equal(words_in_sentence(""Hi I am Hussein""), ""Hi am Hussein"")
    assert_equal(words_in_sentence(""go for it""), ""go for it"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(words_in_sentence(""here""), """")
    assert_equal(words_in_sentence(""here is""), ""is"")

    print(""All tests passed!"")

fn main():
    test_words_in_sentence()",words_in_sentence
HumanEval-Mojo/142,"fn fix_spaces(text: String) -> String:
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example1"") == ""Example_1""
    fix_spaces("" Example2"") == ""_Example_2""
    fix_spaces("" Example  3"") == ""_Example-3""
    """"""","fn process_text(text: String) raises -> String:
    var new_text = String("""")
    var i: Int = 0
    var start: Int = 0
    var end: Int = 0
    
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-"" + String(text[i])
            elif end - start > 0:
                new_text += String(""_"").repeat(end - start) + String(text[i])
            else:
                new_text += String(text[i])
            start = i + 1
            end = i + 1
        i += 1
    
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += String(""_"").repeat(end - start)
    
    return new_text

fn main() raises:
    let text = ""This   is  a    test""
    let result = process_text(text)
    print(result)","from testing import assert_equal

fn test_fix_spaces():
    # Check some simple cases
    assert_equal(fix_spaces(""Example""), ""Example"", ""Test case 1 failed"")
    assert_equal(fix_spaces(""Mudasir Hanif ""), ""Mudasir_Hanif_"", ""Test case 2 failed"")
    assert_equal(fix_spaces(""Yellow Yellow  Dirty  Fellow""), ""Yellow_Yellow__Dirty__Fellow"", ""Test case 3 failed"")
    
    # Check some edge cases that are easy to work out by hand.
    assert_equal(fix_spaces(""Exa   mple""), ""Exa-mple"", ""Test case 4 failed"")
    assert_equal(fix_spaces(""   Exa 1 2 2 mple""), ""-Exa_1_2_2_mple"", ""Test case 5 failed"")

    print(""All test cases passed!"")

fn main():
    test_fix_spaces()",fix_spaces
HumanEval-Mojo/143,"fn sum_squares(lst: List[Int]) -> Int:
    """"""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""","fn process_list(lst: DynamicVector[Int]) raises -> Int:
    var result = DynamicVector[Int]()
    
    for i in range(len(lst)):
        if i % 3 == 0:
            result.append(lst[i] ** 2)
        elif i % 4 == 0 and i % 3 != 0:
            result.append(lst[i] ** 3)
        else:
            result.append(lst[i])
    
    var total: Int = 0
    for value in result:
        total += value
    
    return total

fn main() raises:
    let input_list = DynamicVector[Int](1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    let result = process_list(input_list)
    print(result)","from testing import assert_equal
from collections.vector import DynamicVector

fn sum_squares(vec: DynamicVector[Int]) -> Int:
    # Assuming the sum_squares function is implemented here
    # This is just a placeholder implementation
    var sum = 0
    for i in range(len(vec)):
        sum += vec[i] * vec[i]
    return sum

fn test_sum_squares():
    print(""Testing sum_squares function..."")

    assert_equal(sum_squares(DynamicVector[Int]([1,2,3])), 6)
    assert_equal(sum_squares(DynamicVector[Int]([1,4,9])), 14)
    assert_equal(sum_squares(DynamicVector[Int]([])), 0)
    assert_equal(sum_squares(DynamicVector[Int]([1,1,1,1,1,1,1,1,1])), 9)
    assert_equal(sum_squares(DynamicVector[Int]([-1,-1,-1,-1,-1,-1,-1,-1,-1])), -3)
    assert_equal(sum_squares(DynamicVector[Int]([0])), 0)
    assert_equal(sum_squares(DynamicVector[Int]([-1,-5,2,-1,-5])), -126)
    assert_equal(sum_squares(DynamicVector[Int]([-56,-99,1,0,-2])), 3030)
    assert_equal(sum_squares(DynamicVector[Int]([-1,0,0,0,0,0,0,0,-1])), 0)
    assert_equal(sum_squares(DynamicVector[Int]([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])), -14196)
    assert_equal(sum_squares(DynamicVector[Int]([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])), -1448)

    print(""All tests passed!"")

fn main():
    test_sum_squares()",sum_squares
HumanEval-Mojo/144,"fn file_name_check(file_name: String) -> String:
    """"""Create a function which takes a String representing a file's name, and returns
    'Yes' if the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphabet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphabet letter)
    """"""","from python import Python

fn is_valid_file_name(file_name: String) -> String:
    let suf = Python.list([""txt"", ""exe"", ""dll""])
    let lst = file_name.split(""."")
    
    if len(lst) != 2:
        return ""No""
    
    if not Python.list(suf).__contains__(lst[1]):
        return ""No""
    
    if len(lst[0]) == 0:
        return ""No""
    
    if not lst[0][0].isalpha():
        return ""No""
    
    var digit_count: Int = 0
    for c in lst[0]:
        if c.isdigit():
            digit_count += 1
    
    if digit_count > 3:
        return ""No""
    
    return ""Yes""

fn main():
    let result = is_valid_file_name(""example.txt"")
    print(result)","from testing import assert_equal

fn test_file_name_check():
    # Check some simple cases
    assert_equal(file_name_check(""example.txt""), ""Yes"")
    assert_equal(file_name_check(""1example.dll""), ""No"")
    assert_equal(file_name_check(""s1sdf3.asd""), ""No"")
    assert_equal(file_name_check(""K.dll""), ""Yes"")
    assert_equal(file_name_check(""MY16FILE3.exe""), ""Yes"")
    assert_equal(file_name_check(""His12FILE94.exe""), ""No"")
    assert_equal(file_name_check(""_Y.txt""), ""No"")
    assert_equal(file_name_check(""?aREYA.exe""), ""No"")
    assert_equal(file_name_check(""/this_is_valid.dll""), ""No"")
    assert_equal(file_name_check(""this_is_valid.wow""), ""No"")
    assert_equal(file_name_check(""this_is_valid.txt""), ""Yes"")
    assert_equal(file_name_check(""this_is_valid.txtexe""), ""No"")
    assert_equal(file_name_check(""#this2_i4s_5valid.ten""), ""No"")
    assert_equal(file_name_check(""@this1_is6_valid.exe""), ""No"")
    assert_equal(file_name_check(""this_is_12valid.6exe4.txt""), ""No"")
    assert_equal(file_name_check(""all.exe.txt""), ""No"")
    assert_equal(file_name_check(""I563_No.exe""), ""Yes"")
    assert_equal(file_name_check(""Is3youfault.txt""), ""Yes"")
    assert_equal(file_name_check(""no_one#knows.dll""), ""Yes"")
    assert_equal(file_name_check(""1I563_Yes3.exe""), ""No"")
    assert_equal(file_name_check(""I563_Yes3.txtt""), ""No"")
    assert_equal(file_name_check(""final..txt""), ""No"")
    assert_equal(file_name_check(""final132""), ""No"")
    assert_equal(file_name_check(""_f4indsartal132.""), ""No"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(file_name_check("".txt""), ""No"")
    assert_equal(file_name_check(""s.""), ""No"")

    print(""All tests passed!"")

fn main():
    test_file_name_check()",file_name_check
HumanEval-Mojo/145,"fn get_max_triples(n: Int) -> Int:
    """"""
    You are given a positive integer n. You have to create an integer array 'a' of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of 'a' where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example:
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""","from python import Python

fn solve(n: Int) raises -> Int:
    let py = Python.import_module(""builtins"")
    var A = py.list()
    for i in range(1, n + 1):
        A.append(i * i - i + 1)
    
    var ans = py.list()
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (A[i] + A[j] + A[k]) % 3 == 0:
                    ans.append(py.tuple([A[i], A[j], A[k]]))
    
    return len(ans)

fn main() raises:
    let n = 5
    let result = solve(n)
    print(result)","from testing import assert_equal

fn test_get_max_triples():
    assert_equal(get_max_triples(5), 1, ""Test case 1 failed"")
    assert_equal(get_max_triples(6), 4, ""Test case 2 failed"")
    assert_equal(get_max_triples(10), 36, ""Test case 3 failed"")
    assert_equal(get_max_triples(100), 53361, ""Test case 4 failed"")

fn main():
    test_get_max_triples()
    print(""All tests passed!"")",get_max_triples
HumanEval-Mojo/146,"fn specialFilter(nums: List[Int]) -> Int:
    """"""Write a function that takes a list of integers as input and returns 
    the number of elements in the list that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""","fn count_special_numbers(nums: DynamicVector[Int]) raises -> Int:
    var count: Int = 0
    let odd_digits = StaticIntTuple[5](1, 3, 5, 7, 9)

    for num in nums:
        if num > 10:
            let number_as_string = String(num)
            if number_as_string.length() > 0:
                let first_digit = Int(number_as_string[0])
                let last_digit = Int(number_as_string[number_as_string.length() - 1])
                
                var first_is_odd = False
                var last_is_odd = False
                
                for digit in odd_digits:
                    if first_digit == digit:
                        first_is_odd = True
                    if last_digit == digit:
                        last_is_odd = True
                
                if first_is_odd and last_is_odd:
                    count += 1

    return count

fn main() raises:
    let nums = DynamicVector[Int](10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
    let result = count_special_numbers(nums)
    print(result)","from testing import assert_equal

fn test_specialFilter():
    # Check some simple cases
    assert_equal(specialFilter([5, -2, 1, -5]), 0)
    assert_equal(specialFilter([15, -73, 14, -15]), 1)
    assert_equal(specialFilter([33, -2, -3, 45, 21, 109]), 2)
    assert_equal(specialFilter([43, -12, 93, 125, 121, 109]), 4)
    assert_equal(specialFilter([71, -2, -33, 75, 21, 19]), 3)

    # Check some edge cases that are easy to work out by hand.
    assert_equal(specialFilter([1]), 0)
    assert_equal(specialFilter([]), 0)

    print(""All tests passed!"")

fn main():
    test_specialFilter()",specialFilter
HumanEval-Mojo/147,"fn sorted_list_sum(lst: List[String]) -> List[String]:
    """"""Write a function that accepts a List of Strings as a parameter,
    deletes the Strings that have odd lengths from it,
    and returns the resulted List with a sorted order.
    The List is always a List of Strings and never a List of numbers,
    and it may contain duplicates.
    The order of the List should be ascending by length of each word, and you
    should return the List sorted by that rule.
    If two words have the same length, sort the List alphabetically.
    The function should return a List of Strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert sorted_list_sum([""aa"", ""a"", ""aaa""]) == [""aa""]
    assert sorted_list_sum([""ab"", ""a"", ""aaa"", ""cd""]) == [""ab"", ""cd""]
    """"""","from python import Python

fn process_strings(lst: PythonObject) raises -> PythonObject:
    let py = Python.import_module(""builtins"")
    
    lst.sort()
    
    let new_lst = py.list()
    
    for i in range(len(lst)):
        let item = lst[i]
        if len(item) % 2 == 0:
            new_lst.append(item)
    
    return py.sorted(new_lst, key=len)

fn main() raises:
    let py = Python.import_module(""builtins"")
    let input_list = py.list([""apple"", ""banana"", ""cherry"", ""date"", ""elderberry""])
    
    let result = process_strings(input_list)
    print(result)","from testing import assert_equal
from collections import List, String

fn test_sorted_list_sum():
    # Check some simple cases
    assert_equal(sorted_list_sum([""aa"", ""a"", ""aaa""]), [""aa""])
    assert_equal(sorted_list_sum([""school"", ""AI"", ""asdf"", ""b""]), [""AI"", ""asdf"", ""school""])
    assert_equal(sorted_list_sum([""d"", ""b"", ""c"", ""a""]), [])
    assert_equal(sorted_list_sum([""d"", ""dcba"", ""abcd"", ""a""]), [""abcd"", ""dcba""])

    # Check some edge cases that are easy to work out by hand.
    assert_equal(sorted_list_sum([""AI"", ""ai"", ""au""]), [""AI"", ""ai"", ""au""])
    assert_equal(sorted_list_sum([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]), [])
    assert_equal(sorted_list_sum([""aaaa"", ""bbbb"", ""dd"", ""cc""]), [""cc"", ""dd"", ""aaaa"", ""bbbb""])

    print(""All tests passed!"")

fn main():
    test_sorted_list_sum()

fn sorted_list_sum(input: List[String]) -> List[String]:
    # Implementation of sorted_list_sum function goes here
    # This is a placeholder and should be replaced with the actual implementation
    return []",sorted_list_sum
HumanEval-Mojo/148,"fn order_by_points(nums: List[Int]) -> List[Int]:
    """"""
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""","from python import Python

fn digits_sum(n: Int) -> Int:
    var neg: Int = 1
    var num: Int = n
    if num < 0:
        num = -1 * num
        neg = -1
    
    let py = Python.import_module(""builtins"")
    let str_num = py.str(num)
    let digits = py.list(str_num)
    
    var sum: Int = 0
    for i in range(len(digits)):
        let digit = py.int(digits[i])
        if i == 0:
            sum += digit * neg
        else:
            sum += digit
    
    return sum

fn custom_sort(nums: PythonObject) -> PythonObject:
    let py = Python.import_module(""builtins"")
    return py.sorted(nums, key=digits_sum)","from testing import assert_equal, assert_true
from collections.vector import DynamicVector

fn order_by_points(inout v: DynamicVector[Int]) -> DynamicVector[Int]:
    # Assuming the implementation of order_by_points is defined elsewhere
    # This is just a placeholder for the actual implementation
    return v

fn test_order_by_points():
    # Check some simple cases
    assert_equal(order_by_points(DynamicVector[Int]([1, 11, -1, -11, -12])), 
                 DynamicVector[Int]([-1, -11, 1, -12, 11]))
    
    assert_equal(order_by_points(DynamicVector[Int]([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46])), 
                 DynamicVector[Int]([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]))
    
    assert_equal(order_by_points(DynamicVector[Int]([])), 
                 DynamicVector[Int]([]))
    
    assert_equal(order_by_points(DynamicVector[Int]([1, -11, -32, 43, 54, -98, 2, -3])), 
                 DynamicVector[Int]([-3, -32, -98, -11, 1, 2, 43, 54]))
    
    assert_equal(order_by_points(DynamicVector[Int]([1,2,3,4,5,6,7,8,9,10,11])), 
                 DynamicVector[Int]([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]))
    
    assert_equal(order_by_points(DynamicVector[Int]([0,6,6,-76,-21,23,4])), 
                 DynamicVector[Int]([-76, -21, 0, 4, 23, 6, 6]))

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")

    print(""All tests passed!"")

fn main():
    test_order_by_points()",order_by_points
HumanEval-Mojo/149,"fn bf(planet1: String, planet2: String) -> Tuple[String, ...]:
    '''
    There are eight planets in our solar system: the closest to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as Strings planet1 and planet2. 
    The function should return a Tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty Tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''","from collections.vector import DynamicVector
from memory.unsafe import Pointer

fn planets_between(planet1: String, planet2: String) raises -> DynamicVector[String]:
    let planet_names = StaticTuple[8, String](""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    var result = DynamicVector[String]()

    var planet1_index: Int = -1
    var planet2_index: Int = -1

    for i in range(8):
        if planet_names[i] == planet1:
            planet1_index = i
        if planet_names[i] == planet2:
            planet2_index = i

    if planet1_index == -1 or planet2_index == -1 or planet1_index == planet2_index:
        return result

    let start = min(planet1_index, planet2_index) + 1
    let end = max(planet1_index, planet2_index)

    for i in range(start, end):
        result.append(planet_names[i])

    return result

fn min(a: Int, b: Int) -> Int:
    if a < b:
        return a
    return b

fn max(a: Int, b: Int) -> Int:
    if a > b:
        return a
    return b","from testing import assert_equal, assert_true
from collections import String, DynamicVector

fn test_bf():
    # Check some simple cases
    var result1 = bf(""Jupiter"", ""Neptune"")
    assert_equal(result1.size, 2, ""First test error: incorrect result size"")
    assert_equal(result1[0], ""Saturn"", ""First test error: incorrect first planet"")
    assert_equal(result1[1], ""Uranus"", ""First test error: incorrect second planet"")

    var result2 = bf(""Earth"", ""Mercury"")
    assert_equal(result2.size, 1, ""Second test error: incorrect result size"")
    assert_equal(result2[0], ""Venus"", ""Second test error: incorrect planet"")

    var result3 = bf(""Mercury"", ""Uranus"")
    assert_equal(result3.size, 5, ""Third test error: incorrect result size"")
    assert_equal(result3[0], ""Venus"", ""Third test error: incorrect first planet"")
    assert_equal(result3[1], ""Earth"", ""Third test error: incorrect second planet"")
    assert_equal(result3[2], ""Mars"", ""Third test error: incorrect third planet"")
    assert_equal(result3[3], ""Jupiter"", ""Third test error: incorrect fourth planet"")
    assert_equal(result3[4], ""Saturn"", ""Third test error: incorrect fifth planet"")

    var result4 = bf(""Neptune"", ""Venus"")
    assert_equal(result4.size, 5, ""Fourth test error: incorrect result size"")
    assert_equal(result4[0], ""Earth"", ""Fourth test error: incorrect first planet"")
    assert_equal(result4[1], ""Mars"", ""Fourth test error: incorrect second planet"")
    assert_equal(result4[2], ""Jupiter"", ""Fourth test error: incorrect third planet"")
    assert_equal(result4[3], ""Saturn"", ""Fourth test error: incorrect fourth planet"")
    assert_equal(result4[4], ""Uranus"", ""Fourth test error: incorrect fifth planet"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(bf(""Earth"", ""Earth"").is_empty(), ""Earth to Earth should return empty result"")
    assert_true(bf(""Mars"", ""Earth"").is_empty(), ""Mars to Earth should return empty result"")
    assert_true(bf(""Jupiter"", ""Makemake"").is_empty(), ""Jupiter to Makemake should return empty result"")

    print(""All tests passed!"")

fn main():
    test_bf()",bf
HumanEval-Mojo/150,"fn cycpattern_check(a: String, b: String) -> Bool:
    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"", ""abd"") => False
    cycpattern_check(""hello"", ""ell"") => True
    cycpattern_check(""whassup"", ""psus"") => False
    cycpattern_check(""abab"", ""baa"") => True
    cycpattern_check(""efef"", ""eeff"") => False
    cycpattern_check(""himenss"", ""simen"") => True

    """"""","fn is_rotation(a: String, b: String) -> Bool:
    let l: Int = len(b)
    if l == 0 or len(a) != l:
        return False

    let pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False","from testing import assert_equal, assert_true, assert_false

fn test_cycpattern_check():
    print(""Running tests for cycpattern_check..."")

    # Test case 0
    assert_false(cycpattern_check(""xyzw"", ""xyw""), ""test #0 failed"")

    # Test case 1
    assert_true(cycpattern_check(""yello"", ""ell""), ""test #1 failed"")

    # Test case 2
    assert_false(cycpattern_check(""whattup"", ""ptut""), ""test #2 failed"")

    # Test case 3
    assert_true(cycpattern_check(""efef"", ""fee""), ""test #3 failed"")

    # Test case 4
    assert_false(cycpattern_check(""abab"", ""aabb""), ""test #4 failed"")

    # Test case 5
    assert_true(cycpattern_check(""winemtt"", ""tinem""), ""test #5 failed"")

    print(""All tests passed!"")

fn main():
    test_cycpattern_check()",cycpattern_check
HumanEval-Mojo/151,"fn x_or_y(n: Int, x: Int, y: Int) -> Int:
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    x_or_y(7, 34, 12) == 34
    x_or_y(15, 8, 5) == 5
    
    """"""","fn check_prime(n: Int, x: Int, y: Int) -> Int:
    if n == 1:
        return y
    
    for i in range(2, n):
        if n % i == 0:
            return y
    
    return x

fn main():
    let result = check_prime(7, 10, 20)
    print(result)","from testing import assert_equal

fn x_or_y(x: Int, y: Int, z: Int) -> Int:
    # Assuming the implementation of x_or_y is defined here
    # For this example, let's assume it returns y if x > y, otherwise z
    if x > y:
        return y
    else:
        return z

fn test_x_or_y():
    print(""Testing x_or_y function..."")

    # Check some simple cases
    assert_equal(x_or_y(7, 34, 12), 34)
    assert_equal(x_or_y(15, 8, 5), 5)
    assert_equal(x_or_y(3, 33, 5212), 33)
    assert_equal(x_or_y(1259, 3, 52), 3)
    assert_equal(x_or_y(7919, -1, 12), -1)
    assert_equal(x_or_y(3609, 1245, 583), 583)
    assert_equal(x_or_y(91, 56, 129), 129)
    assert_equal(x_or_y(6, 34, 1234), 1234)

    # Check some edge cases that are easy to work out by hand
    assert_equal(x_or_y(1, 2, 0), 0)
    assert_equal(x_or_y(2, 2, 0), 2)

    print(""All tests passed!"")

fn main():
    test_x_or_y()",x_or_y
HumanEval-Mojo/152,"fn compare(game: List[Int], guess: List[Int]) -> List[Int]:
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two lists of scores and guesses of equal length, where each index shows a match. 
    Return a list of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""","fn calculate_differences(game: List[Int], guess: List[Int]) raises -> List[Int]:
    var differences = List[Int]()
    if len(game) != len(guess):
        raise Error(""Lists must have the same length"")
    
    for i in range(len(game)):
        differences.append(abs(game[i] - guess[i]))
    
    return differences","from testing import assert_equal, assert_true
from collections.vector import DynamicVector

fn compare(a: DynamicVector[Int], b: DynamicVector[Int]) -> DynamicVector[Int]:
    # Assuming the 'compare' function is implemented here
    # This is a placeholder implementation
    var result = DynamicVector[Int]()
    for i in range(len(a)):
        result.push_back(abs(a[i] - b[i]))
    return result

fn test_compare():
    print(""Running tests for 'compare' function..."")

    # Test case 1
    var input1 = DynamicVector[Int]([1,2,3,4,5,1])
    var input2 = DynamicVector[Int]([1,2,3,4,2,-2])
    var expected1 = DynamicVector[Int]([0,0,0,0,3,3])
    assert_equal(compare(input1, input2), expected1, ""Test case 1 failed"")

    # Test case 2
    var input3 = DynamicVector[Int]([0,0,0,0,0,0])
    var input4 = DynamicVector[Int]([0,0,0,0,0,0])
    var expected2 = DynamicVector[Int]([0,0,0,0,0,0])
    assert_equal(compare(input3, input4), expected2, ""Test case 2 failed"")

    # Test case 3
    var input5 = DynamicVector[Int]([1,2,3])
    var input6 = DynamicVector[Int]([-1,-2,-3])
    var expected3 = DynamicVector[Int]([2,4,6])
    assert_equal(compare(input5, input6), expected3, ""Test case 3 failed"")

    # Test case 4
    var input7 = DynamicVector[Int]([1,2,3,5])
    var input8 = DynamicVector[Int]([-1,2,3,4])
    var expected4 = DynamicVector[Int]([2,0,0,1])
    assert_equal(compare(input7, input8), expected4, ""Test case 4 failed"")

    # Additional assertion
    assert_true(True, ""This assertion should always pass"")

    print(""All tests passed successfully!"")

fn main():
    test_compare()",compare
HumanEval-Mojo/153,"fn double_the_difference(lst: List[Int]) -> Int:
    '''
    Given a list of integers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''","fn process_list(lst: List[Int]) raises -> Int:
    var result: Int = 0
    for i in lst:
        if i > 0 and i % 2 != 0:
            let str_i = String(i)
            if ""."" not in str_i:
                result += i ** 2
    return result","from testing import assert_equal
from math import pow
from memory import memset_zero
from sys.info import simdwidthof

fn double_the_difference(lst: DynamicVector[Float64]) -> Float64:
    # Assuming the implementation of double_the_difference is defined elsewhere

fn test_double_the_difference():
    print(""Running tests for double_the_difference:"")

    # Check some simple cases
    assert_equal(double_the_difference(DynamicVector[Float64]()), 0.0, ""Test case 1 failed"")
    
    var test2 = DynamicVector[Float64]()
    test2.push_back(5.0)
    test2.push_back(4.0)
    assert_equal(double_the_difference(test2), 25.0, ""Test case 2 failed"")
    
    var test3 = DynamicVector[Float64]()
    test3.push_back(0.1)
    test3.push_back(0.2)
    test3.push_back(0.3)
    assert_equal(double_the_difference(test3), 0.0, ""Test case 3 failed"")
    
    var test4 = DynamicVector[Float64]()
    test4.push_back(-10.0)
    test4.push_back(-20.0)
    test4.push_back(-30.0)
    assert_equal(double_the_difference(test4), 0.0, ""Test case 4 failed"")

    # Check some edge cases
    var test5 = DynamicVector[Float64]()
    test5.push_back(-1.0)
    test5.push_back(-2.0)
    test5.push_back(8.0)
    assert_equal(double_the_difference(test5), 0.0, ""Test case 5 failed"")
    
    var test6 = DynamicVector[Float64]()
    test6.push_back(0.2)
    test6.push_back(3.0)
    test6.push_back(5.0)
    assert_equal(double_the_difference(test6), 34.0, ""Test case 6 failed"")

    # Create a list from -99 to 99 with step 2
    var test7 = DynamicVector[Float64]()
    for i in range(-99, 100, 2):
        test7.push_back(Float64(i))

    var odd_sum: Float64 = 0.0
    for i in range(test7.size):
        let value = test7[i]
        if value % 2 != 0 and value > 0:
            odd_sum += pow(value, 2)

    assert_equal(double_the_difference(test7), odd_sum, ""Test case 7 failed"")

    print(""All tests passed!"")

fn main():
    test_double_the_difference()",double_the_difference
HumanEval-Mojo/154,"fn Strongest_Extension(class_name: String, extensions: List[String]) -> String:
    """"""You will be given the name of a class (a String) and a List of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a String in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the List.
    For example, if you are given ""Slices"" as the class and a List of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """"""","fn find_strongest_extension(extensions: List[String], class_name: String) raises -> String:
    var strong = extensions[0]
    var my_val = count_upper(extensions[0]) - count_lower(extensions[0])
    
    for s in extensions:
        let val = count_upper(s) - count_lower(s)
        if val > my_val:
            strong = s
            my_val = val
    
    return class_name + ""."" + strong

fn count_upper(s: String) -> Int:
    var count = 0
    for c in s:
        if c.isalpha() and c.isupper():
            count += 1
    return count

fn count_lower(s: String) -> Int:
    var count = 0
    for c in s:
        if c.isalpha() and c.islower():
            count += 1
    return count","from testing import assert_equal
from sys import assert_true

fn test_Strongest_Extension():
    # Check some simple cases
    assert_equal(Strongest_Extension(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]), ""Watashi.eIGHt8OKe"")
    assert_equal(Strongest_Extension(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]), ""Boku123.YEs.WeCaNe"")
    assert_equal(Strongest_Extension(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]), ""__YESIMHERE.NuLl__"")
    assert_equal(Strongest_Extension(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]), ""K.TAR"")
    assert_equal(Strongest_Extension(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]), ""__HAHA.123"")
    assert_equal(Strongest_Extension(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]), ""YameRore.okIWILL123"")
    assert_equal(Strongest_Extension(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]), ""finNNalLLly.WoW"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(Strongest_Extension(""_"", [""Bb"", ""91245""]), ""_.Bb"")
    assert_equal(Strongest_Extension(""Sp"", [""671235"", ""Bb""]), ""Sp.671235"")

    print(""All tests passed!"")

fn main():
    test_Strongest_Extension()",Strongest_Extension
HumanEval-Mojo/155,"fn even_odd_count(num: Int) -> Tuple[Int, Int]:
    """"""Given an integer, return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""","fn count_even_odd(num: Int) -> Tuple[Int, Int]:
    var even_count: Int = 0
    var odd_count: Int = 0
    let num_str = String(abs(num))
    
    for i in range(len(num_str)):
        let digit = Int(num_str[i])
        if digit % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    
    return (even_count, odd_count)","from testing import assert_equal

fn test_even_odd_count():
    # Check some simple cases
    assert_equal(even_odd_count(7), (0, 1))
    assert_equal(even_odd_count(-78), (1, 1))
    assert_equal(even_odd_count(3452), (2, 2))
    assert_equal(even_odd_count(346211), (3, 3))
    assert_equal(even_odd_count(-345821), (3, 3))
    assert_equal(even_odd_count(-2), (1, 0))
    assert_equal(even_odd_count(-45347), (2, 3))
    assert_equal(even_odd_count(0), (1, 0))

    # Check some edge cases that are easy to work out by hand.
    assert True

fn main():
    test_even_odd_count()
    print(""All tests passed!"")",even_odd_count
HumanEval-Mojo/156,"fn find_max(words: List[String]) -> String:
    """"""Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max([""name"", ""of"", ""string""]) == ""string""
    find_max([""name"", ""enam"", ""game""]) == ""enam""
    find_max([""aaaaaaa"", ""bb"" ,""cc""]) == ""aaaaaaa""
    """"""","from python import Python
from collections.vector import DynamicVector
from algorithm import sort

fn custom_sort(a: String, b: String) -> Bool:
    let py = Python()
    let set_a = py.set(a)
    let set_b = py.set(b)
    
    if len(set_a) != len(set_b):
        return len(set_a) > len(set_b)
    return a < b

fn find_special_string(words: DynamicVector[String]) -> String:
    if words.size() == 0:
        return """"
    
    var sorted_words = words
    sort[custom_sort](sorted_words)
    
    return sorted_words[0]","from testing import assert_equal

fn test_find_max():
    # Check some simple cases
    assert_equal(find_max([""name"", ""of"", ""string""]), ""string"", ""t1"")
    assert_equal(find_max([""name"", ""enam"", ""game""]), ""enam"", ""t2"")
    assert_equal(find_max([""aaaaaaa"", ""bb"", ""cc""]), ""aaaaaaa"", ""t3"")
    assert_equal(find_max([""abc"", ""cba""]), ""abc"", ""t4"")
    assert_equal(find_max([""play"", ""this"", ""game"", ""of"", ""footbott""]), ""footbott"", ""t5"")
    assert_equal(find_max([""we"", ""are"", ""gonna"", ""rock""]), ""gonna"", ""t6"")
    assert_equal(find_max([""we"", ""are"", ""a"", ""mad"", ""nation""]), ""nation"", ""t7"")
    assert_equal(find_max([""this"", ""is"", ""a"", ""prrk""]), ""this"", ""t8"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(find_max([""b""]), ""b"", ""t9"")
    assert_equal(find_max([""play"", ""play"", ""play""]), ""play"", ""t10"")

    print(""All tests passed!"")

fn main():
    test_find_max()",find_max
HumanEval-Mojo/157,"fn right_angle_triangle(a: Float64, b: Float64, c: Float64) -> Bool:
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3.0, 4.0, 5.0) == True
    right_angle_triangle(1.0, 2.0, 3.0) == False
    '''","fn is_pythagorean_triplet(a: Int, b: Int, c: Int) -> Bool:
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b","from testing import assert_true, assert_false

fn test_right_angle_triangle():
    # Check some simple cases
    assert_true(right_angle_triangle(3, 4, 5), ""Failed: 3, 4, 5 should be a right angle triangle"")
    assert_false(right_angle_triangle(1, 2, 3), ""Failed: 1, 2, 3 should not be a right angle triangle"")
    assert_true(right_angle_triangle(10, 6, 8), ""Failed: 10, 6, 8 should be a right angle triangle"")
    assert_false(right_angle_triangle(2, 2, 2), ""Failed: 2, 2, 2 should not be a right angle triangle"")
    assert_true(right_angle_triangle(7, 24, 25), ""Failed: 7, 24, 25 should be a right angle triangle"")
    assert_false(right_angle_triangle(10, 5, 7), ""Failed: 10, 5, 7 should not be a right angle triangle"")
    assert_true(right_angle_triangle(5, 12, 13), ""Failed: 5, 12, 13 should be a right angle triangle"")
    assert_true(right_angle_triangle(15, 8, 17), ""Failed: 15, 8, 17 should be a right angle triangle"")
    assert_true(right_angle_triangle(48, 55, 73), ""Failed: 48, 55, 73 should be a right angle triangle"")

    # Check some edge cases that are easy to work out by hand
    assert_false(right_angle_triangle(1, 1, 1), ""Failed: 1, 1, 1 should not be a right angle triangle"")
    assert_false(right_angle_triangle(2, 2, 10), ""Failed: 2, 2, 10 should not be a right angle triangle"")

    print(""All tests passed!"")

fn main():
    test_right_angle_triangle()",right_angle_triangle
HumanEval-Mojo/158,"fn eat(number: Int, need: Int, remaining: Int) -> StaticTuple[2, Int]:
    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    You should return a StaticTuple of [ total number of eaten carrots after your meals,
                                         the number of carrots left after your meals ]
    If there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> StaticTuple(11, 4)
    * eat(4, 8, 9) -> StaticTuple(12, 1)
    * eat(1, 10, 10) -> StaticTuple(11, 0)
    * eat(2, 11, 5) -> StaticTuple(7, 0)
    
    Parameters:
    number : Int
        The number of carrots that you have eaten.
    need : Int
        The number of carrots that you need to eat.
    remaining : Int
        The number of remaining carrots that exist in stock
    
    Constraints:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Returns:
    StaticTuple[2, Int]: A tuple containing the total number of eaten carrots and the number of carrots left.

    Have fun :)
    """"""","fn calculate_values(need: Int, remaining: Int, number: Int) -> (Int, Int):
    if need <= remaining:
        return (number + need, remaining - need)
    else:
        return (number + remaining, 0)","from testing import assert_equal, assert_true

fn test_eat():
    print(""Running tests for 'eat' function..."")

    # Check some simple cases
    assert_true(True, ""This prints if this assert fails 1 (good for debugging!)"")
    assert_equal(eat(5, 6, 10), [11, 4], ""Error in test case 1"")
    assert_equal(eat(4, 8, 9), [12, 1], ""Error in test case 2"")
    assert_equal(eat(1, 10, 10), [11, 0], ""Error in test case 3"")
    assert_equal(eat(2, 11, 5), [7, 0], ""Error in test case 4"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")
    assert_equal(eat(4, 5, 7), [9, 2], ""Error in test case 5"")
    assert_equal(eat(4, 5, 1), [5, 0], ""Error in test case 6"")

    print(""All tests passed!"")

fn main():
    test_eat()",eat
HumanEval-Mojo/159,"fn int_to_mini_roman(number: Int) -> String:
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    int_to_mini_roman(19) == ""xix""
    int_to_mini_roman(152) == ""clii""
    int_to_mini_roman(426) == ""cdxxvi""
    """"""","from python import Python

fn int_to_roman(number: Int) raises -> String:
    let py = Python.import_module(""builtins"")
    
    let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
    let sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"", ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""]
    
    var i: Int = 12
    var res = String()
    var remaining = number
    
    while remaining > 0:
        let div = remaining // num[i]
        remaining %= num[i]
        
        for _ in range(div):
            res += sym[i]
        
        i -= 1
    
    return py.str.lower(res)

fn main() raises:
    let result = int_to_roman(1994)
    print(result)","from testing import assert_equal

fn test_int_to_mini_roman():
    # Check some simple cases
    assert_equal(int_to_mini_roman(19), ""xix"")
    assert_equal(int_to_mini_roman(152), ""clii"")
    assert_equal(int_to_mini_roman(251), ""ccli"")
    assert_equal(int_to_mini_roman(426), ""cdxxvi"")
    assert_equal(int_to_mini_roman(500), ""d"")
    assert_equal(int_to_mini_roman(1), ""i"")
    assert_equal(int_to_mini_roman(4), ""iv"")
    assert_equal(int_to_mini_roman(43), ""xliii"")
    assert_equal(int_to_mini_roman(90), ""xc"")
    assert_equal(int_to_mini_roman(94), ""xciv"")
    assert_equal(int_to_mini_roman(532), ""dxxxii"")
    assert_equal(int_to_mini_roman(900), ""cm"")
    assert_equal(int_to_mini_roman(994), ""cmxciv"")
    assert_equal(int_to_mini_roman(1000), ""m"")

    # Check some edge cases that are easy to work out by hand.
    # In this case, we don't have any specific edge case checks,
    # so we'll just assert true to maintain the structure
    assert True

fn main():
    test_int_to_mini_roman()
    print(""All tests passed!"")",int_to_mini_roman
HumanEval-Mojo/160,"fn generate_integers(a: Int, b: Int) -> PythonObject:
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""","fn get_even_numbers(a: Int, b: Int) -> DynamicVector[Int]:
    let lower = max(2, min(a, b))
    let upper = min(8, max(a, b))
    
    var result = DynamicVector[Int]()
    for i in range(lower, upper + 1):
        if i % 2 == 0:
            result.append(i)
    
    return result","from testing import assert_equal, assert_true
from collections.vector import DynamicVector

fn test_generate_integers():
    # Check some simple cases
    assert_equal(generate_integers(2, 10), DynamicVector[Int]([2, 4, 6, 8]), ""Test 1"")
    assert_equal(generate_integers(10, 2), DynamicVector[Int]([2, 4, 6, 8]), ""Test 2"")
    assert_equal(generate_integers(132, 2), DynamicVector[Int]([2, 4, 6, 8]), ""Test 3"")
    assert_equal(generate_integers(17, 89), DynamicVector[Int](), ""Test 4"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True, ""This prints if this assert fails 2 (also good for debugging!)"")

    print(""All tests passed!"")

fn main():
    test_generate_integers()",generate_integers
HumanEval-Mojo/161,"fn string_to_md5(text: String) -> String:
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    Example:
    let result = string_to_md5(""Hello world"")
    assert(result == ""3e25960a79dbc69b674cd4ec67a72c62"")
    """"""","from python import Python
from python.object import PythonObject

fn md5_hash(text: String) raises -> String:
    let hashlib = Python.import_module(""hashlib"")
    let encoded_text = text.encode(""ascii"")
    let md5_hash = hashlib.md5(encoded_text)
    return String(md5_hash.hexdigest())

fn main() raises:
    let input_text = ""Hello, Mojo!""
    let result = md5_hash(input_text)
    print(result)","from testing import assert_equal, assert_true
from utils.vector import DynamicVector

fn test_string_to_md5():
    # Check some simple cases
    assert_equal(string_to_md5(""Hello world""), ""3e25960a79dbc69b674cd4ec67a72c62"")
    assert_equal(string_to_md5(""""), None)
    assert_equal(string_to_md5(""A B C""), ""0ef78513b0cb8cef12743f5aeb35f888"")
    assert_equal(string_to_md5(""password""), ""5f4dcc3b5aa765d61d8327deb882cf99"")

    # Check some edge cases that are easy to work out by hand.
    assert_true(True)

fn main():
    test_string_to_md5()
    print(""All tests passed!"")",string_to_md5
HumanEval-Mojo/162,"fn solve(s: String) -> String:
    """"""You are given a string s.
    If s[i] is a letter, reverse its case from lower to upper or vice versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulting string.
    
    Examples:
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""","fn swap_case_or_reverse(s: String) raises -> String:
    var flg: Int = 0
    var idx: Int = 0
    var new_str = String(s)
    
    for i in range(len(s)):
        let char = s[i]
        if char.isalpha():
            if char.is_lowercase():
                new_str[i] = char.to_uppercase()
            else:
                new_str[i] = char.to_lowercase()
            flg = 1
        idx += 1
    
    if flg == 0:
        return String(reversed(s))
    return new_str

fn main() raises:
    let input_string = ""Hello, World! 123""
    let result = swap_case_or_reverse(input_string)
    print(result)","from python import Python

fn test_solve():
    let py = Python.import_module(""builtins"")
    let print = py.print

    fn assert_equal(actual: String, expected: String):
        if actual != expected:
            print(""Assertion failed:"")
            print(""  Expected:"", expected)
            print(""  Actual:"", actual)
            raise Error(""Assertion failed"")

    # Assuming 'solve' is the function we're testing
    # You'll need to import or define 'solve' here

    # Check some simple cases
    assert_equal(solve(""AsDf""), ""aSdF"")
    assert_equal(solve(""1234""), ""4321"")
    assert_equal(solve(""ab""), ""AB"")
    assert_equal(solve(""#a@C""), ""#A@c"")
    assert_equal(solve(""#AsdfW^45""), ""#aSDFw^45"")
    assert_equal(solve(""#6@2""), ""2@6#"")

    # Check some edge cases that are easy to work out by hand.
    assert_equal(solve(""#$a^D""), ""#$A^d"")
    assert_equal(solve(""#ccc""), ""#CCC"")

    print(""All tests passed!"")

fn main():
    test_solve()",solve
HumanEval-Mojo/163,"fn do_algebra(operator: List[String], operand: List[Int]) -> Int:
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebraic 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator = [""+"", ""*"", ""-""]
    operand = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    Returns:
        The result of the evaluated algebraic expression as an Int.
    """"""","fn calculate(operand: DynamicVector[Int], operator: String) raises -> Int:
    var expression = String(operand[0])
    for i in range(len(operator)):
        expression += operator[i] + String(operand[i+1])
    
    let result = eval(expression)
    if isinstance(result, Int):
        return result
    else:
        raise Error(""Evaluation result is not an integer"")

fn eval(expression: String) raises -> Int:
    var stack = DynamicVector[Int]()
    var current_num = 0
    var current_op: Int8 = '+'
    
    for i in range(len(expression)):
        let c = expression[i]
        if c.isdigit():
            current_num = current_num * 10 + Int(c.to_ascii() - '0'.to_ascii())
        
        if (!c.isdigit() and c != ' ') or i == len(expression) - 1:
            if current_op == '+':
                stack.append(current_num)
            elif current_op == '-':
                stack.append(-current_num)
            elif current_op == '*':
                stack[len(stack) - 1] *= current_num
            elif current_op == '/':
                if current_num == 0:
                    raise Error(""Division by zero"")
                stack[len(stack) - 1] //= current_num
            
            current_op = c
            current_num = 0
    
    var result = 0
    for num in stack:
        result += num
    
    return result","from python import Python
from python.object import PythonObject

fn test_do_algebra():
    let py = Python()
    let list = py.import_module(""builtins"").list
    let str = py.import_module(""builtins"").str

    # Test case 1
    var ops1 = list([""**"", ""*"", ""+""])
    var nums1 = list([2, 3, 4, 5])
    var result1 = do_algebra(ops1, nums1)
    assert result1 == 37, ""Test case 1 failed""

    # Test case 2
    var ops2 = list([""+"", ""*"", ""-""])
    var nums2 = list([2, 3, 4, 5])
    var result2 = do_algebra(ops2, nums2)
    assert result2 == 9, ""Test case 2 failed""

    # Test case 3
    var ops3 = list([""//"", ""*""])
    var nums3 = list([7, 3, 4])
    var result3 = do_algebra(ops3, nums3)
    assert result3 == 8, ""Test case 3 failed: This prints if this assert fails 1 (good for debugging!)""

    print(""All tests passed!"")

fn main():
    test_do_algebra()",do_algebra